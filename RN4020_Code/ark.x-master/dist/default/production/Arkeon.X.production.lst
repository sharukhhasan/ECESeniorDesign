

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Dec  3 15:58:20 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    39  0000                     
    40                           	psect	idataCOMRAM
    41  000D86                     __pidataCOMRAM:
    42                           	opt stack 0
    43                           
    44                           ;initializer for hexlookup@hextable
    45  000D86  30                 	db	48
    46  000D87  31                 	db	49
    47  000D88  32                 	db	50
    48  000D89  33                 	db	51
    49  000D8A  34                 	db	52
    50  000D8B  35                 	db	53
    51  000D8C  36                 	db	54
    52  000D8D  37                 	db	55
    53  000D8E  38                 	db	56
    54  000D8F  39                 	db	57
    55  000D90  41                 	db	65
    56  000D91  42                 	db	66
    57  000D92  43                 	db	67
    58  000D93  44                 	db	68
    59  000D94  45                 	db	69
    60  000D95  46                 	db	70
    61  000D96  00                 	db	0
    62  0000                     _ANSELA	set	3896
    63  0000                     _ANSELC	set	3898
    64  0000                     _BAUDCON1bits	set	4024
    65  0000                     _BAUDCON2bits	set	3952
    66  0000                     _INTCONbits	set	4082
    67  0000                     _LATAbits	set	3977
    68  0000                     _LATCbits	set	3979
    69  0000                     _OSCCON	set	4051
    70  0000                     _OSCTUNEbits	set	3995
    71  0000                     _PIE1bits	set	3997
    72  0000                     _PIE3bits	set	4003
    73  0000                     _PIR1bits	set	3998
    74  0000                     _PIR3bits	set	4004
    75  0000                     _PORTA	set	3968
    76  0000                     _PORTB	set	3969
    77  0000                     _PORTC	set	3970
    78  0000                     _RCONbits	set	4048
    79  0000                     _RCREG1	set	4014
    80  0000                     _RCREG2	set	3956
    81  0000                     _RCSTA1bits	set	4011
    82  0000                     _RCSTA2bits	set	3953
    83  0000                     _SPBRG1	set	4015
    84  0000                     _SPBRG2	set	3957
    85  0000                     _SPBRGH1	set	4016
    86  0000                     _SPBRGH2	set	3958
    87  0000                     _TRISAbits	set	3986
    88  0000                     _TRISBbits	set	3987
    89  0000                     _TRISCbits	set	3988
    90  0000                     _TXREG1	set	4013
    91  0000                     _TXREG2	set	3955
    92  0000                     _TXSTA1bits	set	4012
    93  0000                     _TXSTA2bits	set	3954
    94                           
    95                           	psect	smallconst
    96  000600                     __psmallconst:
    97                           	opt stack 0
    98  000600  00                 	db	0
    99  000601                     __stringdata:
   100                           	opt stack 0
   101  000601                     STR_3:
   102  000601  73                 	db	115	;'s'
   103  000602  68                 	db	104	;'h'
   104  000603  77                 	db	119	;'w'
   105  000604  2C                 	db	44
   106  000605  30                 	db	48	;'0'
   107  000606  30                 	db	48	;'0'
   108  000607  31                 	db	49	;'1'
   109  000608  63                 	db	99	;'c'
   110  000609  2C                 	db	44
   111  00060A  00                 	db	0
   112  00060B  44                 	db	68	;'D'
   113  00060C  4F                 	db	79	;'O'
   114  00060D  3A                 	db	58	;':'
   115  00060E  00                 	db	0
   116  00060F  31                 	db	49	;'1'
   117  000610  30                 	db	48	;'0'
   118  000611  00                 	db	0
   119  000612                     __end_of__stringdata:
   120                           	opt stack 0
   121                           
   122                           ; #config settings
   123  000612  00                 	db	0	; dummy byte at the end
   124  0000                     
   125                           	psect	cinit
   126  000B06                     __pcinit:
   127                           	opt stack 0
   128  000B06                     start_initialization:
   129                           	opt stack 0
   130  000B06                     __initialization:
   131                           	opt stack 0
   132                           
   133                           ; Clear objects allocated to BANK1 (80 bytes)
   134  000B06  EE01  F000         	lfsr	0,__pbssBANK1
   135  000B0A  0E50               	movlw	80
   136  000B0C                     clear_0:
   137  000B0C  6AEE               	clrf	postinc0,c
   138  000B0E  06E8               	decf	wreg,f,c
   139  000B10  E1FD               	bnz	clear_0
   140                           
   141                           ; Clear objects allocated to BANK0 (60 bytes)
   142  000B12  EE00  F060         	lfsr	0,__pbssBANK0
   143  000B16  0E3C               	movlw	60
   144  000B18                     clear_1:
   145  000B18  6AEE               	clrf	postinc0,c
   146  000B1A  06E8               	decf	wreg,f,c
   147  000B1C  E1FD               	bnz	clear_1
   148                           
   149                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   150  000B1E  6A5B               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   151                           
   152                           ; Clear objects allocated to COMRAM (27 bytes)
   153  000B20  EE00  F02F         	lfsr	0,__pbssCOMRAM
   154  000B24  0E1B               	movlw	27
   155  000B26                     clear_2:
   156  000B26  6AEE               	clrf	postinc0,c
   157  000B28  06E8               	decf	wreg,f,c
   158  000B2A  E1FD               	bnz	clear_2
   159                           
   160                           ; Initialize objects allocated to COMRAM (17 bytes)
   161                           ; load TBLPTR registers with __pidataCOMRAM
   162  000B2C  0E86               	movlw	low __pidataCOMRAM
   163  000B2E  6EF6               	movwf	tblptrl,c
   164  000B30  0E0D               	movlw	high __pidataCOMRAM
   165  000B32  6EF7               	movwf	tblptrh,c
   166  000B34  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   167  000B36  6EF8               	movwf	tblptru,c
   168  000B38  EE00  F04A         	lfsr	0,__pdataCOMRAM
   169  000B3C  EE10 F011          	lfsr	1,17
   170  000B40                     copy_data0:
   171  000B40  0009               	tblrd		*+
   172  000B42  CFF5 FFEE          	movff	tablat,postinc0
   173  000B46  50E5               	movf	postdec1,w,c
   174  000B48  50E1               	movf	fsr1l,w,c
   175  000B4A  E1FA               	bnz	copy_data0
   176  000B4C                     end_of_initialization:
   177                           	opt stack 0
   178  000B4C                     __end_of__initialization:
   179                           	opt stack 0
   180  000B4C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   181  000B4E  6EF8               	movwf	tblptru,c
   182  000B50  0100               	movlb	0
   183  000B52  EFF7  F004         	goto	_main	;jump to C main() function
   184                           tblptru	equ	0xFF8
   185                           tblptrh	equ	0xFF7
   186                           tblptrl	equ	0xFF6
   187                           tablat	equ	0xFF5
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           postdec1	equ	0xFE5
   191                           fsr1l	equ	0xFE1
   192                           
   193                           	psect	bitbssCOMRAM
   194  0002D8                     __pbitbssCOMRAM:
   195                           	opt stack 0
   196  0002D8                     _bt_event:
   197                           	opt stack 0
   198  0002D8                     	ds	1
   199  0002D9                     _checking_for_sensors:
   200                           	opt stack 0
   201  0002D9                     	ds	1
   202  0002DA                     _mux_error:
   203                           	opt stack 0
   204  0002DA                     	ds	1
   205  0002DB                     _mux_event:
   206                           	opt stack 0
   207  0002DB                     	ds	1
   208                           tblptru	equ	0xFF8
   209                           tblptrh	equ	0xFF7
   210                           tblptrl	equ	0xFF6
   211                           tablat	equ	0xFF5
   212                           postinc0	equ	0xFEE
   213                           wreg	equ	0xFE8
   214                           postdec1	equ	0xFE5
   215                           fsr1l	equ	0xFE1
   216                           
   217                           	psect	bssCOMRAM
   218  00002F                     __pbssCOMRAM:
   219                           	opt stack 0
   220  00002F                     _has_sensor:
   221                           	opt stack 0
   222  00002F                     	ds	3
   223  000032                     _sensorIndex:
   224                           	opt stack 0
   225  000032                     	ds	2
   226  000034                     _mux_buffer_overflow:
   227                           	opt stack 0
   228  000034                     	ds	1
   229  000035                     _mux_input_index:
   230                           	opt stack 0
   231  000035                     	ds	1
   232  000036                     _mux_input:
   233                           	opt stack 0
   234  000036                     	ds	20
   235                           tblptru	equ	0xFF8
   236                           tblptrh	equ	0xFF7
   237                           tblptrl	equ	0xFF6
   238                           tablat	equ	0xFF5
   239                           postinc0	equ	0xFEE
   240                           wreg	equ	0xFE8
   241                           postdec1	equ	0xFE5
   242                           fsr1l	equ	0xFE1
   243                           
   244                           	psect	dataCOMRAM
   245  00004A                     __pdataCOMRAM:
   246                           	opt stack 0
   247  00004A                     hexlookup@hextable:
   248                           	opt stack 0
   249  00004A                     	ds	17
   250                           tblptru	equ	0xFF8
   251                           tblptrh	equ	0xFF7
   252                           tblptrl	equ	0xFF6
   253                           tablat	equ	0xFF5
   254                           postinc0	equ	0xFEE
   255                           wreg	equ	0xFE8
   256                           postdec1	equ	0xFE5
   257                           fsr1l	equ	0xFE1
   258                           
   259                           	psect	bssBANK0
   260  000060                     __pbssBANK0:
   261                           	opt stack 0
   262  000060                     _bt_input:
   263                           	opt stack 0
   264  000060                     	ds	20
   265  000074                     _sensorArray0:
   266                           	opt stack 0
   267  000074                     	ds	20
   268  000088                     _sensorArray1:
   269                           	opt stack 0
   270  000088                     	ds	20
   271                           tblptru	equ	0xFF8
   272                           tblptrh	equ	0xFF7
   273                           tblptrl	equ	0xFF6
   274                           tablat	equ	0xFF5
   275                           postinc0	equ	0xFEE
   276                           wreg	equ	0xFE8
   277                           postdec1	equ	0xFE5
   278                           fsr1l	equ	0xFE1
   279                           
   280                           	psect	bssBANK1
   281  000100                     __pbssBANK1:
   282                           	opt stack 0
   283  000100                     _writeSensorString:
   284                           	opt stack 0
   285  000100                     	ds	80
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           postdec1	equ	0xFE5
   293                           fsr1l	equ	0xFE1
   294                           
   295                           	psect	cstackBANK0
   296  00009C                     __pcstackBANK0:
   297                           	opt stack 0
   298  00009C                     ??_bt_handler:
   299                           
   300                           ; 0 bytes @ 0x0
   301  00009C                     	ds	18
   302  0000AE                     UART2_Write_Char@data:
   303                           	opt stack 0
   304  0000AE                     UART1_Write_Char@data:
   305                           	opt stack 0
   306  0000AE                     MUXchannel@channel:
   307                           	opt stack 0
   308  0000AE                     soft_delay@tt:
   309                           	opt stack 0
   310  0000AE                     strcat@to:
   311                           	opt stack 0
   312  0000AE                     strcpy@to:
   313                           	opt stack 0
   314                           
   315                           ; 2 bytes @ 0x12
   316  0000AE                     	ds	1
   317  0000AF                     UART2_Write_String@s:
   318                           	opt stack 0
   319                           
   320                           ; 2 bytes @ 0x13
   321  0000AF                     	ds	1
   322  0000B0                     ??_MUXchannel:
   323  0000B0                     ??_soft_delay:
   324  0000B0                     strcat@from:
   325                           	opt stack 0
   326  0000B0                     strcpy@from:
   327                           	opt stack 0
   328                           
   329                           ; 2 bytes @ 0x14
   330  0000B0                     	ds	1
   331  0000B1                     UART2_Write_Line@s:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x15
   335  0000B1                     	ds	1
   336  0000B2                     send_sensor_cmd@sensor_index:
   337                           	opt stack 0
   338  0000B2                     strcat@cp:
   339                           	opt stack 0
   340  0000B2                     strcpy@cp:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x16
   344  0000B2                     	ds	1
   345  0000B3                     
   346                           ; 0 bytes @ 0x17
   347  0000B3                     	ds	1
   348  0000B4                     main@inProcess:
   349                           	opt stack 0
   350                           
   351                           ; 1 bytes @ 0x18
   352  0000B4                     	ds	1
   353  0000B5                     main@i:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x19
   357  0000B5                     	ds	2
   358                           tblptru	equ	0xFF8
   359                           tblptrh	equ	0xFF7
   360                           tblptrl	equ	0xFF6
   361                           tablat	equ	0xFF5
   362                           postinc0	equ	0xFEE
   363                           wreg	equ	0xFE8
   364                           postdec1	equ	0xFE5
   365                           fsr1l	equ	0xFE1
   366                           
   367                           	psect	cstackCOMRAM
   368  000001                     __pcstackCOMRAM:
   369                           	opt stack 0
   370  000001                     ??_isdigit:
   371  000001                     ??_hexlookup:
   372  000001                     
   373                           ; 2 bytes @ 0x0
   374  000001                     	ds	1
   375  000002                     hexlookup@h:
   376                           	opt stack 0
   377  000002                     _isdigit$1777:
   378                           	opt stack 0
   379                           
   380                           ; 1 bytes @ 0x1
   381  000002                     	ds	1
   382  000003                     convert_char_hex@hi_lo:
   383                           	opt stack 0
   384  000003                     isdigit@c:
   385                           	opt stack 0
   386                           
   387                           ; 1 bytes @ 0x2
   388  000003                     	ds	1
   389  000004                     convert_char_hex@c:
   390                           	opt stack 0
   391                           
   392                           ; 1 bytes @ 0x3
   393  000004                     	ds	1
   394  000005                     add_sensors_data@data:
   395                           	opt stack 0
   396                           
   397                           ; 2 bytes @ 0x4
   398  000005                     	ds	2
   399  000007                     add_sensors_data@formatted_sensor_data:
   400                           	opt stack 0
   401                           
   402                           ; 2 bytes @ 0x6
   403  000007                     	ds	2
   404  000009                     add_sensors_data@max_data_size:
   405                           	opt stack 0
   406                           
   407                           ; 2 bytes @ 0x8
   408  000009                     	ds	2
   409  00000B                     ??_add_sensors_data:
   410                           
   411                           ; 0 bytes @ 0xA
   412  00000B                     	ds	4
   413  00000F                     add_sensors_data@j:
   414                           	opt stack 0
   415                           
   416                           ; 2 bytes @ 0xE
   417  00000F                     	ds	2
   418  000011                     add_sensors_data@count:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x10
   422  000011                     	ds	1
   423  000012                     add_sensors_data@end:
   424                           	opt stack 0
   425                           
   426                           ; 2 bytes @ 0x11
   427  000012                     	ds	2
   428  000014                     add_sensors_data@dst:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0x13
   432  000014                     	ds	2
   433  000016                     add_sensors_data@tmp:
   434                           	opt stack 0
   435                           
   436                           ; 2 bytes @ 0x15
   437  000016                     	ds	2
   438  000018                     ??_mux_handler:
   439                           
   440                           ; 0 bytes @ 0x17
   441  000018                     	ds	18
   442  00002A                     mux_handler@data:
   443                           	opt stack 0
   444                           
   445                           ; 2 bytes @ 0x29
   446  00002A                     	ds	2
   447  00002C                     mux_handler@i:
   448                           	opt stack 0
   449                           
   450                           ; 2 bytes @ 0x2B
   451  00002C                     	ds	2
   452  00002E                     mux_handler@c:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x2D
   456  00002E                     	ds	1
   457                           tblptru	equ	0xFF8
   458                           tblptrh	equ	0xFF7
   459                           tblptrl	equ	0xFF6
   460                           tablat	equ	0xFF5
   461                           postinc0	equ	0xFEE
   462                           wreg	equ	0xFE8
   463                           postdec1	equ	0xFE5
   464                           fsr1l	equ	0xFE1
   465                           
   466 ;;
   467 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   468 ;;
   469 ;; *************** function _main *****************
   470 ;; Defined at:
   471 ;;		line 421 in file "arkeon.c"
   472 ;; Parameters:    Size  Location     Type
   473 ;;		None
   474 ;; Auto vars:     Size  Location     Type
   475 ;;  i               2   25[BANK0 ] short 
   476 ;;  inProcess       1   24[BANK0 ] unsigned char 
   477 ;; Return value:  Size  Location     Type
   478 ;;                  2  324[COMRAM] int 
   479 ;; Registers used:
   480 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   486 ;;      Params:         0       0       0       0       0       0       0
   487 ;;      Locals:         0       3       0       0       0       0       0
   488 ;;      Temps:          0       0       0       0       0       0       0
   489 ;;      Totals:         0       3       0       0       0       0       0
   490 ;;Total ram usage:        3 bytes
   491 ;; Hardware stack levels required when called:    8
   492 ;; This function calls:
   493 ;;		_UART2_Write_Line
   494 ;;		_intialize
   495 ;;		_send_sensor_cmd
   496 ;;		_soft_delay
   497 ;;		_strcat
   498 ;;		_strcpy
   499 ;; This function is called by:
   500 ;;		Startup code after reset
   501 ;; This function uses a non-reentrant model
   502 ;;
   503                           
   504                           	psect	text0
   505  0009EE                     __ptext0:
   506                           	opt stack 0
   507  0009EE                     _main:
   508                           	opt stack 23
   509                           
   510                           ;arkeon.c: 423: short i;
   511                           ;arkeon.c: 424: char inProcess = 1;
   512                           
   513                           ;incstack = 0
   514  0009EE  0E01               	movlw	1
   515  0009F0  0100               	movlb	0	; () banked
   516  0009F2  6FB4               	movwf	main@inProcess& (0+255),b
   517                           
   518                           ;arkeon.c: 425: sensorIndex = i = 0;
   519  0009F4  0E00               	movlw	0
   520  0009F6  0100               	movlb	0	; () banked
   521  0009F8  6FB6               	movwf	(main@i+1)& (0+255),b
   522  0009FA  0E00               	movlw	0
   523  0009FC  0100               	movlb	0	; () banked
   524  0009FE  6FB5               	movwf	main@i& (0+255),b
   525  000A00  C0B5  F032         	movff	main@i,_sensorIndex
   526  000A04  C0B6  F033         	movff	main@i+1,_sensorIndex+1
   527                           
   528                           ; BSR set to: 0
   529                           ;arkeon.c: 427: intialize();
   530  000A08  EC59  F005         	call	_intialize	;wreg free
   531                           
   532                           ;arkeon.c: 429: soft_delay(100);
   533  000A0C  0E00               	movlw	0
   534  000A0E  0100               	movlb	0	; () banked
   535  000A10  6FAF               	movwf	(soft_delay@tt+1)& (0+255),b
   536  000A12  0E64               	movlw	100
   537  000A14  0100               	movlb	0	; () banked
   538  000A16  6FAE               	movwf	soft_delay@tt& (0+255),b
   539  000A18  EC32  F006         	call	_soft_delay	;wreg free
   540                           
   541                           ;arkeon.c: 435: send_sensor_cmd(0);
   542  000A1C  0E00               	movlw	0
   543  000A1E  ECD1  F005         	call	_send_sensor_cmd
   544  000A22                     l2038:
   545                           
   546                           ;arkeon.c: 438: {
   547                           ;arkeon.c: 441: if ( mux_event && (inProcess == 1) ) {
   548  000A22  0100               	movlb	(_mux_event/(0+8)) shr (0+8)
   549  000A24  A65B               	btfss	_mux_event/(0+8),_mux_event& (0+7),c	;volatile
   550  000A26  D7FD               	goto	l2038
   551  000A28  0100               	movlb	0	; () banked
   552  000A2A  05B4               	decf	main@inProcess& (0+255),w,b
   553  000A2C  A4D8               	btfss	status,2,c
   554  000A2E  D7F9               	goto	l2038
   555                           
   556                           ; BSR set to: 0
   557                           ;arkeon.c: 443: mux_event = 0;
   558  000A30  0100               	movlb	(_mux_event/(0+8)) shr (0+8)
   559  000A32  965B               	bcf	_mux_event/(0+8),_mux_event& (0+7),c	;volatile
   560                           
   561                           ;arkeon.c: 445: i = (++i) % 1;
   562  000A34  0E00               	movlw	0
   563  000A36  0100               	movlb	0	; () banked
   564  000A38  6FB6               	movwf	(main@i+1)& (0+255),b
   565  000A3A  0E00               	movlw	0
   566  000A3C  0100               	movlb	0	; () banked
   567  000A3E  6FB5               	movwf	main@i& (0+255),b
   568                           
   569                           ; BSR set to: 0
   570                           ;arkeon.c: 447: if ( i == 0 ) {
   571  000A40  0100               	movlb	0	; () banked
   572  000A42  51B6               	movf	(main@i+1)& (0+255),w,b
   573  000A44  11B5               	iorwf	main@i& (0+255),w,b
   574  000A46  A4D8               	btfss	status,2,c
   575  000A48  D02C               	goto	l2054
   576                           
   577                           ; BSR set to: 0
   578                           ;arkeon.c: 448: strcpy(writeSensorString,"shw,001c,");
   579  000A4A  0101               	movlb	1	; () banked
   580  000A4C  0E01               	movlw	high _writeSensorString
   581  000A4E  0100               	movlb	0	; () banked
   582  000A50  6FAF               	movwf	(strcpy@to+1)& (0+255),b
   583  000A52  0101               	movlb	1	; () banked
   584  000A54  0E00               	movlw	low _writeSensorString
   585  000A56  0100               	movlb	0	; () banked
   586  000A58  6FAE               	movwf	strcpy@to& (0+255),b
   587  000A5A  0E06               	movlw	high STR_3
   588  000A5C  0100               	movlb	0	; () banked
   589  000A5E  6FB1               	movwf	(strcpy@from+1)& (0+255),b
   590  000A60  0E01               	movlw	low STR_3
   591  000A62  0100               	movlb	0	; () banked
   592  000A64  6FB0               	movwf	strcpy@from& (0+255),b
   593  000A66  EC14  F006         	call	_strcpy	;wreg free
   594                           
   595                           ;arkeon.c: 449: strcat(writeSensorString,sensorArray0);
   596  000A6A  0101               	movlb	1	; () banked
   597  000A6C  0E01               	movlw	high _writeSensorString
   598  000A6E  0100               	movlb	0	; () banked
   599  000A70  6FAF               	movwf	(strcat@to+1)& (0+255),b
   600  000A72  0101               	movlb	1	; () banked
   601  000A74  0E00               	movlw	low _writeSensorString
   602  000A76  0100               	movlb	0	; () banked
   603  000A78  6FAE               	movwf	strcat@to& (0+255),b
   604  000A7A  0100               	movlb	0	; () banked
   605  000A7C  0E00               	movlw	high _sensorArray0
   606  000A7E  0100               	movlb	0	; () banked
   607  000A80  6FB1               	movwf	(strcat@from+1)& (0+255),b
   608  000A82  0100               	movlb	0	; () banked
   609  000A84  0E74               	movlw	low _sensorArray0
   610  000A86  0100               	movlb	0	; () banked
   611  000A88  6FB0               	movwf	strcat@from& (0+255),b
   612  000A8A  ECAB  F005         	call	_strcat	;wreg free
   613                           
   614                           ;arkeon.c: 451: UART2_Write_Line((char *)writeSensorString);
   615  000A8E  0101               	movlb	1	; () banked
   616  000A90  0E01               	movlw	high _writeSensorString
   617  000A92  0100               	movlb	0	; () banked
   618  000A94  6FB2               	movwf	(UART2_Write_Line@s+1)& (0+255),b
   619  000A96  0101               	movlb	1	; () banked
   620  000A98  0E00               	movlw	low _writeSensorString
   621  000A9A  0100               	movlb	0	; () banked
   622  000A9C  6FB1               	movwf	UART2_Write_Line@s& (0+255),b
   623  000A9E  ECB7  F006         	call	_UART2_Write_Line	;wreg free
   624  000AA2                     l2054:
   625                           
   626                           ;arkeon.c: 452: }
   627                           ;arkeon.c: 454: sensorIndex = i;
   628  000AA2  C0B5  F032         	movff	main@i,_sensorIndex
   629  000AA6  C0B6  F033         	movff	main@i+1,_sensorIndex+1
   630                           
   631                           ;arkeon.c: 455: send_sensor_cmd(sensorIndex);
   632  000AAA  5032               	movf	_sensorIndex,w,c
   633  000AAC  ECD1  F005         	call	_send_sensor_cmd
   634  000AB0  D7B8               	goto	l2038
   635  000AB2                     __end_of_main:
   636                           	opt stack 0
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           postinc0	equ	0xFEE
   642                           wreg	equ	0xFE8
   643                           postdec1	equ	0xFE5
   644                           fsr1l	equ	0xFE1
   645                           status	equ	0xFD8
   646                           
   647 ;; *************** function _strcpy *****************
   648 ;; Defined at:
   649 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/strcpy.c"
   650 ;; Parameters:    Size  Location     Type
   651 ;;  to              2   18[BANK0 ] PTR unsigned char 
   652 ;;		 -> writeSensorString(80), 
   653 ;;  from            2   20[BANK0 ] PTR const unsigned char 
   654 ;;		 -> STR_3(10), 
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  cp              2   22[BANK0 ] PTR unsigned char 
   657 ;;		 -> writeSensorString(80), 
   658 ;; Return value:  Size  Location     Type
   659 ;;                  2   18[BANK0 ] PTR unsigned char 
   660 ;; Registers used:
   661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   667 ;;      Params:         0       4       0       0       0       0       0
   668 ;;      Locals:         0       2       0       0       0       0       0
   669 ;;      Temps:          0       0       0       0       0       0       0
   670 ;;      Totals:         0       6       0       0       0       0       0
   671 ;;Total ram usage:        6 bytes
   672 ;; Hardware stack levels used:    1
   673 ;; Hardware stack levels required when called:    5
   674 ;; This function calls:
   675 ;;		Nothing
   676 ;; This function is called by:
   677 ;;		_main
   678 ;; This function uses a non-reentrant model
   679 ;;
   680                           
   681                           	psect	text1
   682  000C28                     __ptext1:
   683                           	opt stack 0
   684  000C28                     _strcpy:
   685                           	opt stack 25
   686                           
   687                           ;incstack = 0
   688  000C28  0100               	movlb	0	; () banked
   689  000C2A  C0AF  F0B3         	movff	strcpy@to+1,strcpy@cp+1
   690  000C2E  0100               	movlb	0	; () banked
   691  000C30  C0AE  F0B2         	movff	strcpy@to,strcpy@cp
   692  000C34  D006               	goto	l2010
   693  000C36                     l2008:
   694                           
   695                           ; BSR set to: 0
   696  000C36  0100               	movlb	0	; () banked
   697  000C38  4BB2               	infsnz	strcpy@cp& (0+255),f,b
   698  000C3A  2BB3               	incf	(strcpy@cp+1)& (0+255),f,b
   699  000C3C  0100               	movlb	0	; () banked
   700  000C3E  4BB0               	infsnz	strcpy@from& (0+255),f,b
   701  000C40  2BB1               	incf	(strcpy@from+1)& (0+255),f,b
   702  000C42                     l2010:
   703                           
   704                           ; BSR set to: 0
   705  000C42  0100               	movlb	0	; () banked
   706  000C44  C0B0  FFF6         	movff	strcpy@from,tblptrl
   707  000C48  0100               	movlb	0	; () banked
   708  000C4A  C0B1  FFF7         	movff	strcpy@from+1,tblptrh
   709  000C4E                     	if	0	;tblptru may be non-zero
   710  000C4E                     	endif
   711  000C4E                     	if	0	;tblptru may be non-zero
   712  000C4E                     	endif
   713  000C4E  C0B2  FFD9         	movff	strcpy@cp,fsr2l
   714  000C52  C0B3  FFDA         	movff	strcpy@cp+1,fsr2h
   715  000C56  0008               	tblrd		*
   716  000C58  CFF5 FFDF          	movff	tablat,indf2
   717  000C5C  50DF               	movf	indf2,w,c
   718  000C5E  B4D8               	btfsc	status,2,c
   719                           
   720                           ; BSR set to: 0
   721                           
   722                           ; BSR set to: 0
   723                           ;	Return value of _strcpy is never used
   724  000C60  0012               	return	
   725  000C62  D7E9               	goto	l2008
   726  000C64                     __end_of_strcpy:
   727                           	opt stack 0
   728                           tblptru	equ	0xFF8
   729                           tblptrh	equ	0xFF7
   730                           tblptrl	equ	0xFF6
   731                           tablat	equ	0xFF5
   732                           postinc0	equ	0xFEE
   733                           wreg	equ	0xFE8
   734                           postdec1	equ	0xFE5
   735                           fsr1l	equ	0xFE1
   736                           indf2	equ	0xFDF
   737                           fsr2h	equ	0xFDA
   738                           fsr2l	equ	0xFD9
   739                           status	equ	0xFD8
   740                           
   741 ;; *************** function _strcat *****************
   742 ;; Defined at:
   743 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/strcat.c"
   744 ;; Parameters:    Size  Location     Type
   745 ;;  to              2   18[BANK0 ] PTR unsigned char 
   746 ;;		 -> writeSensorString(80), 
   747 ;;  from            2   20[BANK0 ] PTR const unsigned char 
   748 ;;		 -> sensorArray0(20), 
   749 ;; Auto vars:     Size  Location     Type
   750 ;;  cp              2   22[BANK0 ] PTR unsigned char 
   751 ;;		 -> writeSensorString(80), 
   752 ;; Return value:  Size  Location     Type
   753 ;;                  2   18[BANK0 ] PTR unsigned char 
   754 ;; Registers used:
   755 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   756 ;; Tracked objects:
   757 ;;		On entry : 0/0
   758 ;;		On exit  : 0/0
   759 ;;		Unchanged: 0/0
   760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   761 ;;      Params:         0       4       0       0       0       0       0
   762 ;;      Locals:         0       2       0       0       0       0       0
   763 ;;      Temps:          0       0       0       0       0       0       0
   764 ;;      Totals:         0       6       0       0       0       0       0
   765 ;;Total ram usage:        6 bytes
   766 ;; Hardware stack levels used:    1
   767 ;; Hardware stack levels required when called:    5
   768 ;; This function calls:
   769 ;;		Nothing
   770 ;; This function is called by:
   771 ;;		_main
   772 ;; This function uses a non-reentrant model
   773 ;;
   774                           
   775                           	psect	text2
   776  000B56                     __ptext2:
   777                           	opt stack 0
   778  000B56                     _strcat:
   779                           	opt stack 25
   780                           
   781                           ; BSR set to: 0
   782                           ;incstack = 0
   783  000B56  0100               	movlb	0	; () banked
   784  000B58  C0AF  F0B3         	movff	strcat@to+1,strcat@cp+1
   785  000B5C  0100               	movlb	0	; () banked
   786  000B5E  C0AE  F0B2         	movff	strcat@to,strcat@cp
   787  000B62  D003               	goto	l2016
   788  000B64                     l2014:
   789                           
   790                           ; BSR set to: 0
   791  000B64  0100               	movlb	0	; () banked
   792  000B66  4BB2               	infsnz	strcat@cp& (0+255),f,b
   793  000B68  2BB3               	incf	(strcat@cp+1)& (0+255),f,b
   794  000B6A                     l2016:
   795                           
   796                           ; BSR set to: 0
   797  000B6A  C0B2  FFD9         	movff	strcat@cp,fsr2l
   798  000B6E  C0B3  FFDA         	movff	strcat@cp+1,fsr2h
   799  000B72  50DF               	movf	indf2,w,c
   800  000B74  B4D8               	btfsc	status,2,c
   801  000B76  D007               	goto	l2020
   802  000B78  D7F5               	goto	l2014
   803  000B7A                     l2018:
   804                           
   805                           ; BSR set to: 0
   806  000B7A  0100               	movlb	0	; () banked
   807  000B7C  4BB2               	infsnz	strcat@cp& (0+255),f,b
   808  000B7E  2BB3               	incf	(strcat@cp+1)& (0+255),f,b
   809  000B80  0100               	movlb	0	; () banked
   810  000B82  4BB0               	infsnz	strcat@from& (0+255),f,b
   811  000B84  2BB1               	incf	(strcat@from+1)& (0+255),f,b
   812  000B86                     l2020:
   813                           
   814                           ; BSR set to: 0
   815  000B86  C0B0  FFD9         	movff	strcat@from,fsr2l
   816  000B8A  C0B1  FFDA         	movff	strcat@from+1,fsr2h
   817  000B8E  C0B2  FFE1         	movff	strcat@cp,fsr1l
   818  000B92  C0B3  FFE2         	movff	strcat@cp+1,fsr1h
   819  000B96  CFDF FFE7          	movff	indf2,indf1
   820  000B9A  50E7               	movf	indf1,w,c
   821  000B9C  B4D8               	btfsc	status,2,c
   822                           
   823                           ; BSR set to: 0
   824                           
   825                           ; BSR set to: 0
   826                           ;	Return value of _strcat is never used
   827  000B9E  0012               	return	
   828  000BA0  D7EC               	goto	l2018
   829  000BA2                     __end_of_strcat:
   830                           	opt stack 0
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           indf1	equ	0xFE7
   838                           postdec1	equ	0xFE5
   839                           fsr1h	equ	0xFE2
   840                           fsr1l	equ	0xFE1
   841                           indf2	equ	0xFDF
   842                           fsr2h	equ	0xFDA
   843                           fsr2l	equ	0xFD9
   844                           status	equ	0xFD8
   845                           
   846 ;; *************** function _send_sensor_cmd *****************
   847 ;; Defined at:
   848 ;;		line 326 in file "arkeon.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;  sensor_index    1    wreg     unsigned char 
   851 ;; Auto vars:     Size  Location     Type
   852 ;;  sensor_index    1   22[BANK0 ] unsigned char 
   853 ;; Return value:  Size  Location     Type
   854 ;;		None               void
   855 ;; Registers used:
   856 ;;		wreg, status,2, status,0, prodl, cstack
   857 ;; Tracked objects:
   858 ;;		On entry : 0/0
   859 ;;		On exit  : 0/0
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   862 ;;      Params:         0       0       0       0       0       0       0
   863 ;;      Locals:         0       1       0       0       0       0       0
   864 ;;      Temps:          0       0       0       0       0       0       0
   865 ;;      Totals:         0       1       0       0       0       0       0
   866 ;;Total ram usage:        1 bytes
   867 ;; Hardware stack levels used:    1
   868 ;; Hardware stack levels required when called:    6
   869 ;; This function calls:
   870 ;;		_MUXchannel
   871 ;;		_UART1_Write_Char
   872 ;;		_soft_delay
   873 ;; This function is called by:
   874 ;;		_main
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text3
   879  000BA2                     __ptext3:
   880                           	opt stack 0
   881  000BA2                     _send_sensor_cmd:
   882                           	opt stack 24
   883                           
   884                           ; BSR set to: 0
   885                           ;incstack = 0
   886                           ;send_sensor_cmd@sensor_index stored from wreg
   887  000BA2  0100               	movlb	0	; () banked
   888  000BA4  6FB2               	movwf	send_sensor_cmd@sensor_index& (0+255),b
   889                           
   890                           ; BSR set to: 0
   891                           ;arkeon.c: 328: PIE1bits.RC1IE = 0;
   892  000BA6  9A9D               	bcf	3997,5,c	;volatile
   893                           
   894                           ; BSR set to: 0
   895                           ;arkeon.c: 329: MUXchannel(sensor_index);
   896  000BA8  0100               	movlb	0	; () banked
   897  000BAA  C0B2  F0AE         	movff	send_sensor_cmd@sensor_index,MUXchannel@channel
   898  000BAE  0100               	movlb	0	; () banked
   899  000BB0  6BAF               	clrf	(MUXchannel@channel+1)& (0+255),b
   900  000BB2  ECF3  F005         	call	_MUXchannel	;wreg free
   901                           
   902                           ;arkeon.c: 330: soft_delay(1000);
   903  000BB6  0E03               	movlw	3
   904  000BB8  0100               	movlb	0	; () banked
   905  000BBA  6FAF               	movwf	(soft_delay@tt+1)& (0+255),b
   906  000BBC  0EE8               	movlw	232
   907  000BBE  0100               	movlb	0	; () banked
   908  000BC0  6FAE               	movwf	soft_delay@tt& (0+255),b
   909  000BC2  EC32  F006         	call	_soft_delay	;wreg free
   910                           
   911                           ;arkeon.c: 331: PIE1bits.RC1IE = 1;
   912  000BC6  8A9D               	bsf	3997,5,c	;volatile
   913                           
   914                           ;arkeon.c: 334: UART1_Write_Char('R');
   915  000BC8  0E52               	movlw	82
   916  000BCA  ECCC  F006         	call	_UART1_Write_Char
   917                           
   918                           ;arkeon.c: 335: UART1_Write_Char(13);
   919  000BCE  0E0D               	movlw	13
   920  000BD0  ECCC  F006         	call	_UART1_Write_Char
   921                           
   922                           ;arkeon.c: 338: soft_delay(3000);
   923  000BD4  0E0B               	movlw	11
   924  000BD6  0100               	movlb	0	; () banked
   925  000BD8  6FAF               	movwf	(soft_delay@tt+1)& (0+255),b
   926  000BDA  0EB8               	movlw	184
   927  000BDC  0100               	movlb	0	; () banked
   928  000BDE  6FAE               	movwf	soft_delay@tt& (0+255),b
   929  000BE0  EC32  F006         	call	_soft_delay	;wreg free
   930  000BE4  0012               	return	
   931  000BE6                     __end_of_send_sensor_cmd:
   932                           	opt stack 0
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           indf1	equ	0xFE7
   940                           postdec1	equ	0xFE5
   941                           fsr1h	equ	0xFE2
   942                           fsr1l	equ	0xFE1
   943                           indf2	equ	0xFDF
   944                           fsr2h	equ	0xFDA
   945                           fsr2l	equ	0xFD9
   946                           status	equ	0xFD8
   947                           
   948 ;; *************** function _UART1_Write_Char *****************
   949 ;; Defined at:
   950 ;;		line 115 in file "putgetc.c"
   951 ;; Parameters:    Size  Location     Type
   952 ;;  data            1    wreg     unsigned char 
   953 ;; Auto vars:     Size  Location     Type
   954 ;;  data            1   18[BANK0 ] unsigned char 
   955 ;; Return value:  Size  Location     Type
   956 ;;		None               void
   957 ;; Registers used:
   958 ;;		wreg
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   964 ;;      Params:         0       0       0       0       0       0       0
   965 ;;      Locals:         0       1       0       0       0       0       0
   966 ;;      Temps:          0       0       0       0       0       0       0
   967 ;;      Totals:         0       1       0       0       0       0       0
   968 ;;Total ram usage:        1 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    5
   971 ;; This function calls:
   972 ;;		Nothing
   973 ;; This function is called by:
   974 ;;		_send_sensor_cmd
   975 ;;		_UART1_Write_String
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           	psect	text4
   980  000D98                     __ptext4:
   981                           	opt stack 0
   982  000D98                     _UART1_Write_Char:
   983                           	opt stack 24
   984                           
   985                           ;incstack = 0
   986                           ;UART1_Write_Char@data stored from wreg
   987  000D98  0100               	movlb	0	; () banked
   988  000D9A  6FAE               	movwf	UART1_Write_Char@data& (0+255),b
   989  000D9C                     l78:
   990  000D9C  A2AC               	btfss	4012,1,c	;volatile
   991  000D9E  D7FE               	goto	l78
   992                           
   993                           ;putgetc.c: 118: TXREG1 = data;
   994  000DA0  C0AE  FFAD         	movff	UART1_Write_Char@data,4013	;volatile
   995  000DA4  0012               	return	
   996  000DA6                     __end_of_UART1_Write_Char:
   997                           	opt stack 0
   998                           tblptru	equ	0xFF8
   999                           tblptrh	equ	0xFF7
  1000                           tblptrl	equ	0xFF6
  1001                           tablat	equ	0xFF5
  1002                           postinc0	equ	0xFEE
  1003                           wreg	equ	0xFE8
  1004                           indf1	equ	0xFE7
  1005                           postdec1	equ	0xFE5
  1006                           fsr1h	equ	0xFE2
  1007                           fsr1l	equ	0xFE1
  1008                           indf2	equ	0xFDF
  1009                           fsr2h	equ	0xFDA
  1010                           fsr2l	equ	0xFD9
  1011                           status	equ	0xFD8
  1012                           
  1013 ;; *************** function _MUXchannel *****************
  1014 ;; Defined at:
  1015 ;;		line 282 in file "arkeon.c"
  1016 ;; Parameters:    Size  Location     Type
  1017 ;;  channel         2   18[BANK0 ] unsigned int 
  1018 ;; Auto vars:     Size  Location     Type
  1019 ;;		None
  1020 ;; Return value:  Size  Location     Type
  1021 ;;		None               void
  1022 ;; Registers used:
  1023 ;;		wreg, status,2, status,0
  1024 ;; Tracked objects:
  1025 ;;		On entry : 0/0
  1026 ;;		On exit  : 0/0
  1027 ;;		Unchanged: 0/0
  1028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1029 ;;      Params:         0       2       0       0       0       0       0
  1030 ;;      Locals:         0       0       0       0       0       0       0
  1031 ;;      Temps:          0       2       0       0       0       0       0
  1032 ;;      Totals:         0       4       0       0       0       0       0
  1033 ;;Total ram usage:        4 bytes
  1034 ;; Hardware stack levels used:    1
  1035 ;; Hardware stack levels required when called:    5
  1036 ;; This function calls:
  1037 ;;		Nothing
  1038 ;; This function is called by:
  1039 ;;		_send_sensor_cmd
  1040 ;; This function uses a non-reentrant model
  1041 ;;
  1042                           
  1043                           	psect	text5
  1044  000BE6                     __ptext5:
  1045                           	opt stack 0
  1046  000BE6                     _MUXchannel:
  1047                           	opt stack 24
  1048                           
  1049                           ;arkeon.c: 284: switch ( channel ) {
  1050                           
  1051                           ;incstack = 0
  1052  000BE6  D009               	goto	l1946
  1053  000BE8                     l303:
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;arkeon.c: 286: LATAbits.LATA6 = 0;
  1057  000BE8  9C89               	bcf	3977,6,c	;volatile
  1058                           
  1059                           ;arkeon.c: 287: LATCbits.LATC0 = 0;
  1060  000BEA  908B               	bcf	3979,0,c	;volatile
  1061                           
  1062                           ;arkeon.c: 288: break;
  1063  000BEC  0012               	return	
  1064  000BEE                     l305:
  1065                           
  1066                           ; BSR set to: 0
  1067                           ;arkeon.c: 291: LATAbits.LATA6 = 0;
  1068  000BEE  9C89               	bcf	3977,6,c	;volatile
  1069                           
  1070                           ;arkeon.c: 292: LATCbits.LATC0 = 1;
  1071  000BF0  808B               	bsf	3979,0,c	;volatile
  1072                           
  1073                           ;arkeon.c: 293: break;
  1074  000BF2  0012               	return	
  1075  000BF4                     l306:
  1076                           
  1077                           ; BSR set to: 0
  1078                           ;arkeon.c: 296: LATAbits.LATA6 = 1;
  1079  000BF4  8C89               	bsf	3977,6,c	;volatile
  1080                           
  1081                           ;arkeon.c: 297: LATCbits.LATC0 = 1;
  1082  000BF6  808B               	bsf	3979,0,c	;volatile
  1083                           
  1084                           ;arkeon.c: 298: break;
  1085  000BF8  0012               	return	
  1086  000BFA                     l1946:
  1087  000BFA  0100               	movlb	0	; () banked
  1088  000BFC  C0AE  F0B0         	movff	MUXchannel@channel,??_MUXchannel
  1089  000C00  0100               	movlb	0	; () banked
  1090  000C02  C0AF  F0B1         	movff	MUXchannel@channel+1,??_MUXchannel+1
  1091                           
  1092                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1093                           ; Switch size 1, requested type "space"
  1094                           ; Number of cases is 1, Range of values is 0 to 0
  1095                           ; switch strategies available:
  1096                           ; Name         Instructions Cycles
  1097                           ; simple_byte            4     3 (average)
  1098                           ;	Chosen strategy is simple_byte
  1099  000C06  0100               	movlb	0	; () banked
  1100  000C08  51B1               	movf	(??_MUXchannel+1)& (0+255),w,b
  1101  000C0A  0A00               	xorlw	0	; case 0
  1102  000C0C  A4D8               	btfss	status,2,c
  1103  000C0E  0012               	return	
  1104                           
  1105                           ; BSR set to: 0
  1106                           ; Switch size 1, requested type "space"
  1107                           ; Number of cases is 3, Range of values is 0 to 2
  1108                           ; switch strategies available:
  1109                           ; Name         Instructions Cycles
  1110                           ; simple_byte           10     6 (average)
  1111                           ;	Chosen strategy is simple_byte
  1112  000C10  0100               	movlb	0	; () banked
  1113  000C12  51B0               	movf	??_MUXchannel& (0+255),w,b
  1114  000C14  0A00               	xorlw	0	; case 0
  1115  000C16  B4D8               	btfsc	status,2,c
  1116  000C18  D7E7               	goto	l303
  1117  000C1A  0A01               	xorlw	1	; case 1
  1118  000C1C  B4D8               	btfsc	status,2,c
  1119  000C1E  D7E7               	goto	l305
  1120  000C20  0A03               	xorlw	3	; case 2
  1121  000C22  A4D8               	btfss	status,2,c
  1122  000C24  0012               	return	
  1123  000C26  D7E6               	goto	l306
  1124  000C28                     __end_of_MUXchannel:
  1125                           	opt stack 0
  1126                           tblptru	equ	0xFF8
  1127                           tblptrh	equ	0xFF7
  1128                           tblptrl	equ	0xFF6
  1129                           tablat	equ	0xFF5
  1130                           postinc0	equ	0xFEE
  1131                           wreg	equ	0xFE8
  1132                           indf1	equ	0xFE7
  1133                           postdec1	equ	0xFE5
  1134                           fsr1h	equ	0xFE2
  1135                           fsr1l	equ	0xFE1
  1136                           indf2	equ	0xFDF
  1137                           fsr2h	equ	0xFDA
  1138                           fsr2l	equ	0xFD9
  1139                           status	equ	0xFD8
  1140                           
  1141 ;; *************** function _intialize *****************
  1142 ;; Defined at:
  1143 ;;		line 376 in file "arkeon.c"
  1144 ;; Parameters:    Size  Location     Type
  1145 ;;		None
  1146 ;; Auto vars:     Size  Location     Type
  1147 ;;		None
  1148 ;; Return value:  Size  Location     Type
  1149 ;;		None               void
  1150 ;; Registers used:
  1151 ;;		wreg, status,2, status,0, prodl, cstack
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1157 ;;      Params:         0       0       0       0       0       0       0
  1158 ;;      Locals:         0       0       0       0       0       0       0
  1159 ;;      Temps:          0       0       0       0       0       0       0
  1160 ;;      Totals:         0       0       0       0       0       0       0
  1161 ;;Total ram usage:        0 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    6
  1164 ;; This function calls:
  1165 ;;		_USART1_init
  1166 ;;		_USART2_init
  1167 ;;		_interrupt_init
  1168 ;;		_soft_delay
  1169 ;; This function is called by:
  1170 ;;		_main
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text6
  1175  000AB2                     __ptext6:
  1176                           	opt stack 0
  1177  000AB2                     _intialize:
  1178                           	opt stack 24
  1179                           
  1180                           ;arkeon.c: 379: bt_event = 0;
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;incstack = 0
  1184  000AB2  0100               	movlb	(_bt_event/(0+8)) shr (0+8)
  1185  000AB4  905B               	bcf	_bt_event/(0+8),_bt_event& (0+7),c	;volatile
  1186                           
  1187                           ;arkeon.c: 380: mux_event = 0;
  1188  000AB6  0100               	movlb	(_mux_event/(0+8)) shr (0+8)
  1189  000AB8  965B               	bcf	_mux_event/(0+8),_mux_event& (0+7),c	;volatile
  1190                           
  1191                           ;arkeon.c: 381: mux_error = 0;
  1192  000ABA  0100               	movlb	(_mux_error/(0+8)) shr (0+8)
  1193  000ABC  945B               	bcf	_mux_error/(0+8),_mux_error& (0+7),c	;volatile
  1194                           
  1195                           ;arkeon.c: 389: OSCCON = 0xF0;
  1196  000ABE  0EF0               	movlw	240
  1197  000AC0  6ED3               	movwf	4051,c	;volatile
  1198                           
  1199                           ;arkeon.c: 390: OSCTUNEbits.PLLEN = 1;
  1200  000AC2  8C9B               	bsf	3995,6,c	;volatile
  1201                           
  1202                           ;arkeon.c: 393: ANSELA = 0;
  1203  000AC4  0E00               	movlw	0
  1204  000AC6  010F               	movlb	15	; () banked
  1205  000AC8  6F38               	movwf	56,b	;volatile
  1206                           
  1207                           ;arkeon.c: 394: ANSELC = 0;
  1208  000ACA  0E00               	movlw	0
  1209  000ACC  010F               	movlb	15	; () banked
  1210  000ACE  6F3A               	movwf	58,b	;volatile
  1211                           
  1212                           ;arkeon.c: 397: PORTA = 0;
  1213  000AD0  0E00               	movlw	0
  1214  000AD2  6E80               	movwf	3968,c	;volatile
  1215                           
  1216                           ;arkeon.c: 398: PORTB = 0;
  1217  000AD4  0E00               	movlw	0
  1218  000AD6  6E81               	movwf	3969,c	;volatile
  1219                           
  1220                           ;arkeon.c: 399: PORTC = 0;
  1221  000AD8  0E00               	movlw	0
  1222  000ADA  6E82               	movwf	3970,c	;volatile
  1223                           
  1224                           ; BSR set to: 15
  1225                           ;arkeon.c: 402: TRISAbits.TRISA1 = 0;
  1226  000ADC  9292               	bcf	3986,1,c	;volatile
  1227                           
  1228                           ; BSR set to: 15
  1229                           ;arkeon.c: 403: TRISAbits.TRISA2 = 0;
  1230  000ADE  9492               	bcf	3986,2,c	;volatile
  1231                           
  1232                           ; BSR set to: 15
  1233                           ;arkeon.c: 404: LATAbits.LATA1 = 1;
  1234  000AE0  8289               	bsf	3977,1,c	;volatile
  1235                           
  1236                           ; BSR set to: 15
  1237                           ;arkeon.c: 405: LATAbits.LATA2 = 0;
  1238  000AE2  9489               	bcf	3977,2,c	;volatile
  1239                           
  1240                           ; BSR set to: 15
  1241                           ;arkeon.c: 408: TRISAbits.TRISA6 = 0;
  1242  000AE4  9C92               	bcf	3986,6,c	;volatile
  1243                           
  1244                           ; BSR set to: 15
  1245                           ;arkeon.c: 409: TRISCbits.TRISC0 = 0;
  1246  000AE6  9094               	bcf	3988,0,c	;volatile
  1247                           
  1248                           ; BSR set to: 15
  1249                           ;arkeon.c: 412: interrupt_init();
  1250  000AE8  ECDA  F006         	call	_interrupt_init	;wreg free
  1251                           
  1252                           ;arkeon.c: 415: USART1_init();
  1253  000AEC  EC86  F006         	call	_USART1_init	;wreg free
  1254                           
  1255                           ;arkeon.c: 416: soft_delay(1000);
  1256  000AF0  0E03               	movlw	3
  1257  000AF2  0100               	movlb	0	; () banked
  1258  000AF4  6FAF               	movwf	(soft_delay@tt+1)& (0+255),b
  1259  000AF6  0EE8               	movlw	232
  1260  000AF8  0100               	movlb	0	; () banked
  1261  000AFA  6FAE               	movwf	soft_delay@tt& (0+255),b
  1262  000AFC  EC32  F006         	call	_soft_delay	;wreg free
  1263                           
  1264                           ;arkeon.c: 417: USART2_init();
  1265  000B00  EC74  F006         	call	_USART2_init	;wreg free
  1266  000B04  0012               	return	
  1267  000B06                     __end_of_intialize:
  1268                           	opt stack 0
  1269                           tblptru	equ	0xFF8
  1270                           tblptrh	equ	0xFF7
  1271                           tblptrl	equ	0xFF6
  1272                           tablat	equ	0xFF5
  1273                           postinc0	equ	0xFEE
  1274                           wreg	equ	0xFE8
  1275                           indf1	equ	0xFE7
  1276                           postdec1	equ	0xFE5
  1277                           fsr1h	equ	0xFE2
  1278                           fsr1l	equ	0xFE1
  1279                           indf2	equ	0xFDF
  1280                           fsr2h	equ	0xFDA
  1281                           fsr2l	equ	0xFD9
  1282                           status	equ	0xFD8
  1283                           
  1284 ;; *************** function _soft_delay *****************
  1285 ;; Defined at:
  1286 ;;		line 317 in file "arkeon.c"
  1287 ;; Parameters:    Size  Location     Type
  1288 ;;  tt              2   18[BANK0 ] short 
  1289 ;; Auto vars:     Size  Location     Type
  1290 ;;		None
  1291 ;; Return value:  Size  Location     Type
  1292 ;;		None               void
  1293 ;; Registers used:
  1294 ;;		wreg, status,2, status,0, prodl
  1295 ;; Tracked objects:
  1296 ;;		On entry : 0/0
  1297 ;;		On exit  : 0/0
  1298 ;;		Unchanged: 0/0
  1299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1300 ;;      Params:         0       2       0       0       0       0       0
  1301 ;;      Locals:         0       0       0       0       0       0       0
  1302 ;;      Temps:          0       1       0       0       0       0       0
  1303 ;;      Totals:         0       3       0       0       0       0       0
  1304 ;;Total ram usage:        3 bytes
  1305 ;; Hardware stack levels used:    1
  1306 ;; Hardware stack levels required when called:    5
  1307 ;; This function calls:
  1308 ;;		Nothing
  1309 ;; This function is called by:
  1310 ;;		_send_sensor_cmd
  1311 ;;		_intialize
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315                           
  1316                           	psect	text7
  1317  000C64                     __ptext7:
  1318                           	opt stack 0
  1319  000C64                     _soft_delay:
  1320                           	opt stack 25
  1321                           
  1322                           ;arkeon.c: 319: while ( tt > 0 ) {
  1323                           
  1324                           ;incstack = 0
  1325  000C64  D00F               	goto	l1962
  1326  000C66                     l1958:
  1327                           
  1328                           ;arkeon.c: 320: _delay((unsigned long)((25)*(16000000/4000.0)));
  1329  000C66  0E82               	movlw	130
  1330  000C68  0100               	movlb	0	; () banked
  1331  000C6A  6FB0               	movwf	??_soft_delay& (0+255),b
  1332  000C6C  0EDE               	movlw	222
  1333  000C6E                     u1447:
  1334  000C6E  2EE8               	decfsz	wreg,f,c
  1335  000C70  D7FE               	goto	u1447
  1336  000C72  2FB0               	decfsz	??_soft_delay& (0+255),f,b
  1337  000C74  D7FC               	goto	u1447
  1338                           
  1339                           ;arkeon.c: 321: tt -= 25;
  1340  000C76  0100               	movlb	0	; () banked
  1341  000C78  0EE7               	movlw	231
  1342  000C7A  0100               	movlb	0	; () banked
  1343  000C7C  27AE               	addwf	soft_delay@tt& (0+255),f,b
  1344  000C7E  0EFF               	movlw	255
  1345  000C80  0100               	movlb	0	; () banked
  1346  000C82  23AF               	addwfc	(soft_delay@tt+1)& (0+255),f,b
  1347  000C84                     l1962:
  1348  000C84  0100               	movlb	0	; () banked
  1349  000C86  51AF               	movf	(soft_delay@tt+1)& (0+255),w,b
  1350  000C88  0A80               	xorlw	128
  1351  000C8A  6EF3               	movwf	prodl,c
  1352  000C8C  0E80               	movlw	128
  1353  000C8E  5CF3               	subwf	prodl,w,c
  1354  000C90  0E01               	movlw	1
  1355  000C92  B4D8               	btfsc	status,2,c
  1356  000C94  5DAE               	subwf	soft_delay@tt& (0+255),w,b
  1357  000C96  A0D8               	btfss	status,0,c
  1358                           
  1359                           ; BSR set to: 0
  1360                           
  1361                           ; BSR set to: 0
  1362  000C98  0012               	return	
  1363  000C9A  D7E5               	goto	l1958
  1364  000C9C                     __end_of_soft_delay:
  1365                           	opt stack 0
  1366                           tblptru	equ	0xFF8
  1367                           tblptrh	equ	0xFF7
  1368                           tblptrl	equ	0xFF6
  1369                           tablat	equ	0xFF5
  1370                           prodl	equ	0xFF3
  1371                           postinc0	equ	0xFEE
  1372                           wreg	equ	0xFE8
  1373                           indf1	equ	0xFE7
  1374                           postdec1	equ	0xFE5
  1375                           fsr1h	equ	0xFE2
  1376                           fsr1l	equ	0xFE1
  1377                           indf2	equ	0xFDF
  1378                           fsr2h	equ	0xFDA
  1379                           fsr2l	equ	0xFD9
  1380                           status	equ	0xFD8
  1381                           
  1382 ;; *************** function _interrupt_init *****************
  1383 ;; Defined at:
  1384 ;;		line 304 in file "arkeon.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;		None
  1389 ;; Return value:  Size  Location     Type
  1390 ;;		None               void
  1391 ;; Registers used:
  1392 ;;		None
  1393 ;; Tracked objects:
  1394 ;;		On entry : 0/0
  1395 ;;		On exit  : 0/0
  1396 ;;		Unchanged: 0/0
  1397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1398 ;;      Params:         0       0       0       0       0       0       0
  1399 ;;      Locals:         0       0       0       0       0       0       0
  1400 ;;      Temps:          0       0       0       0       0       0       0
  1401 ;;      Totals:         0       0       0       0       0       0       0
  1402 ;;Total ram usage:        0 bytes
  1403 ;; Hardware stack levels used:    1
  1404 ;; Hardware stack levels required when called:    5
  1405 ;; This function calls:
  1406 ;;		Nothing
  1407 ;; This function is called by:
  1408 ;;		_intialize
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           	psect	text8
  1413  000DB4                     __ptext8:
  1414                           	opt stack 0
  1415  000DB4                     _interrupt_init:
  1416                           	opt stack 24
  1417                           
  1418                           ;arkeon.c: 307: RCONbits.IPEN = 1;
  1419                           
  1420                           ; BSR set to: 0
  1421                           ;incstack = 0
  1422  000DB4  8ED0               	bsf	4048,7,c	;volatile
  1423                           
  1424                           ;arkeon.c: 308: INTCONbits.GIEH = 1;
  1425  000DB6  8EF2               	bsf	intcon,7,c	;volatile
  1426                           
  1427                           ;arkeon.c: 309: INTCONbits.GIEL = 1;
  1428  000DB8  8CF2               	bsf	intcon,6,c	;volatile
  1429  000DBA  0012               	return	
  1430  000DBC                     __end_of_interrupt_init:
  1431                           	opt stack 0
  1432                           tblptru	equ	0xFF8
  1433                           tblptrh	equ	0xFF7
  1434                           tblptrl	equ	0xFF6
  1435                           tablat	equ	0xFF5
  1436                           prodl	equ	0xFF3
  1437                           intcon	equ	0xFF2
  1438                           postinc0	equ	0xFEE
  1439                           wreg	equ	0xFE8
  1440                           indf1	equ	0xFE7
  1441                           postdec1	equ	0xFE5
  1442                           fsr1h	equ	0xFE2
  1443                           fsr1l	equ	0xFE1
  1444                           indf2	equ	0xFDF
  1445                           fsr2h	equ	0xFDA
  1446                           fsr2l	equ	0xFD9
  1447                           status	equ	0xFD8
  1448                           
  1449 ;; *************** function _USART2_init *****************
  1450 ;; Defined at:
  1451 ;;		line 15 in file "putgetc.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;		None
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;		None
  1456 ;; Return value:  Size  Location     Type
  1457 ;;		None               void
  1458 ;; Registers used:
  1459 ;;		wreg, status,2
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1465 ;;      Params:         0       0       0       0       0       0       0
  1466 ;;      Locals:         0       0       0       0       0       0       0
  1467 ;;      Temps:          0       0       0       0       0       0       0
  1468 ;;      Totals:         0       0       0       0       0       0       0
  1469 ;;Total ram usage:        0 bytes
  1470 ;; Hardware stack levels used:    1
  1471 ;; Hardware stack levels required when called:    5
  1472 ;; This function calls:
  1473 ;;		Nothing
  1474 ;; This function is called by:
  1475 ;;		_intialize
  1476 ;; This function uses a non-reentrant model
  1477 ;;
  1478                           
  1479                           	psect	text9
  1480  000CE8                     __ptext9:
  1481                           	opt stack 0
  1482  000CE8                     _USART2_init:
  1483                           	opt stack 24
  1484                           
  1485                           ;putgetc.c: 17: TXSTA2bits.TXEN = 0;
  1486                           
  1487                           ;incstack = 0
  1488  000CE8  9A72               	bcf	3954,5,c	;volatile
  1489                           
  1490                           ;putgetc.c: 18: TXSTA2bits.TXEN = 1;
  1491  000CEA  8A72               	bsf	3954,5,c	;volatile
  1492                           
  1493                           ;putgetc.c: 19: TXSTA2bits.BRGH = 1;
  1494  000CEC  8472               	bsf	3954,2,c	;volatile
  1495                           
  1496                           ;putgetc.c: 20: TXSTA2bits.TX9 = 0;
  1497  000CEE  9C72               	bcf	3954,6,c	;volatile
  1498                           
  1499                           ;putgetc.c: 21: TXSTA2bits.SYNC = 0;
  1500  000CF0  9872               	bcf	3954,4,c	;volatile
  1501                           
  1502                           ;putgetc.c: 23: RCSTA2bits.CREN = 0;
  1503  000CF2  9871               	bcf	3953,4,c	;volatile
  1504                           
  1505                           ;putgetc.c: 24: RCSTA2bits.CREN = 1;
  1506  000CF4  8871               	bsf	3953,4,c	;volatile
  1507                           
  1508                           ;putgetc.c: 25: RCSTA2bits.RX9 = 0;
  1509  000CF6  9C71               	bcf	3953,6,c	;volatile
  1510                           
  1511                           ;putgetc.c: 27: TRISBbits.TRISB7 = 1;
  1512  000CF8  8E93               	bsf	3987,7,c	;volatile
  1513                           
  1514                           ;putgetc.c: 28: TRISBbits.TRISB6 = 1;
  1515  000CFA  8C93               	bsf	3987,6,c	;volatile
  1516                           
  1517                           ;putgetc.c: 30: SPBRG2 = 34;
  1518  000CFC  0E22               	movlw	34
  1519  000CFE  6E75               	movwf	3957,c	;volatile
  1520                           
  1521                           ;putgetc.c: 31: SPBRGH2 = 0;
  1522  000D00  0E00               	movlw	0
  1523  000D02  6E76               	movwf	3958,c	;volatile
  1524                           
  1525                           ;putgetc.c: 32: BAUDCON2bits.BRG16 = 0;
  1526  000D04  9670               	bcf	3952,3,c	;volatile
  1527                           
  1528                           ;putgetc.c: 34: PIE3bits.RC2IE = 0;
  1529  000D06  9AA3               	bcf	4003,5,c	;volatile
  1530                           
  1531                           ;putgetc.c: 37: RCSTA2bits.SPEN = 1;
  1532  000D08  8E71               	bsf	3953,7,c	;volatile
  1533  000D0A  0012               	return	
  1534  000D0C                     __end_of_USART2_init:
  1535                           	opt stack 0
  1536                           tblptru	equ	0xFF8
  1537                           tblptrh	equ	0xFF7
  1538                           tblptrl	equ	0xFF6
  1539                           tablat	equ	0xFF5
  1540                           prodl	equ	0xFF3
  1541                           intcon	equ	0xFF2
  1542                           postinc0	equ	0xFEE
  1543                           wreg	equ	0xFE8
  1544                           indf1	equ	0xFE7
  1545                           postdec1	equ	0xFE5
  1546                           fsr1h	equ	0xFE2
  1547                           fsr1l	equ	0xFE1
  1548                           indf2	equ	0xFDF
  1549                           fsr2h	equ	0xFDA
  1550                           fsr2l	equ	0xFD9
  1551                           status	equ	0xFD8
  1552                           
  1553 ;; *************** function _USART1_init *****************
  1554 ;; Defined at:
  1555 ;;		line 40 in file "putgetc.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;		None
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;		None
  1560 ;; Return value:  Size  Location     Type
  1561 ;;		None               void
  1562 ;; Registers used:
  1563 ;;		wreg, status,2
  1564 ;; Tracked objects:
  1565 ;;		On entry : 0/0
  1566 ;;		On exit  : 0/0
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1569 ;;      Params:         0       0       0       0       0       0       0
  1570 ;;      Locals:         0       0       0       0       0       0       0
  1571 ;;      Temps:          0       0       0       0       0       0       0
  1572 ;;      Totals:         0       0       0       0       0       0       0
  1573 ;;Total ram usage:        0 bytes
  1574 ;; Hardware stack levels used:    1
  1575 ;; Hardware stack levels required when called:    5
  1576 ;; This function calls:
  1577 ;;		Nothing
  1578 ;; This function is called by:
  1579 ;;		_intialize
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text10
  1584  000D0C                     __ptext10:
  1585                           	opt stack 0
  1586  000D0C                     _USART1_init:
  1587                           	opt stack 24
  1588                           
  1589                           ;putgetc.c: 42: TXSTA1bits.TXEN = 0;
  1590                           
  1591                           ;incstack = 0
  1592  000D0C  9AAC               	bcf	4012,5,c	;volatile
  1593                           
  1594                           ;putgetc.c: 43: TXSTA1bits.TXEN = 1;
  1595  000D0E  8AAC               	bsf	4012,5,c	;volatile
  1596                           
  1597                           ;putgetc.c: 44: TXSTA1bits.BRGH = 1;
  1598  000D10  84AC               	bsf	4012,2,c	;volatile
  1599                           
  1600                           ;putgetc.c: 45: TXSTA1bits.TX9 = 0;
  1601  000D12  9CAC               	bcf	4012,6,c	;volatile
  1602                           
  1603                           ;putgetc.c: 46: TXSTA1bits.SYNC = 0;
  1604  000D14  98AC               	bcf	4012,4,c	;volatile
  1605                           
  1606                           ;putgetc.c: 48: RCSTA1bits.CREN = 0;
  1607  000D16  98AB               	bcf	4011,4,c	;volatile
  1608                           
  1609                           ;putgetc.c: 49: RCSTA1bits.CREN = 1;
  1610  000D18  88AB               	bsf	4011,4,c	;volatile
  1611                           
  1612                           ;putgetc.c: 50: RCSTA1bits.RX9 = 0;
  1613  000D1A  9CAB               	bcf	4011,6,c	;volatile
  1614                           
  1615                           ;putgetc.c: 52: TRISCbits.TRISC6 = 1;
  1616  000D1C  8C94               	bsf	3988,6,c	;volatile
  1617                           
  1618                           ;putgetc.c: 53: TRISCbits.TRISC7 = 1;
  1619  000D1E  8E94               	bsf	3988,7,c	;volatile
  1620                           
  1621                           ;putgetc.c: 55: SPBRG1 = 103;
  1622  000D20  0E67               	movlw	103
  1623  000D22  6EAF               	movwf	4015,c	;volatile
  1624                           
  1625                           ;putgetc.c: 56: SPBRGH1 = 0;
  1626  000D24  0E00               	movlw	0
  1627  000D26  6EB0               	movwf	4016,c	;volatile
  1628                           
  1629                           ;putgetc.c: 57: BAUDCON1bits.BRG16 = 0;
  1630  000D28  96B8               	bcf	4024,3,c	;volatile
  1631                           
  1632                           ;putgetc.c: 59: PIE1bits.RC1IE = 1;
  1633  000D2A  8A9D               	bsf	3997,5,c	;volatile
  1634                           
  1635                           ;putgetc.c: 62: RCSTA1bits.SPEN = 1;
  1636  000D2C  8EAB               	bsf	4011,7,c	;volatile
  1637  000D2E  0012               	return	
  1638  000D30                     __end_of_USART1_init:
  1639                           	opt stack 0
  1640                           tblptru	equ	0xFF8
  1641                           tblptrh	equ	0xFF7
  1642                           tblptrl	equ	0xFF6
  1643                           tablat	equ	0xFF5
  1644                           prodl	equ	0xFF3
  1645                           intcon	equ	0xFF2
  1646                           postinc0	equ	0xFEE
  1647                           wreg	equ	0xFE8
  1648                           indf1	equ	0xFE7
  1649                           postdec1	equ	0xFE5
  1650                           fsr1h	equ	0xFE2
  1651                           fsr1l	equ	0xFE1
  1652                           indf2	equ	0xFDF
  1653                           fsr2h	equ	0xFDA
  1654                           fsr2l	equ	0xFD9
  1655                           status	equ	0xFD8
  1656                           
  1657 ;; *************** function _UART2_Write_Line *****************
  1658 ;; Defined at:
  1659 ;;		line 83 in file "putgetc.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;  s               2   21[BANK0 ] PTR unsigned char 
  1662 ;;		 -> writeSensorString(80), 
  1663 ;; Auto vars:     Size  Location     Type
  1664 ;;		None
  1665 ;; Return value:  Size  Location     Type
  1666 ;;		None               void
  1667 ;; Registers used:
  1668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1669 ;; Tracked objects:
  1670 ;;		On entry : 0/0
  1671 ;;		On exit  : 0/0
  1672 ;;		Unchanged: 0/0
  1673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1674 ;;      Params:         0       2       0       0       0       0       0
  1675 ;;      Locals:         0       0       0       0       0       0       0
  1676 ;;      Temps:          0       0       0       0       0       0       0
  1677 ;;      Totals:         0       2       0       0       0       0       0
  1678 ;;Total ram usage:        2 bytes
  1679 ;; Hardware stack levels used:    1
  1680 ;; Hardware stack levels required when called:    7
  1681 ;; This function calls:
  1682 ;;		_UART2_Write_Char
  1683 ;;		_UART2_Write_String
  1684 ;; This function is called by:
  1685 ;;		_main
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text11
  1690  000D6E                     __ptext11:
  1691                           	opt stack 0
  1692  000D6E                     _UART2_Write_Line:
  1693                           	opt stack 23
  1694                           
  1695                           ;putgetc.c: 85: UART2_Write_String(s);
  1696                           
  1697                           ;incstack = 0
  1698  000D6E  0100               	movlb	0	; () banked
  1699  000D70  C0B2  F0B0         	movff	UART2_Write_Line@s+1,UART2_Write_String@s+1
  1700  000D74  0100               	movlb	0	; () banked
  1701  000D76  C0B1  F0AF         	movff	UART2_Write_Line@s,UART2_Write_String@s
  1702  000D7A  EC4E  F006         	call	_UART2_Write_String	;wreg free
  1703                           
  1704                           ;putgetc.c: 86: UART2_Write_Char('\r');
  1705  000D7E  0E0D               	movlw	13
  1706  000D80  ECD3  F006         	call	_UART2_Write_Char
  1707  000D84  0012               	return	
  1708  000D86                     __end_of_UART2_Write_Line:
  1709                           	opt stack 0
  1710                           tblptru	equ	0xFF8
  1711                           tblptrh	equ	0xFF7
  1712                           tblptrl	equ	0xFF6
  1713                           tablat	equ	0xFF5
  1714                           prodl	equ	0xFF3
  1715                           intcon	equ	0xFF2
  1716                           postinc0	equ	0xFEE
  1717                           wreg	equ	0xFE8
  1718                           indf1	equ	0xFE7
  1719                           postdec1	equ	0xFE5
  1720                           fsr1h	equ	0xFE2
  1721                           fsr1l	equ	0xFE1
  1722                           indf2	equ	0xFDF
  1723                           fsr2h	equ	0xFDA
  1724                           fsr2l	equ	0xFD9
  1725                           status	equ	0xFD8
  1726                           
  1727 ;; *************** function _UART2_Write_String *****************
  1728 ;; Defined at:
  1729 ;;		line 73 in file "putgetc.c"
  1730 ;; Parameters:    Size  Location     Type
  1731 ;;  s               2   19[BANK0 ] PTR unsigned char 
  1732 ;;		 -> writeSensorString(80), 
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;		None
  1735 ;; Return value:  Size  Location     Type
  1736 ;;		None               void
  1737 ;; Registers used:
  1738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1744 ;;      Params:         0       2       0       0       0       0       0
  1745 ;;      Locals:         0       0       0       0       0       0       0
  1746 ;;      Temps:          0       0       0       0       0       0       0
  1747 ;;      Totals:         0       2       0       0       0       0       0
  1748 ;;Total ram usage:        2 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    6
  1751 ;; This function calls:
  1752 ;;		_UART2_Write_Char
  1753 ;; This function is called by:
  1754 ;;		_UART2_Write_Line
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text12
  1759  000C9C                     __ptext12:
  1760                           	opt stack 0
  1761  000C9C                     _UART2_Write_String:
  1762                           	opt stack 23
  1763                           
  1764                           ;putgetc.c: 75: while (*s)
  1765                           
  1766                           ;incstack = 0
  1767  000C9C  D00A               	goto	l1936
  1768  000C9E                     l1932:
  1769                           
  1770                           ;putgetc.c: 76: {
  1771                           ;putgetc.c: 77: UART2_Write_Char(*s);
  1772  000C9E  C0AF  FFD9         	movff	UART2_Write_String@s,fsr2l
  1773  000CA2  C0B0  FFDA         	movff	UART2_Write_String@s+1,fsr2h
  1774  000CA6  50DF               	movf	indf2,w,c
  1775  000CA8  ECD3  F006         	call	_UART2_Write_Char
  1776                           
  1777                           ;putgetc.c: 78: s++;
  1778  000CAC  0100               	movlb	0	; () banked
  1779  000CAE  4BAF               	infsnz	UART2_Write_String@s& (0+255),f,b
  1780  000CB0  2BB0               	incf	(UART2_Write_String@s+1)& (0+255),f,b
  1781  000CB2                     l1936:
  1782  000CB2  C0AF  FFD9         	movff	UART2_Write_String@s,fsr2l
  1783  000CB6  C0B0  FFDA         	movff	UART2_Write_String@s+1,fsr2h
  1784  000CBA  50DF               	movf	indf2,w,c
  1785  000CBC  B4D8               	btfsc	status,2,c
  1786  000CBE  0012               	return	
  1787  000CC0  D7EE               	goto	l1932
  1788  000CC2                     __end_of_UART2_Write_String:
  1789                           	opt stack 0
  1790                           tblptru	equ	0xFF8
  1791                           tblptrh	equ	0xFF7
  1792                           tblptrl	equ	0xFF6
  1793                           tablat	equ	0xFF5
  1794                           prodl	equ	0xFF3
  1795                           intcon	equ	0xFF2
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           indf1	equ	0xFE7
  1799                           postdec1	equ	0xFE5
  1800                           fsr1h	equ	0xFE2
  1801                           fsr1l	equ	0xFE1
  1802                           indf2	equ	0xFDF
  1803                           fsr2h	equ	0xFDA
  1804                           fsr2l	equ	0xFD9
  1805                           status	equ	0xFD8
  1806                           
  1807 ;; *************** function _UART2_Write_Char *****************
  1808 ;; Defined at:
  1809 ;;		line 67 in file "putgetc.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;  data            1    wreg     unsigned char 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  data            1   18[BANK0 ] unsigned char 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;		None               void
  1816 ;; Registers used:
  1817 ;;		wreg
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1823 ;;      Params:         0       0       0       0       0       0       0
  1824 ;;      Locals:         0       1       0       0       0       0       0
  1825 ;;      Temps:          0       0       0       0       0       0       0
  1826 ;;      Totals:         0       1       0       0       0       0       0
  1827 ;;Total ram usage:        1 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    5
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_UART2_Write_String
  1834 ;;		_UART2_Write_Line
  1835 ;; This function uses a non-reentrant model
  1836 ;;
  1837                           
  1838                           	psect	text13
  1839  000DA6                     __ptext13:
  1840                           	opt stack 0
  1841  000DA6                     _UART2_Write_Char:
  1842                           	opt stack 23
  1843                           
  1844                           ;incstack = 0
  1845                           ;UART2_Write_Char@data stored from wreg
  1846  000DA6  0100               	movlb	0	; () banked
  1847  000DA8  6FAE               	movwf	UART2_Write_Char@data& (0+255),b
  1848  000DAA                     l45:
  1849  000DAA  A272               	btfss	3954,1,c	;volatile
  1850  000DAC  D7FE               	goto	l45
  1851                           
  1852                           ;putgetc.c: 70: TXREG2 = data;
  1853  000DAE  C0AE  FF73         	movff	UART2_Write_Char@data,3955	;volatile
  1854  000DB2  0012               	return	
  1855  000DB4                     __end_of_UART2_Write_Char:
  1856                           	opt stack 0
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           prodl	equ	0xFF3
  1862                           intcon	equ	0xFF2
  1863                           postinc0	equ	0xFEE
  1864                           wreg	equ	0xFE8
  1865                           indf1	equ	0xFE7
  1866                           postdec1	equ	0xFE5
  1867                           fsr1h	equ	0xFE2
  1868                           fsr1l	equ	0xFE1
  1869                           indf2	equ	0xFDF
  1870                           fsr2h	equ	0xFDA
  1871                           fsr2l	equ	0xFD9
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _bt_handler *****************
  1875 ;; Defined at:
  1876 ;;		line 61 in file "arkeon.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;		None               void
  1883 ;; Registers used:
  1884 ;;		wreg
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1890 ;;      Params:         0       0       0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0
  1892 ;;      Temps:          0      18       0       0       0       0       0
  1893 ;;      Totals:         0      18       0       0       0       0       0
  1894 ;;Total ram usage:       18 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    4
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		Interrupt level 1
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	intcodelo
  1905  000018                     __pintcodelo:
  1906                           	opt stack 0
  1907  000018                     _bt_handler:
  1908                           	opt stack 23
  1909                           
  1910                           ;incstack = 0
  1911  000018  CFD8 F09D          	movff	status,??_bt_handler+1
  1912  00001C  CFE8 F09E          	movff	wreg,??_bt_handler+2
  1913  000020  CFE0 F09F          	movff	bsr,??_bt_handler+3
  1914  000024  CFFA F0A0          	movff	pclath,??_bt_handler+4
  1915  000028  CFFB F0A1          	movff	pclatu,??_bt_handler+5
  1916  00002C  CFE9 F0A2          	movff	fsr0l,??_bt_handler+6
  1917  000030  CFEA F0A3          	movff	fsr0h,??_bt_handler+7
  1918  000034  CFE1 F0A4          	movff	fsr1l,??_bt_handler+8
  1919  000038  CFE2 F0A5          	movff	fsr1h,??_bt_handler+9
  1920  00003C  CFD9 F0A6          	movff	fsr2l,??_bt_handler+10
  1921  000040  CFDA F0A7          	movff	fsr2h,??_bt_handler+11
  1922  000044  CFF3 F0A8          	movff	prodl,??_bt_handler+12
  1923  000048  CFF4 F0A9          	movff	prodh,??_bt_handler+13
  1924  00004C  CFF6 F0AA          	movff	tblptrl,??_bt_handler+14
  1925  000050  CFF7 F0AB          	movff	tblptrh,??_bt_handler+15
  1926  000054  CFF8 F0AC          	movff	tblptru,??_bt_handler+16
  1927  000058  CFF5 F0AD          	movff	tablat,??_bt_handler+17
  1928                           
  1929                           ;arkeon.c: 63: if ( RCSTA2bits.OERR ) {
  1930  00005C  A271               	btfss	3953,1,c	;volatile
  1931  00005E  D00B               	goto	i1l1750
  1932                           
  1933                           ;arkeon.c: 64: RCSTA2bits.CREN = 0;
  1934  000060  9871               	bcf	3953,4,c	;volatile
  1935                           
  1936                           ;arkeon.c: 65: _delay((unsigned long)((5)*(16000000/4000.0)));
  1937  000062  0E1A               	movlw	26
  1938  000064  0100               	movlb	0	; () banked
  1939  000066  6F9C               	movwf	??_bt_handler& (0+255),b
  1940  000068  0EF8               	movlw	248
  1941  00006A                     i1u145_27:
  1942  00006A  2EE8               	decfsz	wreg,f,c
  1943  00006C  D7FE               	goto	i1u145_27
  1944  00006E  2F9C               	decfsz	??_bt_handler& (0+255),f,b
  1945  000070  D7FC               	goto	i1u145_27
  1946  000072  D000               	nop2	
  1947                           
  1948                           ;arkeon.c: 66: RCSTA2bits.CREN = 1;
  1949  000074  8871               	bsf	3953,4,c	;volatile
  1950  000076                     i1l1750:
  1951                           
  1952                           ;arkeon.c: 67: }
  1953                           ;arkeon.c: 69: if ( PIR3bits.RC2IF ) {
  1954  000076  AAA4               	btfss	4004,5,c	;volatile
  1955  000078  D003               	goto	i1l217
  1956                           
  1957                           ;arkeon.c: 72: bt_event=1;
  1958  00007A  0100               	movlb	(_bt_event/(0+8)) shr (0+8)
  1959  00007C  805B               	bsf	_bt_event/(0+8),_bt_event& (0+7),c	;volatile
  1960                           
  1961                           ;arkeon.c: 73: PIR3bits.RC2IF = 0;
  1962  00007E  9AA4               	bcf	4004,5,c	;volatile
  1963  000080                     i1l217:
  1964  000080  C0AD  FFF5         	movff	??_bt_handler+17,tablat
  1965  000084  C0AC  FFF8         	movff	??_bt_handler+16,tblptru
  1966  000088  C0AB  FFF7         	movff	??_bt_handler+15,tblptrh
  1967  00008C  C0AA  FFF6         	movff	??_bt_handler+14,tblptrl
  1968  000090  C0A9  FFF4         	movff	??_bt_handler+13,prodh
  1969  000094  C0A8  FFF3         	movff	??_bt_handler+12,prodl
  1970  000098  C0A7  FFDA         	movff	??_bt_handler+11,fsr2h
  1971  00009C  C0A6  FFD9         	movff	??_bt_handler+10,fsr2l
  1972  0000A0  C0A5  FFE2         	movff	??_bt_handler+9,fsr1h
  1973  0000A4  C0A4  FFE1         	movff	??_bt_handler+8,fsr1l
  1974  0000A8  C0A3  FFEA         	movff	??_bt_handler+7,fsr0h
  1975  0000AC  C0A2  FFE9         	movff	??_bt_handler+6,fsr0l
  1976  0000B0  C0A1  FFFB         	movff	??_bt_handler+5,pclatu
  1977  0000B4  C0A0  FFFA         	movff	??_bt_handler+4,pclath
  1978  0000B8  C09F  FFE0         	movff	??_bt_handler+3,bsr
  1979  0000BC  C09E  FFE8         	movff	??_bt_handler+2,wreg
  1980  0000C0  C09D  FFD8         	movff	??_bt_handler+1,status
  1981  0000C4  0010               	retfie	
  1982  0000C6                     __end_of_bt_handler:
  1983                           	opt stack 0
  1984                           pclatu	equ	0xFFB
  1985                           pclath	equ	0xFFA
  1986                           tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           prodh	equ	0xFF4
  1991                           prodl	equ	0xFF3
  1992                           intcon	equ	0xFF2
  1993                           postinc0	equ	0xFEE
  1994                           fsr0h	equ	0xFEA
  1995                           fsr0l	equ	0xFE9
  1996                           wreg	equ	0xFE8
  1997                           indf1	equ	0xFE7
  1998                           postdec1	equ	0xFE5
  1999                           fsr1h	equ	0xFE2
  2000                           fsr1l	equ	0xFE1
  2001                           bsr	equ	0xFE0
  2002                           indf2	equ	0xFDF
  2003                           fsr2h	equ	0xFDA
  2004                           fsr2l	equ	0xFD9
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _mux_handler *****************
  2008 ;; Defined at:
  2009 ;;		line 212 in file "arkeon.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;  i               2   43[COMRAM] int 
  2014 ;;  data            2   41[COMRAM] PTR unsigned char 
  2015 ;;		 -> mux_input(20), 
  2016 ;;  c               1   45[COMRAM] unsigned char 
  2017 ;; Return value:  Size  Location     Type
  2018 ;;		None               void
  2019 ;; Registers used:
  2020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2026 ;;      Params:         0       0       0       0       0       0       0
  2027 ;;      Locals:         5       0       0       0       0       0       0
  2028 ;;      Temps:         18       0       0       0       0       0       0
  2029 ;;      Totals:        23       0       0       0       0       0       0
  2030 ;;Total ram usage:       23 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    3
  2033 ;; This function calls:
  2034 ;;		_UART1_Read
  2035 ;;		_add_sensors_data
  2036 ;;		_isdigit
  2037 ;; This function is called by:
  2038 ;;		Interrupt level 2
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	intcode
  2043  000008                     __pintcode:
  2044                           	opt stack 0
  2045  000008                     _mux_handler:
  2046                           	opt stack 23
  2047                           
  2048                           ;incstack = 0
  2049  000008  CFFA F01C          	movff	pclath,??_mux_handler+4
  2050  00000C  CFFB F01D          	movff	pclatu,??_mux_handler+5
  2051  000010  CFE9 F01E          	movff	fsr0l,??_mux_handler+6
  2052  000014  EF19  F004         	goto	int_func
  2053                           pclatu	equ	0xFFB
  2054                           pclath	equ	0xFFA
  2055                           tblptru	equ	0xFF8
  2056                           tblptrh	equ	0xFF7
  2057                           tblptrl	equ	0xFF6
  2058                           tablat	equ	0xFF5
  2059                           prodh	equ	0xFF4
  2060                           prodl	equ	0xFF3
  2061                           intcon	equ	0xFF2
  2062                           postinc0	equ	0xFEE
  2063                           fsr0h	equ	0xFEA
  2064                           fsr0l	equ	0xFE9
  2065                           wreg	equ	0xFE8
  2066                           indf1	equ	0xFE7
  2067                           postdec1	equ	0xFE5
  2068                           fsr1h	equ	0xFE2
  2069                           fsr1l	equ	0xFE1
  2070                           bsr	equ	0xFE0
  2071                           indf2	equ	0xFDF
  2072                           fsr2h	equ	0xFDA
  2073                           fsr2l	equ	0xFD9
  2074                           status	equ	0xFD8
  2075                           
  2076                           	psect	intcode_body
  2077  000832                     __pintcode_body:
  2078                           	opt stack 23
  2079  000832                     int_func:
  2080                           	opt stack 23
  2081  000832  CFEA F01F          	movff	fsr0h,??_mux_handler+7
  2082  000836  CFE1 F020          	movff	fsr1l,??_mux_handler+8
  2083  00083A  CFE2 F021          	movff	fsr1h,??_mux_handler+9
  2084  00083E  CFD9 F022          	movff	fsr2l,??_mux_handler+10
  2085  000842  CFDA F023          	movff	fsr2h,??_mux_handler+11
  2086  000846  CFF3 F024          	movff	prodl,??_mux_handler+12
  2087  00084A  CFF4 F025          	movff	prodh,??_mux_handler+13
  2088  00084E  CFF6 F026          	movff	tblptrl,??_mux_handler+14
  2089  000852  CFF7 F027          	movff	tblptrh,??_mux_handler+15
  2090  000856  CFF8 F028          	movff	tblptru,??_mux_handler+16
  2091  00085A  CFF5 F029          	movff	tablat,??_mux_handler+17
  2092                           
  2093                           ;arkeon.c: 214: if( ( PIE1bits.RC1IE == 1 ) && ( PIR1bits.RC1IF == 1 ) ) {
  2094  00085E  BA9D               	btfsc	3997,5,c	;volatile
  2095  000860  AA9E               	btfss	3998,5,c	;volatile
  2096  000862  D0A8               	goto	i2l281
  2097                           
  2098                           ;arkeon.c: 216: PIR1bits.RC1IF = 0;
  2099  000864  9A9E               	bcf	3998,5,c	;volatile
  2100                           
  2101                           ;arkeon.c: 218: if ( RCSTA1bits.OERR ) {
  2102  000866  A2AB               	btfss	4011,1,c	;volatile
  2103  000868  D00B               	goto	i2l280
  2104                           
  2105                           ;arkeon.c: 219: RCSTA1bits.CREN = 0;
  2106  00086A  98AB               	bcf	4011,4,c	;volatile
  2107                           
  2108                           ;arkeon.c: 220: _delay((unsigned long)((5)*(16000000/4000.0)));
  2109  00086C  0E1A               	movlw	26
  2110  00086E  6E18               	movwf	??_mux_handler& (0+255),c
  2111  000870  0EF8               	movlw	248
  2112  000872                     i2u146_47:
  2113  000872  2EE8               	decfsz	wreg,f,c
  2114  000874  D7FE               	goto	i2u146_47
  2115  000876  2E18               	decfsz	??_mux_handler& (0+255),f,c
  2116  000878  D7FC               	goto	i2u146_47
  2117  00087A  D000               	nop2	
  2118                           
  2119                           ;arkeon.c: 221: RCSTA1bits.CREN = 1;
  2120  00087C  88AB               	bsf	4011,4,c	;volatile
  2121  00087E  D006               	goto	L1
  2122  000880                     i2l280:
  2123                           
  2124                           ;arkeon.c: 224: }
  2125                           ;arkeon.c: 226: if ( RCSTA1bits.FERR ) {
  2126  000880  A4AB               	btfss	4011,2,c	;volatile
  2127  000882  D007               	goto	i2l1798
  2128                           
  2129                           ;arkeon.c: 227: RCREG1; RCREG1; RCREG1; RCREG1;
  2130  000884  50AE               	movf	4014,w,c	;volatile
  2131  000886  50AE               	movf	4014,w,c	;volatile
  2132  000888  50AE               	movf	4014,w,c	;volatile
  2133  00088A  50AE               	movf	4014,w,c	;volatile
  2134  00088C                     L1:
  2135                           
  2136                           ;arkeon.c: 228: mux_error = 1;
  2137  00088C  0100               	movlb	(_mux_error/(0+8)) shr (0+8)
  2138  00088E  845B               	bsf	_mux_error/(0+8),_mux_error& (0+7),c	;volatile
  2139  000890  D091               	goto	i2l281
  2140  000892                     i2l1798:
  2141                           
  2142                           ;arkeon.c: 230: }
  2143                           ;arkeon.c: 233: char c = UART1_Read();
  2144  000892  ECDE  F006         	call	_UART1_Read	;wreg free
  2145  000896  6E2E               	movwf	mux_handler@c,c
  2146                           
  2147                           ;arkeon.c: 235: if ( !checking_for_sensors ) {
  2148  000898  0100               	movlb	(_checking_for_sensors/(0+8)) shr (0+8)
  2149  00089A  B25B               	btfsc	_checking_for_sensors/(0+8),_checking_for_sensors& (0+7),c	;volatile
  2150  00089C  D089               	goto	i2l283
  2151                           
  2152                           ;arkeon.c: 237: if ( !mux_buffer_overflow ) {
  2153  00089E  6634               	tstfsz	_mux_buffer_overflow,c	;volatile
  2154  0008A0  D089               	goto	i2l281
  2155                           
  2156                           ;arkeon.c: 239: if ( isdigit(c) || ( c == ',' ) || ( c == '.' ) || ( c == '\r' ) ) {
  2157  0008A2  502E               	movf	mux_handler@c,w,c
  2158  0008A4  EC98  F006         	call	_isdigit
  2159  0008A8  B0D8               	btfsc	status,0,c
  2160  0008AA  D00C               	goto	i2l1812
  2161  0008AC  502E               	movf	mux_handler@c,w,c
  2162  0008AE  0A2C               	xorlw	44
  2163  0008B0  B4D8               	btfsc	status,2,c
  2164  0008B2  D008               	goto	i2l1812
  2165  0008B4  502E               	movf	mux_handler@c,w,c
  2166  0008B6  0A2E               	xorlw	46
  2167  0008B8  B4D8               	btfsc	status,2,c
  2168  0008BA  D004               	goto	i2l1812
  2169  0008BC  502E               	movf	mux_handler@c,w,c
  2170  0008BE  0A0D               	xorlw	13
  2171  0008C0  A4D8               	btfss	status,2,c
  2172  0008C2  D078               	goto	i2l281
  2173  0008C4                     i2l1812:
  2174                           
  2175                           ;arkeon.c: 241: mux_input_index++;
  2176  0008C4  2A35               	incf	_mux_input_index,f,c	;volatile
  2177                           
  2178                           ;arkeon.c: 243: if ( ( c == '\r' ) || ( mux_input_index == 20 ) ) {
  2179  0008C6  502E               	movf	mux_handler@c,w,c
  2180  0008C8  0A0D               	xorlw	13
  2181  0008CA  B4D8               	btfsc	status,2,c
  2182  0008CC  D004               	goto	i2l1818
  2183  0008CE  5035               	movf	_mux_input_index,w,c	;volatile
  2184  0008D0  0A14               	xorlw	20
  2185  0008D2  A4D8               	btfss	status,2,c
  2186  0008D4  D059               	goto	i2l1846
  2187  0008D6                     i2l1818:
  2188                           
  2189                           ;arkeon.c: 247: mux_input[ mux_input_index - 1 ] = 0;
  2190  0008D6  0EFF               	movlw	255
  2191  0008D8  6E18               	movwf	??_mux_handler& (0+255),c
  2192  0008DA  0EFF               	movlw	255
  2193  0008DC  6E19               	movwf	(??_mux_handler+1)& (0+255),c
  2194  0008DE  5035               	movf	_mux_input_index,w,c	;volatile
  2195  0008E0  6E1A               	movwf	(??_mux_handler+2)& (0+255),c
  2196  0008E2  6A1B               	clrf	(??_mux_handler+3)& (0+255),c
  2197  0008E4  5018               	movf	??_mux_handler,w,c
  2198  0008E6  261A               	addwf	??_mux_handler+2,f,c
  2199  0008E8  5019               	movf	??_mux_handler+1,w,c
  2200  0008EA  221B               	addwfc	??_mux_handler+3,f,c
  2201  0008EC  0E36               	movlw	low _mux_input
  2202  0008EE  241A               	addwf	??_mux_handler+2,w,c
  2203  0008F0  6ED9               	movwf	fsr2l,c
  2204  0008F2  0E00               	movlw	high _mux_input
  2205  0008F4  201B               	addwfc	??_mux_handler+3,w,c
  2206  0008F6  6EDA               	movwf	fsr2h,c
  2207  0008F8  0E00               	movlw	0
  2208  0008FA  6EDF               	movwf	indf2,c
  2209                           
  2210                           ;arkeon.c: 248: mux_input_index = 0;
  2211  0008FC  0E00               	movlw	0
  2212  0008FE  6E35               	movwf	_mux_input_index,c	;volatile
  2213                           
  2214                           ;arkeon.c: 250: char *data = (char *)mux_input;
  2215  000900  0E00               	movlw	high _mux_input
  2216  000902  6E2B               	movwf	mux_handler@data+1,c
  2217  000904  0E36               	movlw	low _mux_input
  2218  000906  6E2A               	movwf	mux_handler@data,c
  2219                           
  2220                           ;arkeon.c: 252: if ( sensorIndex == 0 ) {
  2221  000908  5033               	movf	_sensorIndex+1,w,c
  2222  00090A  1032               	iorwf	_sensorIndex,w,c
  2223  00090C  A4D8               	btfss	status,2,c
  2224  00090E  D011               	goto	i2l1828
  2225                           
  2226                           ;arkeon.c: 253: add_sensors_data(data,sensorArray0,20);
  2227  000910  C02B  F006         	movff	mux_handler@data+1,add_sensors_data@data+1
  2228  000914  C02A  F005         	movff	mux_handler@data,add_sensors_data@data
  2229  000918  0100               	movlb	0	; () banked
  2230  00091A  0E00               	movlw	high _sensorArray0
  2231  00091C  6E08               	movwf	add_sensors_data@formatted_sensor_data+1,c
  2232  00091E  0100               	movlb	0	; () banked
  2233  000920  0E74               	movlw	low _sensorArray0
  2234  000922  6E07               	movwf	add_sensors_data@formatted_sensor_data,c
  2235  000924  0E00               	movlw	0
  2236  000926  6E0A               	movwf	add_sensors_data@max_data_size+1,c
  2237  000928  0E14               	movlw	20
  2238  00092A  6E09               	movwf	add_sensors_data@max_data_size,c
  2239  00092C  EC0A  F003         	call	_add_sensors_data	;wreg free
  2240                           
  2241                           ;arkeon.c: 254: } else if ( sensorIndex == 1 ) {
  2242  000930  D014               	goto	i2l1834
  2243  000932                     i2l1828:
  2244  000932  0432               	decf	_sensorIndex,w,c
  2245  000934  1033               	iorwf	_sensorIndex+1,w,c
  2246  000936  A4D8               	btfss	status,2,c
  2247  000938  D010               	goto	i2l1834
  2248                           
  2249                           ;arkeon.c: 255: add_sensors_data(data,sensorArray1,20);
  2250  00093A  C02B  F006         	movff	mux_handler@data+1,add_sensors_data@data+1
  2251  00093E  C02A  F005         	movff	mux_handler@data,add_sensors_data@data
  2252  000942  0100               	movlb	0	; () banked
  2253  000944  0E00               	movlw	high _sensorArray1
  2254  000946  6E08               	movwf	add_sensors_data@formatted_sensor_data+1,c
  2255  000948  0100               	movlb	0	; () banked
  2256  00094A  0E88               	movlw	low _sensorArray1
  2257  00094C  6E07               	movwf	add_sensors_data@formatted_sensor_data,c
  2258  00094E  0E00               	movlw	0
  2259  000950  6E0A               	movwf	add_sensors_data@max_data_size+1,c
  2260  000952  0E14               	movlw	20
  2261  000954  6E09               	movwf	add_sensors_data@max_data_size,c
  2262  000956  EC0A  F003         	call	_add_sensors_data	;wreg free
  2263  00095A                     i2l1834:
  2264                           
  2265                           ;arkeon.c: 258: }
  2266                           ;arkeon.c: 260: for ( int i = 0; i < 20; i++ ) mux_input[i] = 0;
  2267  00095A  0E00               	movlw	0
  2268  00095C  6E2D               	movwf	mux_handler@i+1,c
  2269  00095E  0E00               	movlw	0
  2270  000960  6E2C               	movwf	mux_handler@i,c
  2271  000962  502D               	movf	mux_handler@i+1,w,c
  2272  000964  0A80               	xorlw	128
  2273  000966  0F80               	addlw	-128
  2274  000968  0E14               	movlw	20
  2275  00096A  B4D8               	btfsc	status,2,c
  2276  00096C  5C2C               	subwf	mux_handler@i,w,c
  2277  00096E  B0D8               	btfsc	status,0,c
  2278  000970  D01F               	goto	i2l283
  2279  000972  0E36               	movlw	low _mux_input
  2280  000974  242C               	addwf	mux_handler@i,w,c
  2281  000976  6ED9               	movwf	fsr2l,c
  2282  000978  0E00               	movlw	high _mux_input
  2283  00097A  202D               	addwfc	mux_handler@i+1,w,c
  2284  00097C  6EDA               	movwf	fsr2h,c
  2285  00097E  0E00               	movlw	0
  2286  000980  6EDF               	movwf	indf2,c
  2287  000982  4A2C               	infsnz	mux_handler@i,f,c
  2288  000984  2A2D               	incf	mux_handler@i+1,f,c
  2289  000986  D7ED               	goto	L2
  2290  000988                     i2l1846:
  2291                           
  2292                           ;arkeon.c: 264: mux_input[mux_input_index-1] = c;
  2293  000988  0EFF               	movlw	255
  2294  00098A  6E18               	movwf	??_mux_handler& (0+255),c
  2295  00098C  0EFF               	movlw	255
  2296  00098E  6E19               	movwf	(??_mux_handler+1)& (0+255),c
  2297  000990  5035               	movf	_mux_input_index,w,c	;volatile
  2298  000992  6E1A               	movwf	(??_mux_handler+2)& (0+255),c
  2299  000994  6A1B               	clrf	(??_mux_handler+3)& (0+255),c
  2300  000996  5018               	movf	??_mux_handler,w,c
  2301  000998  261A               	addwf	??_mux_handler+2,f,c
  2302  00099A  5019               	movf	??_mux_handler+1,w,c
  2303  00099C  221B               	addwfc	??_mux_handler+3,f,c
  2304  00099E  0E36               	movlw	low _mux_input
  2305  0009A0  241A               	addwf	??_mux_handler+2,w,c
  2306  0009A2  6ED9               	movwf	fsr2l,c
  2307  0009A4  0E00               	movlw	high _mux_input
  2308  0009A6  201B               	addwfc	??_mux_handler+3,w,c
  2309  0009A8  6EDA               	movwf	fsr2h,c
  2310  0009AA  C02E  FFDF         	movff	mux_handler@c,indf2
  2311  0009AE  D002               	goto	i2l281
  2312  0009B0                     i2l283:
  2313                           
  2314                           ;arkeon.c: 272: mux_event=1;
  2315  0009B0  0100               	movlb	(_mux_event/(0+8)) shr (0+8)
  2316  0009B2  865B               	bsf	_mux_event/(0+8),_mux_event& (0+7),c	;volatile
  2317  0009B4                     i2l281:
  2318  0009B4  C029  FFF5         	movff	??_mux_handler+17,tablat
  2319  0009B8  C028  FFF8         	movff	??_mux_handler+16,tblptru
  2320  0009BC  C027  FFF7         	movff	??_mux_handler+15,tblptrh
  2321  0009C0  C026  FFF6         	movff	??_mux_handler+14,tblptrl
  2322  0009C4  C025  FFF4         	movff	??_mux_handler+13,prodh
  2323  0009C8  C024  FFF3         	movff	??_mux_handler+12,prodl
  2324  0009CC  C023  FFDA         	movff	??_mux_handler+11,fsr2h
  2325  0009D0  C022  FFD9         	movff	??_mux_handler+10,fsr2l
  2326  0009D4  C021  FFE2         	movff	??_mux_handler+9,fsr1h
  2327  0009D8  C020  FFE1         	movff	??_mux_handler+8,fsr1l
  2328  0009DC  C01F  FFEA         	movff	??_mux_handler+7,fsr0h
  2329  0009E0  C01E  FFE9         	movff	??_mux_handler+6,fsr0l
  2330  0009E4  C01D  FFFB         	movff	??_mux_handler+5,pclatu
  2331  0009E8  C01C  FFFA         	movff	??_mux_handler+4,pclath
  2332  0009EC  0011               	retfie		f
  2333  0009EE                     __end_of_mux_handler:
  2334                           	opt stack 0
  2335                           pclatu	equ	0xFFB
  2336                           pclath	equ	0xFFA
  2337                           tblptru	equ	0xFF8
  2338                           tblptrh	equ	0xFF7
  2339                           tblptrl	equ	0xFF6
  2340                           tablat	equ	0xFF5
  2341                           prodh	equ	0xFF4
  2342                           prodl	equ	0xFF3
  2343                           intcon	equ	0xFF2
  2344                           postinc0	equ	0xFEE
  2345                           fsr0h	equ	0xFEA
  2346                           fsr0l	equ	0xFE9
  2347                           wreg	equ	0xFE8
  2348                           indf1	equ	0xFE7
  2349                           postdec1	equ	0xFE5
  2350                           fsr1h	equ	0xFE2
  2351                           fsr1l	equ	0xFE1
  2352                           bsr	equ	0xFE0
  2353                           indf2	equ	0xFDF
  2354                           fsr2h	equ	0xFDA
  2355                           fsr2l	equ	0xFD9
  2356                           status	equ	0xFD8
  2357                           
  2358 ;; *************** function _isdigit *****************
  2359 ;; Defined at:
  2360 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/isdigit.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  c               1    wreg     unsigned char 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  c               1    2[COMRAM] unsigned char 
  2365 ;; Return value:  Size  Location     Type
  2366 ;;		None               void
  2367 ;; Registers used:
  2368 ;;		wreg, status,2, status,0
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2374 ;;      Params:         0       0       0       0       0       0       0
  2375 ;;      Locals:         2       0       0       0       0       0       0
  2376 ;;      Temps:          1       0       0       0       0       0       0
  2377 ;;      Totals:         3       0       0       0       0       0       0
  2378 ;;Total ram usage:        3 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; This function calls:
  2381 ;;		Nothing
  2382 ;; This function is called by:
  2383 ;;		_mux_handler
  2384 ;;		_known_data_pattern
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           	psect	text16
  2389  000D30                     __ptext16:
  2390                           	opt stack 0
  2391  000D30                     _isdigit:
  2392                           	opt stack 25
  2393                           
  2394                           ;incstack = 0
  2395                           ;isdigit@c stored from wreg
  2396  000D30  6E03               	movwf	isdigit@c,c
  2397  000D32  0E00               	movlw	0
  2398  000D34  6E02               	movwf	_isdigit$1777,c
  2399  000D36  0E3A               	movlw	58
  2400  000D38  5C03               	subwf	isdigit@c,w,c
  2401  000D3A  B0D8               	btfsc	status,0,c
  2402  000D3C  D005               	goto	i2l1650
  2403  000D3E  0E2F               	movlw	47
  2404  000D40  6403               	cpfsgt	isdigit@c,c
  2405  000D42  D002               	goto	i2l1650
  2406  000D44  0E01               	movlw	1
  2407  000D46  6E02               	movwf	_isdigit$1777,c
  2408  000D48                     i2l1650:
  2409  000D48  C002  F001         	movff	_isdigit$1777,??_isdigit
  2410  000D4C  3001               	rrcf	??_isdigit,w,c
  2411  000D4E  0012               	return	
  2412  000D50                     __end_of_isdigit:
  2413                           	opt stack 0
  2414                           pclatu	equ	0xFFB
  2415                           pclath	equ	0xFFA
  2416                           tblptru	equ	0xFF8
  2417                           tblptrh	equ	0xFF7
  2418                           tblptrl	equ	0xFF6
  2419                           tablat	equ	0xFF5
  2420                           prodh	equ	0xFF4
  2421                           prodl	equ	0xFF3
  2422                           intcon	equ	0xFF2
  2423                           postinc0	equ	0xFEE
  2424                           fsr0h	equ	0xFEA
  2425                           fsr0l	equ	0xFE9
  2426                           wreg	equ	0xFE8
  2427                           indf1	equ	0xFE7
  2428                           postdec1	equ	0xFE5
  2429                           fsr1h	equ	0xFE2
  2430                           fsr1l	equ	0xFE1
  2431                           bsr	equ	0xFE0
  2432                           indf2	equ	0xFDF
  2433                           fsr2h	equ	0xFDA
  2434                           fsr2l	equ	0xFD9
  2435                           status	equ	0xFD8
  2436                           
  2437 ;; *************** function _add_sensors_data *****************
  2438 ;; Defined at:
  2439 ;;		line 97 in file "arkeon.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;  data            2    4[COMRAM] PTR unsigned char 
  2442 ;;		 -> mux_input(20), 
  2443 ;;  formatted_se    2    6[COMRAM] PTR unsigned char 
  2444 ;;		 -> sensorArray1(20), sensorArray0(20), 
  2445 ;;  max_data_siz    2    8[COMRAM] int 
  2446 ;; Auto vars:     Size  Location     Type
  2447 ;;  j               2   14[COMRAM] short 
  2448 ;;  tmp             2   21[COMRAM] PTR unsigned char 
  2449 ;;		 -> mux_input(20), 
  2450 ;;  dst             2   19[COMRAM] PTR unsigned char 
  2451 ;;		 -> sensorArray1(20), sensorArray0(20), 
  2452 ;;  end             2   17[COMRAM] PTR unsigned char 
  2453 ;;		 -> sensorArray1(20), sensorArray0(20), 
  2454 ;;  count           1   16[COMRAM] unsigned char 
  2455 ;; Return value:  Size  Location     Type
  2456 ;;		None               void
  2457 ;; Registers used:
  2458 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2459 ;; Tracked objects:
  2460 ;;		On entry : 0/0
  2461 ;;		On exit  : 0/0
  2462 ;;		Unchanged: 0/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2464 ;;      Params:         6       0       0       0       0       0       0
  2465 ;;      Locals:         9       0       0       0       0       0       0
  2466 ;;      Temps:          4       0       0       0       0       0       0
  2467 ;;      Totals:        19       0       0       0       0       0       0
  2468 ;;Total ram usage:       19 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    2
  2471 ;; This function calls:
  2472 ;;		_convert_char_hex
  2473 ;; This function is called by:
  2474 ;;		_mux_handler
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	text17
  2479  000614                     __ptext17:
  2480                           	opt stack 0
  2481  000614                     _add_sensors_data:
  2482                           	opt stack 23
  2483                           
  2484                           ;arkeon.c: 99: for ( short j = 0; j < max_data_size; j++ ) formatted_sensor_data[j] = 0;
  2485                           
  2486                           ;incstack = 0
  2487  000614  0E00               	movlw	0
  2488  000616  6E10               	movwf	add_sensors_data@j+1,c
  2489  000618  0E00               	movlw	0
  2490  00061A  6E0F               	movwf	add_sensors_data@j,c
  2491  00061C  D00A               	goto	i2l1558
  2492  00061E                     i2l1554:
  2493  00061E  500F               	movf	add_sensors_data@j,w,c
  2494  000620  2407               	addwf	add_sensors_data@formatted_sensor_data,w,c
  2495  000622  6ED9               	movwf	fsr2l,c
  2496  000624  5010               	movf	add_sensors_data@j+1,w,c
  2497  000626  2008               	addwfc	add_sensors_data@formatted_sensor_data+1,w,c
  2498  000628  6EDA               	movwf	fsr2h,c
  2499  00062A  0E00               	movlw	0
  2500  00062C  6EDF               	movwf	indf2,c
  2501  00062E  4A0F               	infsnz	add_sensors_data@j,f,c
  2502  000630  2A10               	incf	add_sensors_data@j+1,f,c
  2503  000632                     i2l1558:
  2504  000632  5010               	movf	add_sensors_data@j+1,w,c
  2505  000634  0A80               	xorlw	128
  2506  000636  6E0B               	movwf	??_add_sensors_data& (0+255),c
  2507  000638  5009               	movf	add_sensors_data@max_data_size,w,c
  2508  00063A  5C0F               	subwf	add_sensors_data@j,w,c
  2509  00063C  500A               	movf	add_sensors_data@max_data_size+1,w,c
  2510  00063E  0A80               	xorlw	128
  2511  000640  580B               	subwfb	??_add_sensors_data& (0+255),w,c
  2512  000642  A0D8               	btfss	status,0,c
  2513  000644  D7EC               	goto	i2l1554
  2514                           
  2515                           ;arkeon.c: 102: char *tmp = data;
  2516  000646  C006  F017         	movff	add_sensors_data@data+1,add_sensors_data@tmp+1
  2517  00064A  C005  F016         	movff	add_sensors_data@data,add_sensors_data@tmp
  2518                           
  2519                           ;arkeon.c: 103: char *dst = &formatted_sensor_data[1];
  2520  00064E  0E01               	movlw	1
  2521  000650  2407               	addwf	add_sensors_data@formatted_sensor_data,w,c
  2522  000652  6E14               	movwf	add_sensors_data@dst,c
  2523  000654  0E00               	movlw	0
  2524  000656  2008               	addwfc	add_sensors_data@formatted_sensor_data+1,w,c
  2525  000658  6E15               	movwf	add_sensors_data@dst+1,c
  2526                           
  2527                           ;arkeon.c: 104: char *end = &formatted_sensor_data[max_data_size];
  2528  00065A  5009               	movf	add_sensors_data@max_data_size,w,c
  2529  00065C  2407               	addwf	add_sensors_data@formatted_sensor_data,w,c
  2530  00065E  6E12               	movwf	add_sensors_data@end,c
  2531  000660  500A               	movf	add_sensors_data@max_data_size+1,w,c
  2532  000662  2008               	addwfc	add_sensors_data@formatted_sensor_data+1,w,c
  2533  000664  6E13               	movwf	add_sensors_data@end+1,c
  2534                           
  2535                           ;arkeon.c: 106: char count = 0;
  2536  000666  0E00               	movlw	0
  2537  000668  6E11               	movwf	add_sensors_data@count,c
  2538                           
  2539                           ;arkeon.c: 109: if ( *tmp == '.' ) {
  2540  00066A  0E2E               	movlw	46
  2541  00066C  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2542  000670  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2543  000674  62DF               	cpfseq	indf2,c
  2544  000676  D026               	goto	i2l1586
  2545                           
  2546                           ;arkeon.c: 110: *dst++ = '0'; count = 1; tmp++;
  2547  000678  C014  FFD9         	movff	add_sensors_data@dst,fsr2l
  2548  00067C  C015  FFDA         	movff	add_sensors_data@dst+1,fsr2h
  2549  000680  0E30               	movlw	48
  2550  000682  6EDF               	movwf	indf2,c
  2551  000684  4A14               	infsnz	add_sensors_data@dst,f,c
  2552  000686  2A15               	incf	add_sensors_data@dst+1,f,c
  2553  000688  0E01               	movlw	1
  2554  00068A  6E11               	movwf	add_sensors_data@count,c
  2555  00068C  4A16               	infsnz	add_sensors_data@tmp,f,c
  2556  00068E  2A17               	incf	add_sensors_data@tmp+1,f,c
  2557  000690  D019               	goto	i2l1586
  2558  000692                     i2l1574:
  2559                           
  2560                           ;arkeon.c: 113: if ( *tmp == '.' ) { tmp++; break; }
  2561  000692  0E2E               	movlw	46
  2562  000694  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2563  000698  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2564  00069C  62DF               	cpfseq	indf2,c
  2565  00069E  D003               	goto	i2l1578
  2566  0006A0  4A16               	infsnz	add_sensors_data@tmp,f,c
  2567  0006A2  2A17               	incf	add_sensors_data@tmp+1,f,c
  2568  0006A4  D034               	goto	i2l1596
  2569  0006A6                     i2l1578:
  2570                           
  2571                           ;arkeon.c: 114: count++;
  2572  0006A6  2A11               	incf	add_sensors_data@count,f,c
  2573                           
  2574                           ;arkeon.c: 115: *dst++ = *tmp++;
  2575  0006A8  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2576  0006AC  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2577  0006B0  C014  FFE1         	movff	add_sensors_data@dst,fsr1l
  2578  0006B4  C015  FFE2         	movff	add_sensors_data@dst+1,fsr1h
  2579  0006B8  CFDF FFE7          	movff	indf2,indf1
  2580  0006BC  4A16               	infsnz	add_sensors_data@tmp,f,c
  2581  0006BE  2A17               	incf	add_sensors_data@tmp+1,f,c
  2582  0006C0  4A14               	infsnz	add_sensors_data@dst,f,c
  2583  0006C2  2A15               	incf	add_sensors_data@dst+1,f,c
  2584  0006C4                     i2l1586:
  2585  0006C4  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2586  0006C8  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2587  0006CC  50DF               	movf	indf2,w,c
  2588  0006CE  B4D8               	btfsc	status,2,c
  2589  0006D0  D01E               	goto	i2l1596
  2590  0006D2  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2591  0006D6  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2592  0006DA  50DF               	movf	indf2,w,c
  2593  0006DC  0A0D               	xorlw	13
  2594  0006DE  B4D8               	btfsc	status,2,c
  2595  0006E0  D016               	goto	i2l1596
  2596  0006E2  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2597  0006E6  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2598  0006EA  50DF               	movf	indf2,w,c
  2599  0006EC  0A0A               	xorlw	10
  2600  0006EE  B4D8               	btfsc	status,2,c
  2601  0006F0  D00E               	goto	i2l1596
  2602  0006F2  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2603  0006F6  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2604  0006FA  50DF               	movf	indf2,w,c
  2605  0006FC  0A2C               	xorlw	44
  2606  0006FE  B4D8               	btfsc	status,2,c
  2607  000700  D006               	goto	i2l1596
  2608  000702  5012               	movf	add_sensors_data@end,w,c
  2609  000704  5C14               	subwf	add_sensors_data@dst,w,c
  2610  000706  5013               	movf	add_sensors_data@end+1,w,c
  2611  000708  5815               	subwfb	add_sensors_data@dst+1,w,c
  2612  00070A  A0D8               	btfss	status,0,c
  2613  00070C  D7C2               	goto	i2l1574
  2614  00070E                     i2l1596:
  2615                           
  2616                           ;arkeon.c: 116: }
  2617                           ;arkeon.c: 120: if ( count > 0 ) {
  2618  00070E  5011               	movf	add_sensors_data@count,w,c
  2619  000710  B4D8               	btfsc	status,2,c
  2620  000712  D088               	goto	i2l1640
  2621                           
  2622                           ;arkeon.c: 122: if ( *tmp && ( *tmp != '\r' ) && ( *tmp != '\n' ) && ( dst < end ) ) {
  2623  000714  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2624  000718  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2625  00071C  50DF               	movf	indf2,w,c
  2626  00071E  B4D8               	btfsc	status,2,c
  2627  000720  D042               	goto	i2l1622
  2628  000722  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2629  000726  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2630  00072A  50DF               	movf	indf2,w,c
  2631  00072C  0A0D               	xorlw	13
  2632  00072E  B4D8               	btfsc	status,2,c
  2633  000730  D03A               	goto	i2l1622
  2634  000732  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2635  000736  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2636  00073A  50DF               	movf	indf2,w,c
  2637  00073C  0A0A               	xorlw	10
  2638  00073E  B4D8               	btfsc	status,2,c
  2639  000740  D032               	goto	i2l1622
  2640  000742  5012               	movf	add_sensors_data@end,w,c
  2641  000744  5C14               	subwf	add_sensors_data@dst,w,c
  2642  000746  5013               	movf	add_sensors_data@end+1,w,c
  2643  000748  5815               	subwfb	add_sensors_data@dst+1,w,c
  2644  00074A  A0D8               	btfss	status,0,c
  2645  00074C  D00F               	goto	i2l1614
  2646  00074E  D02B               	goto	i2l1622
  2647  000750                     i2l1608:
  2648                           
  2649                           ;arkeon.c: 124: *dst++ = *tmp++;
  2650  000750  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2651  000754  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2652  000758  C014  FFE1         	movff	add_sensors_data@dst,fsr1l
  2653  00075C  C015  FFE2         	movff	add_sensors_data@dst+1,fsr1h
  2654  000760  CFDF FFE7          	movff	indf2,indf1
  2655  000764  4A16               	infsnz	add_sensors_data@tmp,f,c
  2656  000766  2A17               	incf	add_sensors_data@tmp+1,f,c
  2657  000768  4A14               	infsnz	add_sensors_data@dst,f,c
  2658  00076A  2A15               	incf	add_sensors_data@dst+1,f,c
  2659  00076C                     i2l1614:
  2660  00076C  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2661  000770  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2662  000774  50DF               	movf	indf2,w,c
  2663  000776  B4D8               	btfsc	status,2,c
  2664  000778  D016               	goto	i2l1622
  2665  00077A  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2666  00077E  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2667  000782  50DF               	movf	indf2,w,c
  2668  000784  0A0D               	xorlw	13
  2669  000786  B4D8               	btfsc	status,2,c
  2670  000788  D00E               	goto	i2l1622
  2671  00078A  C016  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2672  00078E  C017  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2673  000792  50DF               	movf	indf2,w,c
  2674  000794  0A0A               	xorlw	10
  2675  000796  B4D8               	btfsc	status,2,c
  2676  000798  D006               	goto	i2l1622
  2677  00079A  5012               	movf	add_sensors_data@end,w,c
  2678  00079C  5C14               	subwf	add_sensors_data@dst,w,c
  2679  00079E  5013               	movf	add_sensors_data@end+1,w,c
  2680  0007A0  5815               	subwfb	add_sensors_data@dst+1,w,c
  2681  0007A2  A0D8               	btfss	status,0,c
  2682  0007A4  D7D5               	goto	i2l1608
  2683  0007A6                     i2l1622:
  2684                           
  2685                           ;arkeon.c: 125: }
  2686                           ;arkeon.c: 126: }
  2687                           ;arkeon.c: 129: formatted_sensor_data[0] = convert_char_hex(count,0);
  2688  0007A6  0E00               	movlw	0
  2689  0007A8  6E03               	movwf	convert_char_hex@hi_lo,c
  2690  0007AA  5011               	movf	add_sensors_data@count,w,c
  2691  0007AC  ECA8  F006         	call	_convert_char_hex
  2692  0007B0  C007  FFD9         	movff	add_sensors_data@formatted_sensor_data,fsr2l
  2693  0007B4  C008  FFDA         	movff	add_sensors_data@formatted_sensor_data+1,fsr2h
  2694  0007B8  6EDF               	movwf	indf2,c
  2695                           
  2696                           ;arkeon.c: 131: if ( dst >= (end-3) ) {
  2697  0007BA  0EFD               	movlw	253
  2698  0007BC  6E0B               	movwf	??_add_sensors_data& (0+255),c
  2699  0007BE  0EFF               	movlw	255
  2700  0007C0  6E0C               	movwf	(??_add_sensors_data+1)& (0+255),c
  2701  0007C2  C012  F00D         	movff	add_sensors_data@end,??_add_sensors_data+2
  2702  0007C6  C013  F00E         	movff	add_sensors_data@end+1,??_add_sensors_data+3
  2703  0007CA  500B               	movf	??_add_sensors_data,w,c
  2704  0007CC  260D               	addwf	??_add_sensors_data+2,f,c
  2705  0007CE  500C               	movf	??_add_sensors_data+1,w,c
  2706  0007D0  220E               	addwfc	??_add_sensors_data+3,f,c
  2707  0007D2  500D               	movf	??_add_sensors_data+2,w,c
  2708  0007D4  5C14               	subwf	add_sensors_data@dst,w,c
  2709  0007D6  500E               	movf	??_add_sensors_data+3,w,c
  2710  0007D8  5815               	subwfb	add_sensors_data@dst+1,w,c
  2711  0007DA  A0D8               	btfss	status,0,c
  2712  0007DC  D012               	goto	i2l248
  2713                           
  2714                           ;arkeon.c: 132: dst--;
  2715  0007DE  0614               	decf	add_sensors_data@dst,f,c
  2716  0007E0  A0D8               	btfss	status,0,c
  2717  0007E2  0615               	decf	add_sensors_data@dst+1,f,c
  2718                           
  2719                           ;arkeon.c: 133: *dst = 0;
  2720  0007E4  C014  FFD9         	movff	add_sensors_data@dst,fsr2l
  2721  0007E8  C015  FFDA         	movff	add_sensors_data@dst+1,fsr2h
  2722  0007EC  0E00               	movlw	0
  2723  0007EE  6EDF               	movwf	indf2,c
  2724                           
  2725                           ;arkeon.c: 134: dst--;
  2726  0007F0  0614               	decf	add_sensors_data@dst,f,c
  2727  0007F2  A0D8               	btfss	status,0,c
  2728  0007F4  0615               	decf	add_sensors_data@dst+1,f,c
  2729                           
  2730                           ;arkeon.c: 135: dst--;
  2731  0007F6  0614               	decf	add_sensors_data@dst,f,c
  2732  0007F8  A0D8               	btfss	status,0,c
  2733  0007FA  0615               	decf	add_sensors_data@dst+1,f,c
  2734                           
  2735                           ;arkeon.c: 136: dst--;
  2736  0007FC  0614               	decf	add_sensors_data@dst,f,c
  2737  0007FE  A0D8               	btfss	status,0,c
  2738  000800  0615               	decf	add_sensors_data@dst+1,f,c
  2739  000802                     i2l248:
  2740                           
  2741                           ;arkeon.c: 137: }
  2742                           ;arkeon.c: 139: *dst++ = 'F';
  2743  000802  C014  FFD9         	movff	add_sensors_data@dst,fsr2l
  2744  000806  C015  FFDA         	movff	add_sensors_data@dst+1,fsr2h
  2745  00080A  0E46               	movlw	70
  2746  00080C  6EDF               	movwf	indf2,c
  2747  00080E  4A14               	infsnz	add_sensors_data@dst,f,c
  2748  000810  2A15               	incf	add_sensors_data@dst+1,f,c
  2749                           
  2750                           ;arkeon.c: 140: *dst++ = '0';
  2751  000812  C014  FFD9         	movff	add_sensors_data@dst,fsr2l
  2752  000816  C015  FFDA         	movff	add_sensors_data@dst+1,fsr2h
  2753  00081A  0E30               	movlw	48
  2754  00081C  6EDF               	movwf	indf2,c
  2755  00081E  4A14               	infsnz	add_sensors_data@dst,f,c
  2756  000820  2A15               	incf	add_sensors_data@dst+1,f,c
  2757                           
  2758                           ;arkeon.c: 141: } else {
  2759  000822  0012               	return	
  2760  000824                     i2l1640:
  2761                           
  2762                           ;arkeon.c: 142: *dst = '0';
  2763  000824  C014  FFD9         	movff	add_sensors_data@dst,fsr2l
  2764  000828  C015  FFDA         	movff	add_sensors_data@dst+1,fsr2h
  2765  00082C  0E30               	movlw	48
  2766  00082E  6EDF               	movwf	indf2,c
  2767  000830  0012               	return	
  2768  000832                     __end_of_add_sensors_data:
  2769                           	opt stack 0
  2770                           pclatu	equ	0xFFB
  2771                           pclath	equ	0xFFA
  2772                           tblptru	equ	0xFF8
  2773                           tblptrh	equ	0xFF7
  2774                           tblptrl	equ	0xFF6
  2775                           tablat	equ	0xFF5
  2776                           prodh	equ	0xFF4
  2777                           prodl	equ	0xFF3
  2778                           intcon	equ	0xFF2
  2779                           postinc0	equ	0xFEE
  2780                           fsr0h	equ	0xFEA
  2781                           fsr0l	equ	0xFE9
  2782                           wreg	equ	0xFE8
  2783                           indf1	equ	0xFE7
  2784                           postdec1	equ	0xFE5
  2785                           fsr1h	equ	0xFE2
  2786                           fsr1l	equ	0xFE1
  2787                           bsr	equ	0xFE0
  2788                           indf2	equ	0xFDF
  2789                           fsr2h	equ	0xFDA
  2790                           fsr2l	equ	0xFD9
  2791                           status	equ	0xFD8
  2792                           
  2793 ;; *************** function _convert_char_hex *****************
  2794 ;; Defined at:
  2795 ;;		line 87 in file "arkeon.c"
  2796 ;; Parameters:    Size  Location     Type
  2797 ;;  c               1    wreg     unsigned char 
  2798 ;;  hi_lo           1    2[COMRAM] unsigned char 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  c               1    3[COMRAM] unsigned char 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      unsigned char 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2810 ;;      Params:         1       0       0       0       0       0       0
  2811 ;;      Locals:         1       0       0       0       0       0       0
  2812 ;;      Temps:          0       0       0       0       0       0       0
  2813 ;;      Totals:         2       0       0       0       0       0       0
  2814 ;;Total ram usage:        2 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    1
  2817 ;; This function calls:
  2818 ;;		_hexlookup
  2819 ;; This function is called by:
  2820 ;;		_add_sensors_data
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	text18
  2825  000D50                     __ptext18:
  2826                           	opt stack 0
  2827  000D50                     _convert_char_hex:
  2828                           	opt stack 23
  2829                           
  2830                           ;incstack = 0
  2831                           ;convert_char_hex@c stored from wreg
  2832  000D50  6E04               	movwf	convert_char_hex@c,c
  2833                           
  2834                           ;arkeon.c: 89: if ( hi_lo ) {
  2835  000D52  5003               	movf	convert_char_hex@hi_lo,w,c
  2836  000D54  B4D8               	btfsc	status,2,c
  2837  000D56  D006               	goto	i2l1516
  2838                           
  2839                           ;arkeon.c: 90: return(hexlookup( (c & 0xF0) >> 4 ));
  2840  000D58  3804               	swapf	convert_char_hex@c,w,c
  2841  000D5A  0B0F               	andlw	15
  2842  000D5C  0B0F               	andlw	15
  2843  000D5E  EC61  F006         	call	_hexlookup
  2844  000D62  0012               	return	
  2845  000D64                     i2l1516:
  2846                           
  2847                           ;arkeon.c: 92: return(hexlookup( (c & 0x0F) ));
  2848  000D64  5004               	movf	convert_char_hex@c,w,c
  2849  000D66  0B0F               	andlw	15
  2850  000D68  EC61  F006         	call	_hexlookup
  2851  000D6C  0012               	return	
  2852  000D6E                     __end_of_convert_char_hex:
  2853                           	opt stack 0
  2854                           pclatu	equ	0xFFB
  2855                           pclath	equ	0xFFA
  2856                           tblptru	equ	0xFF8
  2857                           tblptrh	equ	0xFF7
  2858                           tblptrl	equ	0xFF6
  2859                           tablat	equ	0xFF5
  2860                           prodh	equ	0xFF4
  2861                           prodl	equ	0xFF3
  2862                           intcon	equ	0xFF2
  2863                           postinc0	equ	0xFEE
  2864                           fsr0h	equ	0xFEA
  2865                           fsr0l	equ	0xFE9
  2866                           wreg	equ	0xFE8
  2867                           indf1	equ	0xFE7
  2868                           postdec1	equ	0xFE5
  2869                           fsr1h	equ	0xFE2
  2870                           fsr1l	equ	0xFE1
  2871                           bsr	equ	0xFE0
  2872                           indf2	equ	0xFDF
  2873                           fsr2h	equ	0xFDA
  2874                           fsr2l	equ	0xFD9
  2875                           status	equ	0xFD8
  2876                           
  2877 ;; *************** function _hexlookup *****************
  2878 ;; Defined at:
  2879 ;;		line 79 in file "arkeon.c"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  h               1    wreg     unsigned char 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  h               1    1[COMRAM] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      unsigned char 
  2886 ;; Registers used:
  2887 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2893 ;;      Params:         0       0       0       0       0       0       0
  2894 ;;      Locals:         1       0       0       0       0       0       0
  2895 ;;      Temps:          1       0       0       0       0       0       0
  2896 ;;      Totals:         2       0       0       0       0       0       0
  2897 ;;Total ram usage:        2 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; This function calls:
  2900 ;;		Nothing
  2901 ;; This function is called by:
  2902 ;;		_convert_char_hex
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text19
  2907  000CC2                     __ptext19:
  2908                           	opt stack 0
  2909  000CC2                     _hexlookup:
  2910                           	opt stack 23
  2911                           
  2912                           ;incstack = 0
  2913                           ;hexlookup@h stored from wreg
  2914  000CC2  6E02               	movwf	hexlookup@h,c
  2915                           
  2916                           ;arkeon.c: 81: if ( (h & 0xF0) != 0 ) return(0);
  2917  000CC4  C002  F001         	movff	hexlookup@h,??_hexlookup
  2918  000CC8  0EF0               	movlw	240
  2919  000CCA  1601               	andwf	??_hexlookup,f,c
  2920  000CCC  B4D8               	btfsc	status,2,c
  2921  000CCE  D002               	goto	i2l1472
  2922  000CD0  0E00               	movlw	0
  2923  000CD2  0012               	return	
  2924  000CD4                     i2l1472:
  2925                           
  2926                           ;arkeon.c: 82: static char hextable[] = "0123456789ABCDEF";
  2927                           ;arkeon.c: 83: return(hextable[h]);
  2928  000CD4  5002               	movf	hexlookup@h,w,c
  2929  000CD6  0D01               	mullw	1
  2930  000CD8  0E4A               	movlw	low hexlookup@hextable
  2931  000CDA  24F3               	addwf	prodl,w,c
  2932  000CDC  6ED9               	movwf	fsr2l,c
  2933  000CDE  0E00               	movlw	high hexlookup@hextable
  2934  000CE0  20F4               	addwfc	prodh,w,c
  2935  000CE2  6EDA               	movwf	fsr2h,c
  2936  000CE4  50DF               	movf	indf2,w,c
  2937  000CE6  0012               	return	
  2938  000CE8                     __end_of_hexlookup:
  2939                           	opt stack 0
  2940                           pclatu	equ	0xFFB
  2941                           pclath	equ	0xFFA
  2942                           tblptru	equ	0xFF8
  2943                           tblptrh	equ	0xFF7
  2944                           tblptrl	equ	0xFF6
  2945                           tablat	equ	0xFF5
  2946                           prodh	equ	0xFF4
  2947                           prodl	equ	0xFF3
  2948                           intcon	equ	0xFF2
  2949                           postinc0	equ	0xFEE
  2950                           fsr0h	equ	0xFEA
  2951                           fsr0l	equ	0xFE9
  2952                           wreg	equ	0xFE8
  2953                           indf1	equ	0xFE7
  2954                           postdec1	equ	0xFE5
  2955                           fsr1h	equ	0xFE2
  2956                           fsr1l	equ	0xFE1
  2957                           bsr	equ	0xFE0
  2958                           indf2	equ	0xFDF
  2959                           fsr2h	equ	0xFDA
  2960                           fsr2l	equ	0xFD9
  2961                           status	equ	0xFD8
  2962                           
  2963 ;; *************** function _UART1_Read *****************
  2964 ;; Defined at:
  2965 ;;		line 140 in file "putgetc.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;		None
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;		None
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      unsigned char 
  2972 ;; Registers used:
  2973 ;;		wreg, status,2
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2979 ;;      Params:         0       0       0       0       0       0       0
  2980 ;;      Locals:         0       0       0       0       0       0       0
  2981 ;;      Temps:          0       0       0       0       0       0       0
  2982 ;;      Totals:         0       0       0       0       0       0       0
  2983 ;;Total ram usage:        0 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		_mux_handler
  2989 ;;		_UART1_Read_Text
  2990 ;;		_UART1_Read_Line
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993                           
  2994                           	psect	text20
  2995  000DBC                     __ptext20:
  2996                           	opt stack 0
  2997  000DBC                     _UART1_Read:
  2998                           	opt stack 25
  2999  000DBC                     i2l96:
  3000  000DBC  AA9D               	btfss	3997,5,c	;volatile
  3001  000DBE  D7FE               	goto	i2l96
  3002                           
  3003                           ;putgetc.c: 143: return RCREG1;
  3004  000DC0  50AE               	movf	4014,w,c	;volatile
  3005  000DC2  0012               	return	
  3006  000DC4                     __end_of_UART1_Read:
  3007                           	opt stack 0
  3008                           pclatu	equ	0xFFB
  3009                           pclath	equ	0xFFA
  3010                           tblptru	equ	0xFF8
  3011                           tblptrh	equ	0xFF7
  3012                           tblptrl	equ	0xFF6
  3013                           tablat	equ	0xFF5
  3014                           prodh	equ	0xFF4
  3015                           prodl	equ	0xFF3
  3016                           intcon	equ	0xFF2
  3017                           postinc0	equ	0xFEE
  3018                           fsr0h	equ	0xFEA
  3019                           fsr0l	equ	0xFE9
  3020                           wreg	equ	0xFE8
  3021                           indf1	equ	0xFE7
  3022                           postdec1	equ	0xFE5
  3023                           fsr1h	equ	0xFE2
  3024                           fsr1l	equ	0xFE1
  3025                           bsr	equ	0xFE0
  3026                           indf2	equ	0xFDF
  3027                           fsr2h	equ	0xFDA
  3028                           fsr2l	equ	0xFD9
  3029                           status	equ	0xFD8
  3030                           pclatu	equ	0xFFB
  3031                           pclath	equ	0xFFA
  3032                           tblptru	equ	0xFF8
  3033                           tblptrh	equ	0xFF7
  3034                           tblptrl	equ	0xFF6
  3035                           tablat	equ	0xFF5
  3036                           prodh	equ	0xFF4
  3037                           prodl	equ	0xFF3
  3038                           intcon	equ	0xFF2
  3039                           postinc0	equ	0xFEE
  3040                           fsr0h	equ	0xFEA
  3041                           fsr0l	equ	0xFE9
  3042                           wreg	equ	0xFE8
  3043                           indf1	equ	0xFE7
  3044                           postdec1	equ	0xFE5
  3045                           fsr1h	equ	0xFE2
  3046                           fsr1l	equ	0xFE1
  3047                           bsr	equ	0xFE0
  3048                           indf2	equ	0xFDF
  3049                           fsr2h	equ	0xFDA
  3050                           fsr2l	equ	0xFD9
  3051                           status	equ	0xFD8
  3052                           
  3053                           	psect	rparam
  3054  0000                     pclatu	equ	0xFFB
  3055                           pclath	equ	0xFFA
  3056                           tblptru	equ	0xFF8
  3057                           tblptrh	equ	0xFF7
  3058                           tblptrl	equ	0xFF6
  3059                           tablat	equ	0xFF5
  3060                           prodh	equ	0xFF4
  3061                           prodl	equ	0xFF3
  3062                           intcon	equ	0xFF2
  3063                           postinc0	equ	0xFEE
  3064                           fsr0h	equ	0xFEA
  3065                           fsr0l	equ	0xFE9
  3066                           wreg	equ	0xFE8
  3067                           indf1	equ	0xFE7
  3068                           postdec1	equ	0xFE5
  3069                           fsr1h	equ	0xFE2
  3070                           fsr1l	equ	0xFE1
  3071                           bsr	equ	0xFE0
  3072                           indf2	equ	0xFDF
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        17
    BSS         167
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     46      91
    BANK0           160     27      87
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_3(CODE[10]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 20
		 -> sensorArray0(BANK0[20]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    mux_handler@data	PTR unsigned char  size(2) Largest target is 20
		 -> mux_input(COMRAM[20]), 

    add_sensors_data@end	PTR unsigned char  size(2) Largest target is 20
		 -> sensorArray1(BANK0[20]), sensorArray0(BANK0[20]), 

    add_sensors_data@dst	PTR unsigned char  size(2) Largest target is 20
		 -> sensorArray1(BANK0[20]), sensorArray0(BANK0[20]), 

    add_sensors_data@data	PTR unsigned char  size(2) Largest target is 20
		 -> mux_input(COMRAM[20]), 

    add_sensors_data@tmp	PTR unsigned char  size(2) Largest target is 20
		 -> mux_input(COMRAM[20]), 

    add_sensors_data@formatted_sensor_data	PTR unsigned char  size(2) Largest target is 20
		 -> sensorArray1(BANK0[20]), sensorArray0(BANK0[20]), 

    UART2_Write_Line@s	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    UART2_Write_String@s	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _bt_handler in COMRAM

    None.

Critical Paths under _mux_handler in COMRAM

    _mux_handler->_add_sensors_data
    _add_sensors_data->_convert_char_hex
    _convert_char_hex->_hexlookup

Critical Paths under _main in BANK0

    _main->_strcat
    _main->_strcpy
    _send_sensor_cmd->_MUXchannel
    _intialize->_soft_delay
    _UART2_Write_Line->_UART2_Write_String
    _UART2_Write_String->_UART2_Write_Char

Critical Paths under _bt_handler in BANK0

    None.

Critical Paths under _mux_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _bt_handler in BANK1

    None.

Critical Paths under _mux_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _bt_handler in BANK2

    None.

Critical Paths under _mux_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _bt_handler in BANK3

    None.

Critical Paths under _mux_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _bt_handler in BANK4

    None.

Critical Paths under _mux_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _bt_handler in BANK5

    None.

Critical Paths under _mux_handler in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1942
                                             24 BANK0      3     3      0
                   _UART2_Write_Line
                          _intialize
                    _send_sensor_cmd
                         _soft_delay
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     239
                                             18 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _strcat                                               6     2      4     273
                                             18 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _send_sensor_cmd                                      1     1      0     452
                                             22 BANK0      1     1      0
                         _MUXchannel
                   _UART1_Write_Char
                         _soft_delay
 ---------------------------------------------------------------------------------
 (2) _UART1_Write_Char                                     1     1      0      31
                                             18 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MUXchannel                                           4     2      2      96
                                             18 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _intialize                                            0     0      0     294
                        _USART1_init
                        _USART2_init
                     _interrupt_init
                         _soft_delay
 ---------------------------------------------------------------------------------
 (1) _soft_delay                                           3     1      2     294
                                             18 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART2_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART2_Write_Line                                     2     0      2     288
                                             21 BANK0      2     0      2
                   _UART2_Write_Char
                 _UART2_Write_String
 ---------------------------------------------------------------------------------
 (2) _UART2_Write_String                                   2     0      2     161
                                             19 BANK0      2     0      2
                   _UART2_Write_Char
 ---------------------------------------------------------------------------------
 (3) _UART2_Write_Char                                     1     1      0      31
                                             18 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _bt_handler                                          18    18      0       0
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _mux_handler                                         23    23      0    1696
                                             23 COMRAM    23    23      0
                         _UART1_Read
                   _add_sensors_data
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _add_sensors_data                                    19    13      6    1382
                                              4 COMRAM    19    13      6
                   _convert_char_hex
 ---------------------------------------------------------------------------------
 (7) _convert_char_hex                                     2     1      1     163
                                              2 COMRAM     2     1      1
                          _hexlookup
 ---------------------------------------------------------------------------------
 (8) _hexlookup                                            2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _UART1_Read                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART2_Write_Line
     _UART2_Write_Char
     _UART2_Write_String
       _UART2_Write_Char
   _intialize
     _USART1_init
     _USART2_init
     _interrupt_init
     _soft_delay
   _send_sensor_cmd
     _MUXchannel
     _UART1_Write_Char
     _soft_delay
   _soft_delay
   _strcat
   _strcpy

 _bt_handler (ROOT)

 _mux_handler (ROOT)
   _UART1_Read
   _add_sensors_data
     _convert_char_hex
       _hexlookup
   _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      50       6       31.2%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     1B      57       4       54.4%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     2E      5B       1       95.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     102       9        0.0%
DATA                 0      0     102      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Dec  3 15:58:20 2014

                     _add_sensors_data 0614                                     l45 0DAA  
                                   l78 0D9C                                     bsr 000FE0  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                           _MUXchannel 0BE6                 __end_of_interrupt_init 0DBC  
           __end_of_UART2_Write_String 0CC2                                    l303 0BE8  
                                  l305 0BEE                                    l306 0BF4  
                         __CFG_CPB$OFF 000000                           __CFG_CPD$OFF 000000  
        add_sensors_data@max_data_size 0009                                    prod 000FF3  
                                  wreg 000FE8                             _TXSTA1bits 000FAC  
                           _TXSTA2bits 000F72                           __CFG_LVP$OFF 000000  
                                 l2010 0C42                                   l2020 0B86  
                                 l2014 0B64                                   l2016 0B6A  
                                 l2008 0C36                                   l2018 0B7A  
                                 l2054 0AA2                                   l2038 0A22  
                                 l1932 0C9E                                   l1936 0CB2  
                                 l1962 0C84                                   l1946 0BFA  
                                 l1958 0C66                                   STR_1 060F  
                                 STR_2 060B                                   STR_3 0601  
                                 u1447 0C6E                                   i2l96 0DBC  
                         mux_handler@c 002E                           mux_handler@i 002C  
add_sensors_data@formatted_sensor_data 0007                                   _main 09EE  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                                 fsr0l 000FE9                                   fsr2h 000FDA  
                                 indf1 000FE7                                   fsr1l 000FE1  
                                 indf2 000FDF                                   fsr2l 000FD9  
                        __CFG_BORV$190 000000                                   pclat 000FFA  
                                 prodh 000FF4                                   prodl 000FF3  
                                 start 00C6                          __CFG_IESO$OFF 000000  
                          ?_UART1_Read 0001                           _BAUDCON1bits 000FB8  
                         _BAUDCON2bits 000F70                           soft_delay@tt 00AE  
                                ?_main 0001                        ?_interrupt_init 0001  
                                i1l217 0080                                  i2l248 0802  
                                i2l280 0880                                  i2l281 09B4  
                                i2l283 09B0              __size_of_UART1_Write_Char 000E  
                                _PORTA 000F80                                  _PORTB 000F81  
                                _PORTC 000F82                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                        __CFG_WRTB$OFF 000000                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         __CFG_EBTRB$OFF 000000  
                      __end_of_isdigit 0D50                     __CFG_MCLRE$EXTMCLR 000000  
                                main@i 00B5                  convert_char_hex@hi_lo 0003  
                       __pbitbssCOMRAM 02D8                                  tablat 000FF5  
                                status 000FD8                         __CFG_HFOFST$ON 000000  
            __size_of_UART2_Write_Char 000E                         __CFG_PBADEN$ON 000000  
            __size_of_UART2_Write_Line 0018                        __initialization 0B06  
                         __end_of_main 0AB2                            ?_MUXchannel 00AE  
                               ??_main 00B4                          __activetblptr 000002  
                       __CFG_PLLCFG$ON 000000                      ?_convert_char_hex 0003  
                        main@inProcess 00B4                     ??_convert_char_hex 0004  
                               _ANSELA 000F38                                 _ANSELC 000F3A  
                  __size_of_UART1_Read 0008                                 i1l1750 0076  
                               i2l1516 0D64                                 i2l1614 076C  
                               i2l1622 07A6                                 i2l1472 0CD4  
                               i2l1608 0750                                 i2l1640 0824  
                               i2l1554 061E                                 i2l1650 0D48  
                               i2l1812 08C4                                 i2l1574 0692  
                               i2l1558 0632                         __CFG_WDTEN$OFF 000000  
                               i2l1578 06A6                                 i2l1586 06C4  
                               i2l1834 095A                                 i2l1818 08D6  
                               i2l1596 070E                                 i2l1828 0932  
                               i2l1846 0988                                 i2l1798 0892  
                               _RCREG1 000FAE                                 _RCREG2 000F74  
                               _OSCCON 000FD3                                 _SPBRG1 000FAF  
                               _SPBRG2 000F75                                 _TXREG1 000FAD  
                               _TXREG2 000F73                         __CFG_XINST$OFF 000000  
             __size_of_send_sensor_cmd 0044                         __CFG_STVREN$ON 000000  
                               clear_0 0B0C                                 clear_1 0B18  
                               clear_2 0B26                                 _strcat 0B56  
                               _strcpy 0C28                           __pdataCOMRAM 004A  
                            ??_isdigit 0001                           __mediumconst 0000  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                           ?_USART1_init 0001  
                         ?_USART2_init 0001                           ?_mux_handler 0001  
             __end_of_add_sensors_data 0832                             __accesstop 0060  
              __end_of__initialization 0B4C                    __size_of_MUXchannel 0042  
                       __pcstackCOMRAM 0001                       _UART1_Write_Char 0D98  
                    MUXchannel@channel 00AE                             __pbssBANK0 0060  
                           __pbssBANK1 0100                     _UART2_Write_String 0C9C  
                   __size_of_hexlookup 0026                       _UART2_Write_Char 0DA6  
                     _UART2_Write_Line 0D6E                    ?_UART2_Write_String 00AF  
                   __size_of_intialize 0054                     __CFG_CCP2MX$PORTC1 000000  
                         ??_UART1_Read 0001                       ??_interrupt_init 00AE  
                   __CFG_CCP3MX$PORTB5 000000                             _bt_handler 0018  
                    ??_send_sensor_cmd 00B2                                ?_strcat 00AE  
                              ?_strcpy 00AE                             _has_sensor 002F  
                    add_sensors_data@j 000F                   ??_UART2_Write_String 00B1  
                              _SPBRGH1 000FB0                                _SPBRGH2 000F76  
                      mux_handler@data 002A                     __end_of_UART1_Read 0DC4  
                      __CFG_PWRTEN$OFF 000000                                __Hparam 0000  
                              __Lparam 0000                           __psmallconst 0600  
                              __pcinit 0B06                                __ramtop 0600  
                         ??_MUXchannel 00B0                                __ptext0 09EE  
                              __ptext1 0C28                                __ptext2 0B56  
                              __ptext3 0BA2                                __ptext4 0D98  
                              __ptext5 0BE6                                __ptext6 0AB2  
                              __ptext7 0C64                                __ptext8 0DB4  
                              __ptext9 0CE8                      __end_of_hexlookup 0CE8  
                      __size_of_strcat 004C                        __size_of_strcpy 003C  
                              _isdigit 0D30                      __end_of_intialize 0B06  
                       __pintcode_body 0832                   end_of_initialization 0B4C  
                  add_sensors_data@end 0012                    add_sensors_data@dst 0014  
                  add_sensors_data@tmp 0016                   __size_of_USART1_init 0024  
                 __size_of_USART2_init 0024                          __Lmediumconst 0000  
                              int_func 0832                   __size_of_mux_handler 09E6  
            __size_of_convert_char_hex 001E                     __end_of_MUXchannel 0C28  
          send_sensor_cmd@sensor_index 00B2                                postdec1 000FE5  
                              postinc0 000FEE                            ?_bt_handler 0001  
                           _soft_delay 0C64                              _TRISAbits 000F92  
                            _TRISBbits 000F93                              _TRISCbits 000F94  
                    ?_add_sensors_data 0005                     ??_add_sensors_data 000B  
             __end_of_UART1_Write_Char 0DA6                    UART2_Write_String@s 00AF  
                        __pidataCOMRAM 0D86               __end_of_UART2_Write_Char 0DB4  
                       __end_of_strcat 0BA2               __end_of_UART2_Write_Line 0D86  
                       __end_of_strcpy 0C64                    start_initialization 0B06  
                 _checking_for_sensors 02D9                             hexlookup@h 0002  
                  __size_of_bt_handler 00AE                        _send_sensor_cmd 0BA2  
                             ??_strcat 00B2                               ??_strcpy 00B2  
                          ?_soft_delay 00AE                      UART2_Write_Line@s 00B1  
                          __pbssCOMRAM 002F                          __pcstackBANK0 009C  
                  __end_of__stringdata 0612                           _isdigit$1777 0002  
                     _convert_char_hex 0D50                              __pintcode 0008  
                          __pintcodelo 0018                       __CFG_PRICLKEN$ON 000000  
                          __smallconst 0600                               ?_isdigit 0001  
          __size_of_UART2_Write_String 0026                              _hexlookup 0CC2  
              __end_of_send_sensor_cmd 0BE6                              _intialize 0AB2  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _PIE1bits 000F9D                               _PIE3bits 000FA3  
                             i1u145_27 006A                               i2u146_47 0872  
                  __size_of_soft_delay 0038                               _PIR1bits 000F9E  
                             _PIR3bits 000FA4                               _RCONbits 000FD0  
                     __CFG_WDTPS$32768 000000                           ??_bt_handler 009C  
                            _mux_event 02DB                              _mux_error 02DA  
                            _mux_input 0036                            __stringdata 0601  
              __size_of_interrupt_init 0008                             ?_hexlookup 0001  
                        ??_USART1_init 00AE                          ??_USART2_init 00AE  
                        ??_mux_handler 0018                              copy_data0 0B40  
                           ?_intialize 0001                     __end_of_bt_handler 00C6  
                add_sensors_data@count 0011                      ?_UART1_Write_Char 0001  
                             __Hrparam 0000                               __Lrparam 0000  
                   __CFG_BOREN$SBORDIS 000000                     ??_UART1_Write_Char 00AE  
                    __CFG_P2BMX$PORTB5 000000              __size_of_add_sensors_data 021E  
                      _mux_input_index 0035                      ?_UART2_Write_Char 0001  
                    hexlookup@hextable 004A                             strcat@from 00B0  
                    ?_UART2_Write_Line 00B1                       __size_of_isdigit 0020  
                   ??_UART2_Write_Char 00AE                               __ptext10 0D0C  
                             __ptext11 0D6E                               __ptext20 0DBC  
                             __ptext12 0C9C                               __ptext13 0DA6  
                             __ptext16 0D30                               __ptext17 0614  
                             __ptext18 0D50                               __ptext19 0CC2  
                   ??_UART2_Write_Line 00B3                               _bt_event 02D8  
                             _bt_input 0060                       ?_send_sensor_cmd 0001  
                           strcpy@from 00B0                          __size_of_main 00C4  
                  __end_of_USART1_init 0D30                    __end_of_USART2_init 0D0C  
                  __end_of_mux_handler 09EE                   UART1_Write_Char@data 00AE  
             __end_of_convert_char_hex 0D6E                           ??_soft_delay 00B0  
                    _writeSensorString 0100                            _OSCTUNEbits 000F9B  
                           _INTCONbits 000FF2                   add_sensors_data@data 0005  
                          ??_hexlookup 0001                           _sensorArray0 0074  
                         _sensorArray1 0088                               isdigit@c 0003  
                             intlevel1 0000                               intlevel2 0000  
                          ??_intialize 00B1                             _RCSTA1bits 000FAB  
                           _RCSTA2bits 000F71                     __end_of_soft_delay 0C9C  
                           _UART1_Read 0DBC                      convert_char_hex@c 0004  
                          _sensorIndex 0032                               strcat@cp 00B2  
                             strcat@to 00AE                               strcpy@cp 00B2  
                       _interrupt_init 0DB4                               strcpy@to 00AE  
                 UART2_Write_Char@data 00AE                      __CFG_T3CMX$PORTC0 000000  
                  _mux_buffer_overflow 0034                            _USART1_init 0D0C  
                          _USART2_init 0CE8                            _mux_handler 0008  
                    __CFG_FOSC$INTIO67 000000  
