

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Nov 16 22:33:38 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    39                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           	psect	idataBANK0
    42  000CFE                     __pidataBANK0:
    43                           	opt stack 0
    44                           
    45                           ;initializer for hexlookup@hextable
    46  000CFE  30                 	db	48
    47  000CFF  31                 	db	49
    48  000D00  32                 	db	50
    49  000D01  33                 	db	51
    50  000D02  34                 	db	52
    51  000D03  35                 	db	53
    52  000D04  36                 	db	54
    53  000D05  37                 	db	55
    54  000D06  38                 	db	56
    55  000D07  39                 	db	57
    56  000D08  41                 	db	65
    57  000D09  42                 	db	66
    58  000D0A  43                 	db	67
    59  000D0B  44                 	db	68
    60  000D0C  45                 	db	69
    61  000D0D  46                 	db	70
    62  000D0E  00                 	db	0
    63  0000                     _ANSELA	set	3896
    64  0000                     _ANSELC	set	3898
    65  0000                     _BAUDCON1bits	set	4024
    66  0000                     _BAUDCON2bits	set	3952
    67  0000                     _INTCONbits	set	4082
    68  0000                     _IPR1bits	set	3999
    69  0000                     _IPR3bits	set	4005
    70  0000                     _LATAbits	set	3977
    71  0000                     _LATCbits	set	3979
    72  0000                     _OSCCON	set	4051
    73  0000                     _OSCTUNEbits	set	3995
    74  0000                     _PIE1bits	set	3997
    75  0000                     _PIE3bits	set	4003
    76  0000                     _PIR1bits	set	3998
    77  0000                     _PIR3bits	set	4004
    78  0000                     _PORTA	set	3968
    79  0000                     _PORTB	set	3969
    80  0000                     _PORTC	set	3970
    81  0000                     _RCONbits	set	4048
    82  0000                     _RCREG1	set	4014
    83  0000                     _RCREG2	set	3956
    84  0000                     _RCSTA1bits	set	4011
    85  0000                     _RCSTA2bits	set	3953
    86  0000                     _SPBRG1	set	4015
    87  0000                     _SPBRG2	set	3957
    88  0000                     _SPBRGH1	set	4016
    89  0000                     _SPBRGH2	set	3958
    90  0000                     _TRISAbits	set	3986
    91  0000                     _TRISBbits	set	3987
    92  0000                     _TRISCbits	set	3988
    93  0000                     _TXREG1	set	4013
    94  0000                     _TXREG2	set	3955
    95  0000                     _TXSTA1bits	set	4012
    96  0000                     _TXSTA2bits	set	3954
    97                           
    98                           	psect	smallconst
    99  000600                     __psmallconst:
   100                           	opt stack 0
   101  000600  00                 	db	0
   102  000601                     __stringdata:
   103                           	opt stack 0
   104  000601                     STR_2:
   105  000601  73                 	db	115	;'s'
   106  000602  68                 	db	104	;'h'
   107  000603  77                 	db	119	;'w'
   108  000604  2C                 	db	44
   109  000605  30                 	db	48	;'0'
   110  000606  30                 	db	48	;'0'
   111  000607  31                 	db	49	;'1'
   112  000608  63                 	db	99	;'c'
   113  000609  2C                 	db	44
   114  00060A  00                 	db	0
   115  00060B  31                 	db	49	;'1'
   116  00060C  30                 	db	48	;'0'
   117  00060D  00                 	db	0
   118  00060E                     __end_of__stringdata:
   119                           	opt stack 0
   120                           
   121                           ; #config settings
   122  00060E  00                 	db	0	; dummy byte at the end
   123  0000                     
   124                           	psect	cinit
   125  000A16                     __pcinit:
   126                           	opt stack 0
   127  000A16                     start_initialization:
   128                           	opt stack 0
   129  000A16                     __initialization:
   130                           	opt stack 0
   131                           
   132                           ; Clear objects allocated to BANK1 (80 bytes)
   133  000A16  EE01  F000         	lfsr	0,__pbssBANK1
   134  000A1A  0E50               	movlw	80
   135  000A1C                     clear_0:
   136  000A1C  6AEE               	clrf	postinc0,c
   137  000A1E  06E8               	decf	wreg,f,c
   138  000A20  E1FD               	bnz	clear_0
   139                           
   140                           ; Clear objects allocated to BANK0 (80 bytes)
   141  000A22  EE00  F060         	lfsr	0,__pbssBANK0
   142  000A26  0E50               	movlw	80
   143  000A28                     clear_1:
   144  000A28  6AEE               	clrf	postinc0,c
   145  000A2A  06E8               	decf	wreg,f,c
   146  000A2C  E1FD               	bnz	clear_1
   147                           
   148                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   149  000A2E  6A40               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   150                           
   151                           ; Clear objects allocated to COMRAM (25 bytes)
   152  000A30  EE00  F027         	lfsr	0,__pbssCOMRAM
   153  000A34  0E19               	movlw	25
   154  000A36                     clear_2:
   155  000A36  6AEE               	clrf	postinc0,c
   156  000A38  06E8               	decf	wreg,f,c
   157  000A3A  E1FD               	bnz	clear_2
   158                           
   159                           ; Initialize objects allocated to BANK0 (17 bytes)
   160                           ; load TBLPTR registers with __pidataBANK0
   161  000A3C  0EFE               	movlw	low __pidataBANK0
   162  000A3E  6EF6               	movwf	tblptrl,c
   163  000A40  0E0C               	movlw	high __pidataBANK0
   164  000A42  6EF7               	movwf	tblptrh,c
   165  000A44  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   166  000A46  6EF8               	movwf	tblptru,c
   167  000A48  EE00  F0CC         	lfsr	0,__pdataBANK0
   168  000A4C  EE10 F011          	lfsr	1,17
   169  000A50                     copy_data0:
   170  000A50  0009               	tblrd		*+
   171  000A52  CFF5 FFEE          	movff	tablat,postinc0
   172  000A56  50E5               	movf	postdec1,w,c
   173  000A58  50E1               	movf	fsr1l,w,c
   174  000A5A  E1FA               	bnz	copy_data0
   175  000A5C                     end_of_initialization:
   176                           	opt stack 0
   177  000A5C                     __end_of__initialization:
   178                           	opt stack 0
   179  000A5C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   180  000A5E  6EF8               	movwf	tblptru,c
   181  000A60  0100               	movlb	0
   182  000A62  EF53  F004         	goto	_main	;jump to C main() function
   183                           tblptru	equ	0xFF8
   184                           tblptrh	equ	0xFF7
   185                           tblptrl	equ	0xFF6
   186                           tablat	equ	0xFF5
   187                           postinc0	equ	0xFEE
   188                           wreg	equ	0xFE8
   189                           postdec1	equ	0xFE5
   190                           fsr1l	equ	0xFE1
   191                           
   192                           	psect	bitbssCOMRAM
   193  000200                     __pbitbssCOMRAM:
   194                           	opt stack 0
   195  000200                     _bt_event:
   196                           	opt stack 0
   197  000200                     	ds	1
   198  000201                     _checking_for_sensors:
   199                           	opt stack 0
   200  000201                     	ds	1
   201  000202                     _mux_error:
   202                           	opt stack 0
   203  000202                     	ds	1
   204  000203                     _mux_event:
   205                           	opt stack 0
   206  000203                     	ds	1
   207                           tblptru	equ	0xFF8
   208                           tblptrh	equ	0xFF7
   209                           tblptrl	equ	0xFF6
   210                           tablat	equ	0xFF5
   211                           postinc0	equ	0xFEE
   212                           wreg	equ	0xFE8
   213                           postdec1	equ	0xFE5
   214                           fsr1l	equ	0xFE1
   215                           
   216                           	psect	bssCOMRAM
   217  000027                     __pbssCOMRAM:
   218                           	opt stack 0
   219  000027                     _has_sensor:
   220                           	opt stack 0
   221  000027                     	ds	3
   222  00002A                     _sensorIndex:
   223                           	opt stack 0
   224  00002A                     	ds	2
   225  00002C                     _mux_input:
   226                           	opt stack 0
   227  00002C                     	ds	20
   228                           tblptru	equ	0xFF8
   229                           tblptrh	equ	0xFF7
   230                           tblptrl	equ	0xFF6
   231                           tablat	equ	0xFF5
   232                           postinc0	equ	0xFEE
   233                           wreg	equ	0xFE8
   234                           postdec1	equ	0xFE5
   235                           fsr1l	equ	0xFE1
   236                           
   237                           	psect	bssBANK0
   238  000060                     __pbssBANK0:
   239                           	opt stack 0
   240  000060                     _bt_input:
   241                           	opt stack 0
   242  000060                     	ds	20
   243  000074                     _sensorArray0:
   244                           	opt stack 0
   245  000074                     	ds	20
   246  000088                     _sensorArray1:
   247                           	opt stack 0
   248  000088                     	ds	20
   249  00009C                     _sensorArray2:
   250                           	opt stack 0
   251  00009C                     	ds	20
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           tblptrl	equ	0xFF6
   255                           tablat	equ	0xFF5
   256                           postinc0	equ	0xFEE
   257                           wreg	equ	0xFE8
   258                           postdec1	equ	0xFE5
   259                           fsr1l	equ	0xFE1
   260                           
   261                           	psect	dataBANK0
   262  0000CC                     __pdataBANK0:
   263                           	opt stack 0
   264  0000CC                     hexlookup@hextable:
   265                           	opt stack 0
   266  0000CC                     	ds	17
   267                           tblptru	equ	0xFF8
   268                           tblptrh	equ	0xFF7
   269                           tblptrl	equ	0xFF6
   270                           tablat	equ	0xFF5
   271                           postinc0	equ	0xFEE
   272                           wreg	equ	0xFE8
   273                           postdec1	equ	0xFE5
   274                           fsr1l	equ	0xFE1
   275                           
   276                           	psect	bssBANK1
   277  000100                     __pbssBANK1:
   278                           	opt stack 0
   279  000100                     _writeSensorString:
   280                           	opt stack 0
   281  000100                     	ds	80
   282                           tblptru	equ	0xFF8
   283                           tblptrh	equ	0xFF7
   284                           tblptrl	equ	0xFF6
   285                           tablat	equ	0xFF5
   286                           postinc0	equ	0xFEE
   287                           wreg	equ	0xFE8
   288                           postdec1	equ	0xFE5
   289                           fsr1l	equ	0xFE1
   290                           
   291                           	psect	cstackBANK0
   292  0000B0                     __pcstackBANK0:
   293                           	opt stack 0
   294  0000B0                     ??_mux_handler:
   295                           
   296                           ; 0 bytes @ 0x0
   297  0000B0                     	ds	15
   298  0000BF                     UART2_Write_Char@data:
   299                           	opt stack 0
   300  0000BF                     UART1_Write_Char@data:
   301                           	opt stack 0
   302  0000BF                     MUXchannel@channel:
   303                           	opt stack 0
   304  0000BF                     soft_delay@tt:
   305                           	opt stack 0
   306  0000BF                     strcat@to:
   307                           	opt stack 0
   308  0000BF                     strcpy@to:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0xF
   312  0000BF                     	ds	1
   313  0000C0                     UART2_Write_String@s:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x10
   317  0000C0                     	ds	1
   318  0000C1                     ??_MUXchannel:
   319  0000C1                     ??_soft_delay:
   320  0000C1                     strcat@from:
   321                           	opt stack 0
   322  0000C1                     strcpy@from:
   323                           	opt stack 0
   324                           
   325                           ; 2 bytes @ 0x11
   326  0000C1                     	ds	1
   327  0000C2                     UART2_Write_Line@s:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0x12
   331  0000C2                     	ds	1
   332  0000C3                     send_sensor_cmd@sensor_index:
   333                           	opt stack 0
   334  0000C3                     strcat@cp:
   335                           	opt stack 0
   336  0000C3                     strcpy@cp:
   337                           	opt stack 0
   338                           
   339                           ; 2 bytes @ 0x13
   340  0000C3                     	ds	1
   341  0000C4                     
   342                           ; 0 bytes @ 0x14
   343  0000C4                     	ds	1
   344  0000C5                     main@count_up:
   345                           	opt stack 0
   346                           
   347                           ; 2 bytes @ 0x15
   348  0000C5                     	ds	2
   349  0000C7                     main@count_bt_events:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x17
   353  0000C7                     	ds	2
   354  0000C9                     main@inProcess:
   355                           	opt stack 0
   356                           
   357                           ; 1 bytes @ 0x19
   358  0000C9                     	ds	1
   359  0000CA                     main@i:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x1A
   363  0000CA                     	ds	2
   364                           tblptru	equ	0xFF8
   365                           tblptrh	equ	0xFF7
   366                           tblptrl	equ	0xFF6
   367                           tablat	equ	0xFF5
   368                           postinc0	equ	0xFEE
   369                           wreg	equ	0xFE8
   370                           postdec1	equ	0xFE5
   371                           fsr1l	equ	0xFE1
   372                           
   373                           	psect	cstackCOMRAM
   374  000001                     __pcstackCOMRAM:
   375                           	opt stack 0
   376  000001                     ??_bt_handler:
   377  000001                     
   378                           ; 2 bytes @ 0x0
   379  000001                     	ds	18
   380  000013                     ??_isdigit:
   381  000013                     ??_hexlookup:
   382  000013                     ?_strlen:
   383                           	opt stack 0
   384  000013                     UART1_Read_Line@Output:
   385                           	opt stack 0
   386  000013                     strlen@s:
   387                           	opt stack 0
   388                           
   389                           ; 2 bytes @ 0x12
   390  000013                     	ds	1
   391  000014                     hexlookup@h:
   392                           	opt stack 0
   393  000014                     _isdigit$1862:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0x13
   397  000014                     	ds	1
   398  000015                     ??_strlen:
   399  000015                     convert_char_hex@hi_lo:
   400                           	opt stack 0
   401  000015                     isdigit@c:
   402                           	opt stack 0
   403  000015                     UART1_Read_Line@length:
   404                           	opt stack 0
   405                           
   406                           ; 2 bytes @ 0x14
   407  000015                     	ds	1
   408  000016                     convert_char_hex@c:
   409                           	opt stack 0
   410                           
   411                           ; 1 bytes @ 0x15
   412  000016                     	ds	1
   413  000017                     UART1_Read_Line@j:
   414                           	opt stack 0
   415  000017                     strlen@cp:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x16
   419  000017                     	ds	2
   420  000019                     add_sensors_data@data:
   421                           	opt stack 0
   422  000019                     UART1_Read_Line@i:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x18
   426  000019                     	ds	2
   427  00001B                     UART1_Read_Line@c:
   428                           	opt stack 0
   429  00001B                     add_sensors_data@formatted_sensor_data:
   430                           	opt stack 0
   431                           
   432                           ; 2 bytes @ 0x1A
   433  00001B                     	ds	2
   434  00001D                     ??_add_sensors_data:
   435                           
   436                           ; 0 bytes @ 0x1C
   437  00001D                     	ds	1
   438  00001E                     add_sensors_data@n:
   439                           	opt stack 0
   440                           
   441                           ; 2 bytes @ 0x1D
   442  00001E                     	ds	2
   443  000020                     add_sensors_data@j:
   444                           	opt stack 0
   445                           
   446                           ; 2 bytes @ 0x1F
   447  000020                     	ds	2
   448  000022                     add_sensors_data@count:
   449                           	opt stack 0
   450                           
   451                           ; 1 bytes @ 0x21
   452  000022                     	ds	1
   453  000023                     add_sensors_data@dst:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x22
   457  000023                     	ds	2
   458  000025                     add_sensors_data@tmp:
   459                           	opt stack 0
   460                           
   461                           ; 2 bytes @ 0x24
   462  000025                     	ds	2
   463                           tblptru	equ	0xFF8
   464                           tblptrh	equ	0xFF7
   465                           tblptrl	equ	0xFF6
   466                           tablat	equ	0xFF5
   467                           postinc0	equ	0xFEE
   468                           wreg	equ	0xFE8
   469                           postdec1	equ	0xFE5
   470                           fsr1l	equ	0xFE1
   471                           
   472 ;;
   473 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   474 ;;
   475 ;; *************** function _main *****************
   476 ;; Defined at:
   477 ;;		line 316 in file "arkeon.c"
   478 ;; Parameters:    Size  Location     Type
   479 ;;		None
   480 ;; Auto vars:     Size  Location     Type
   481 ;;  i               2   26[BANK0 ] short 
   482 ;;  count_bt_eve    2   23[BANK0 ] int 
   483 ;;  count_up        2   21[BANK0 ] short 
   484 ;;  inProcess       1   25[BANK0 ] unsigned char 
   485 ;; Return value:  Size  Location     Type
   486 ;;                  2  178[COMRAM] int 
   487 ;; Registers used:
   488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, cstack
   489 ;; Tracked objects:
   490 ;;		On entry : 0/0
   491 ;;		On exit  : 0/0
   492 ;;		Unchanged: 0/0
   493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   494 ;;      Params:         0       0       0       0       0       0       0
   495 ;;      Locals:         0       7       0       0       0       0       0
   496 ;;      Temps:          0       0       0       0       0       0       0
   497 ;;      Totals:         0       7       0       0       0       0       0
   498 ;;Total ram usage:        7 bytes
   499 ;; Hardware stack levels required when called:    8
   500 ;; This function calls:
   501 ;;		_UART2_Write_Line
   502 ;;		_intialize
   503 ;;		_send_sensor_cmd
   504 ;;		_soft_delay
   505 ;;		_strcat
   506 ;;		_strcpy
   507 ;; This function is called by:
   508 ;;		Startup code after reset
   509 ;; This function uses a non-reentrant model
   510 ;;
   511                           
   512                           	psect	text0
   513  0008A6                     __ptext0:
   514                           	opt stack 0
   515  0008A6                     _main:
   516                           	opt stack 22
   517                           
   518                           ;arkeon.c: 318: short i;
   519                           ;arkeon.c: 319: char inProcess = 1;
   520                           
   521                           ;incstack = 0
   522  0008A6  0E01               	movlw	1
   523  0008A8  0100               	movlb	0	; () banked
   524  0008AA  6FC9               	movwf	main@inProcess& (0+255),b
   525                           
   526                           ;arkeon.c: 320: short count_up = 0;
   527  0008AC  0E00               	movlw	0
   528  0008AE  0100               	movlb	0	; () banked
   529  0008B0  6FC6               	movwf	(main@count_up+1)& (0+255),b
   530  0008B2  0E00               	movlw	0
   531  0008B4  0100               	movlb	0	; () banked
   532  0008B6  6FC5               	movwf	main@count_up& (0+255),b
   533                           
   534                           ;arkeon.c: 322: int count_bt_events = 0;
   535  0008B8  0E00               	movlw	0
   536  0008BA  0100               	movlb	0	; () banked
   537  0008BC  6FC8               	movwf	(main@count_bt_events+1)& (0+255),b
   538  0008BE  0E00               	movlw	0
   539  0008C0  0100               	movlb	0	; () banked
   540  0008C2  6FC7               	movwf	main@count_bt_events& (0+255),b
   541                           
   542                           ;arkeon.c: 324: sensorIndex = i = 0;
   543  0008C4  0E00               	movlw	0
   544  0008C6  0100               	movlb	0	; () banked
   545  0008C8  6FCB               	movwf	(main@i+1)& (0+255),b
   546  0008CA  0E00               	movlw	0
   547  0008CC  0100               	movlb	0	; () banked
   548  0008CE  6FCA               	movwf	main@i& (0+255),b
   549  0008D0  C0CA  F02A         	movff	main@i,_sensorIndex
   550  0008D4  C0CB  F02B         	movff	main@i+1,_sensorIndex+1
   551                           
   552                           ; BSR set to: 0
   553                           ;arkeon.c: 326: intialize();
   554  0008D8  EC33  F005         	call	_intialize	;wreg free
   555                           
   556                           ;arkeon.c: 328: soft_delay(100);
   557  0008DC  0E00               	movlw	0
   558  0008DE  0100               	movlb	0	; () banked
   559  0008E0  6FC0               	movwf	(soft_delay@tt+1)& (0+255),b
   560  0008E2  0E64               	movlw	100
   561  0008E4  0100               	movlb	0	; () banked
   562  0008E6  6FBF               	movwf	soft_delay@tt& (0+255),b
   563  0008E8  ECFD  F005         	call	_soft_delay	;wreg free
   564                           
   565                           ;arkeon.c: 334: bt_event = 0;
   566  0008EC  0100               	movlb	(_bt_event/(0+8)) shr (0+8)
   567  0008EE  9040               	bcf	_bt_event/(0+8),_bt_event& (0+7),c	;volatile
   568                           
   569                           ;arkeon.c: 337: send_sensor_cmd(0);
   570  0008F0  0E00               	movlw	0
   571  0008F2  ECA2  F005         	call	_send_sensor_cmd
   572  0008F6                     l1704:
   573                           
   574                           ;arkeon.c: 340: {
   575                           ;arkeon.c: 384: if ( mux_event && (inProcess == 1) ) {
   576  0008F6  0100               	movlb	(_mux_event/(0+8)) shr (0+8)
   577  0008F8  A640               	btfss	_mux_event/(0+8),_mux_event& (0+7),c	;volatile
   578  0008FA  D7FD               	goto	l1704
   579  0008FC  0100               	movlb	0	; () banked
   580  0008FE  05C9               	decf	main@inProcess& (0+255),w,b
   581  000900  A4D8               	btfss	status,2,c
   582  000902  D7F9               	goto	l1704
   583                           
   584                           ; BSR set to: 0
   585                           ;arkeon.c: 386: mux_event = 0;
   586  000904  0100               	movlb	(_mux_event/(0+8)) shr (0+8)
   587  000906  9640               	bcf	_mux_event/(0+8),_mux_event& (0+7),c	;volatile
   588                           
   589                           ;arkeon.c: 419: i = (++i) % 2;
   590  000908  0100               	movlb	0	; () banked
   591  00090A  4BCA               	infsnz	main@i& (0+255),f,b
   592  00090C  2BCB               	incf	(main@i+1)& (0+255),f,b
   593  00090E  0E01               	movlw	1
   594  000910  0100               	movlb	0	; () banked
   595  000912  15CA               	andwf	main@i& (0+255),w,b
   596  000914  0100               	movlb	0	; () banked
   597  000916  6FCA               	movwf	main@i& (0+255),b
   598  000918  0100               	movlb	0	; () banked
   599  00091A  6BCB               	clrf	(main@i+1)& (0+255),b
   600                           
   601                           ;arkeon.c: 421: if ( i == 0 ) {
   602  00091C  0100               	movlb	0	; () banked
   603  00091E  51CB               	movf	(main@i+1)& (0+255),w,b
   604  000920  11CA               	iorwf	main@i& (0+255),w,b
   605  000922  A4D8               	btfss	status,2,c
   606  000924  D03E               	goto	l1720
   607                           
   608                           ; BSR set to: 0
   609                           ;arkeon.c: 422: strcpy(writeSensorString,"shw,001c,");
   610  000926  0101               	movlb	1	; () banked
   611  000928  0E01               	movlw	high _writeSensorString
   612  00092A  0100               	movlb	0	; () banked
   613  00092C  6FC0               	movwf	(strcpy@to+1)& (0+255),b
   614  00092E  0101               	movlb	1	; () banked
   615  000930  0E00               	movlw	low _writeSensorString
   616  000932  0100               	movlb	0	; () banked
   617  000934  6FBF               	movwf	strcpy@to& (0+255),b
   618  000936  0E06               	movlw	high STR_2
   619  000938  0100               	movlb	0	; () banked
   620  00093A  6FC2               	movwf	(strcpy@from+1)& (0+255),b
   621  00093C  0E01               	movlw	low STR_2
   622  00093E  0100               	movlb	0	; () banked
   623  000940  6FC1               	movwf	strcpy@from& (0+255),b
   624  000942  ECC2  F005         	call	_strcpy	;wreg free
   625                           
   626                           ;arkeon.c: 423: strcat(writeSensorString,sensorArray0);
   627  000946  0101               	movlb	1	; () banked
   628  000948  0E01               	movlw	high _writeSensorString
   629  00094A  0100               	movlb	0	; () banked
   630  00094C  6FC0               	movwf	(strcat@to+1)& (0+255),b
   631  00094E  0101               	movlb	1	; () banked
   632  000950  0E00               	movlw	low _writeSensorString
   633  000952  0100               	movlb	0	; () banked
   634  000954  6FBF               	movwf	strcat@to& (0+255),b
   635  000956  0100               	movlb	0	; () banked
   636  000958  0E00               	movlw	high _sensorArray0
   637  00095A  0100               	movlb	0	; () banked
   638  00095C  6FC2               	movwf	(strcat@from+1)& (0+255),b
   639  00095E  0100               	movlb	0	; () banked
   640  000960  0E74               	movlw	low _sensorArray0
   641  000962  0100               	movlb	0	; () banked
   642  000964  6FC1               	movwf	strcat@from& (0+255),b
   643  000966  EC5B  F005         	call	_strcat	;wreg free
   644                           
   645                           ;arkeon.c: 424: strcat(writeSensorString,sensorArray1);
   646  00096A  0101               	movlb	1	; () banked
   647  00096C  0E01               	movlw	high _writeSensorString
   648  00096E  0100               	movlb	0	; () banked
   649  000970  6FC0               	movwf	(strcat@to+1)& (0+255),b
   650  000972  0101               	movlb	1	; () banked
   651  000974  0E00               	movlw	low _writeSensorString
   652  000976  0100               	movlb	0	; () banked
   653  000978  6FBF               	movwf	strcat@to& (0+255),b
   654  00097A  0100               	movlb	0	; () banked
   655  00097C  0E00               	movlw	high _sensorArray1
   656  00097E  0100               	movlb	0	; () banked
   657  000980  6FC2               	movwf	(strcat@from+1)& (0+255),b
   658  000982  0100               	movlb	0	; () banked
   659  000984  0E88               	movlw	low _sensorArray1
   660  000986  0100               	movlb	0	; () banked
   661  000988  6FC1               	movwf	strcat@from& (0+255),b
   662  00098A  EC5B  F005         	call	_strcat	;wreg free
   663                           
   664                           ;arkeon.c: 426: UART2_Write_Line((char *)writeSensorString);
   665  00098E  0101               	movlb	1	; () banked
   666  000990  0E01               	movlw	high _writeSensorString
   667  000992  0100               	movlb	0	; () banked
   668  000994  6FC3               	movwf	(UART2_Write_Line@s+1)& (0+255),b
   669  000996  0101               	movlb	1	; () banked
   670  000998  0E00               	movlw	low _writeSensorString
   671  00099A  0100               	movlb	0	; () banked
   672  00099C  6FC2               	movwf	UART2_Write_Line@s& (0+255),b
   673  00099E  EC73  F006         	call	_UART2_Write_Line	;wreg free
   674  0009A2                     l1720:
   675                           
   676                           ;arkeon.c: 427: }
   677                           ;arkeon.c: 429: sensorIndex = i;
   678  0009A2  C0CA  F02A         	movff	main@i,_sensorIndex
   679  0009A6  C0CB  F02B         	movff	main@i+1,_sensorIndex+1
   680                           
   681                           ;arkeon.c: 430: send_sensor_cmd(sensorIndex);
   682  0009AA  502A               	movf	_sensorIndex,w,c
   683  0009AC  ECA2  F005         	call	_send_sensor_cmd
   684  0009B0  D7A2               	goto	l1704
   685  0009B2                     __end_of_main:
   686                           	opt stack 0
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           tblptrl	equ	0xFF6
   690                           tablat	equ	0xFF5
   691                           postinc0	equ	0xFEE
   692                           wreg	equ	0xFE8
   693                           postdec1	equ	0xFE5
   694                           fsr1l	equ	0xFE1
   695                           status	equ	0xFD8
   696                           
   697 ;; *************** function _strcpy *****************
   698 ;; Defined at:
   699 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/strcpy.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;  to              2   15[BANK0 ] PTR unsigned char 
   702 ;;		 -> writeSensorString(80), 
   703 ;;  from            2   17[BANK0 ] PTR const unsigned char 
   704 ;;		 -> STR_2(10), 
   705 ;; Auto vars:     Size  Location     Type
   706 ;;  cp              2   19[BANK0 ] PTR unsigned char 
   707 ;;		 -> writeSensorString(80), 
   708 ;; Return value:  Size  Location     Type
   709 ;;                  2   15[BANK0 ] PTR unsigned char 
   710 ;; Registers used:
   711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   717 ;;      Params:         0       4       0       0       0       0       0
   718 ;;      Locals:         0       2       0       0       0       0       0
   719 ;;      Temps:          0       0       0       0       0       0       0
   720 ;;      Totals:         0       6       0       0       0       0       0
   721 ;;Total ram usage:        6 bytes
   722 ;; Hardware stack levels used:    1
   723 ;; Hardware stack levels required when called:    5
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		_main
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text1
   732  000B84                     __ptext1:
   733                           	opt stack 0
   734  000B84                     _strcpy:
   735                           	opt stack 24
   736                           
   737                           ;incstack = 0
   738  000B84  0100               	movlb	0	; () banked
   739  000B86  C0C0  F0C4         	movff	strcpy@to+1,strcpy@cp+1
   740  000B8A  0100               	movlb	0	; () banked
   741  000B8C  C0BF  F0C3         	movff	strcpy@to,strcpy@cp
   742  000B90  D006               	goto	l1602
   743  000B92                     l1600:
   744                           
   745                           ; BSR set to: 0
   746  000B92  0100               	movlb	0	; () banked
   747  000B94  4BC3               	infsnz	strcpy@cp& (0+255),f,b
   748  000B96  2BC4               	incf	(strcpy@cp+1)& (0+255),f,b
   749  000B98  0100               	movlb	0	; () banked
   750  000B9A  4BC1               	infsnz	strcpy@from& (0+255),f,b
   751  000B9C  2BC2               	incf	(strcpy@from+1)& (0+255),f,b
   752  000B9E                     l1602:
   753                           
   754                           ; BSR set to: 0
   755  000B9E  0100               	movlb	0	; () banked
   756  000BA0  C0C1  FFF6         	movff	strcpy@from,tblptrl
   757  000BA4  0100               	movlb	0	; () banked
   758  000BA6  C0C2  FFF7         	movff	strcpy@from+1,tblptrh
   759  000BAA                     	if	0	;tblptru may be non-zero
   760  000BAA                     	endif
   761  000BAA                     	if	0	;tblptru may be non-zero
   762  000BAA                     	endif
   763  000BAA  C0C3  FFD9         	movff	strcpy@cp,fsr2l
   764  000BAE  C0C4  FFDA         	movff	strcpy@cp+1,fsr2h
   765  000BB2  0008               	tblrd		*
   766  000BB4  CFF5 FFDF          	movff	tablat,indf2
   767  000BB8  50DF               	movf	indf2,w,c
   768  000BBA  B4D8               	btfsc	status,2,c
   769                           
   770                           ; BSR set to: 0
   771                           
   772                           ; BSR set to: 0
   773                           ;	Return value of _strcpy is never used
   774  000BBC  0012               	return	
   775  000BBE  D7E9               	goto	l1600
   776  000BC0                     __end_of_strcpy:
   777                           	opt stack 0
   778                           tblptru	equ	0xFF8
   779                           tblptrh	equ	0xFF7
   780                           tblptrl	equ	0xFF6
   781                           tablat	equ	0xFF5
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           postdec1	equ	0xFE5
   785                           fsr1l	equ	0xFE1
   786                           indf2	equ	0xFDF
   787                           fsr2h	equ	0xFDA
   788                           fsr2l	equ	0xFD9
   789                           status	equ	0xFD8
   790                           
   791 ;; *************** function _strcat *****************
   792 ;; Defined at:
   793 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/strcat.c"
   794 ;; Parameters:    Size  Location     Type
   795 ;;  to              2   15[BANK0 ] PTR unsigned char 
   796 ;;		 -> writeSensorString(80), 
   797 ;;  from            2   17[BANK0 ] PTR const unsigned char 
   798 ;;		 -> sensorArray1(20), sensorArray0(20), 
   799 ;; Auto vars:     Size  Location     Type
   800 ;;  cp              2   19[BANK0 ] PTR unsigned char 
   801 ;;		 -> writeSensorString(80), 
   802 ;; Return value:  Size  Location     Type
   803 ;;                  2   15[BANK0 ] PTR unsigned char 
   804 ;; Registers used:
   805 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
   806 ;; Tracked objects:
   807 ;;		On entry : 0/0
   808 ;;		On exit  : 0/0
   809 ;;		Unchanged: 0/0
   810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   811 ;;      Params:         0       4       0       0       0       0       0
   812 ;;      Locals:         0       2       0       0       0       0       0
   813 ;;      Temps:          0       0       0       0       0       0       0
   814 ;;      Totals:         0       6       0       0       0       0       0
   815 ;;Total ram usage:        6 bytes
   816 ;; Hardware stack levels used:    1
   817 ;; Hardware stack levels required when called:    5
   818 ;; This function calls:
   819 ;;		Nothing
   820 ;; This function is called by:
   821 ;;		_main
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825                           	psect	text2
   826  000AB6                     __ptext2:
   827                           	opt stack 0
   828  000AB6                     _strcat:
   829                           	opt stack 24
   830                           
   831                           ; BSR set to: 0
   832                           ;incstack = 0
   833  000AB6  0100               	movlb	0	; () banked
   834  000AB8  C0C0  F0C4         	movff	strcat@to+1,strcat@cp+1
   835  000ABC  0100               	movlb	0	; () banked
   836  000ABE  C0BF  F0C3         	movff	strcat@to,strcat@cp
   837  000AC2  D003               	goto	l1608
   838  000AC4                     l1606:
   839                           
   840                           ; BSR set to: 0
   841  000AC4  0100               	movlb	0	; () banked
   842  000AC6  4BC3               	infsnz	strcat@cp& (0+255),f,b
   843  000AC8  2BC4               	incf	(strcat@cp+1)& (0+255),f,b
   844  000ACA                     l1608:
   845                           
   846                           ; BSR set to: 0
   847  000ACA  C0C3  FFD9         	movff	strcat@cp,fsr2l
   848  000ACE  C0C4  FFDA         	movff	strcat@cp+1,fsr2h
   849  000AD2  50DF               	movf	indf2,w,c
   850  000AD4  B4D8               	btfsc	status,2,c
   851  000AD6  D007               	goto	l1612
   852  000AD8  D7F5               	goto	l1606
   853  000ADA                     l1610:
   854                           
   855                           ; BSR set to: 0
   856  000ADA  0100               	movlb	0	; () banked
   857  000ADC  4BC3               	infsnz	strcat@cp& (0+255),f,b
   858  000ADE  2BC4               	incf	(strcat@cp+1)& (0+255),f,b
   859  000AE0  0100               	movlb	0	; () banked
   860  000AE2  4BC1               	infsnz	strcat@from& (0+255),f,b
   861  000AE4  2BC2               	incf	(strcat@from+1)& (0+255),f,b
   862  000AE6                     l1612:
   863                           
   864                           ; BSR set to: 0
   865  000AE6  C0C1  FFD9         	movff	strcat@from,fsr2l
   866  000AEA  C0C2  FFDA         	movff	strcat@from+1,fsr2h
   867  000AEE  C0C3  FFE1         	movff	strcat@cp,fsr1l
   868  000AF2  C0C4  FFE2         	movff	strcat@cp+1,fsr1h
   869  000AF6  CFDF FFE7          	movff	indf2,indf1
   870  000AFA  50E7               	movf	indf1,w,c
   871  000AFC  B4D8               	btfsc	status,2,c
   872                           
   873                           ; BSR set to: 0
   874                           
   875                           ; BSR set to: 0
   876                           ;	Return value of _strcat is never used
   877  000AFE  0012               	return	
   878  000B00  D7EC               	goto	l1610
   879  000B02                     __end_of_strcat:
   880                           	opt stack 0
   881                           tblptru	equ	0xFF8
   882                           tblptrh	equ	0xFF7
   883                           tblptrl	equ	0xFF6
   884                           tablat	equ	0xFF5
   885                           postinc0	equ	0xFEE
   886                           wreg	equ	0xFE8
   887                           indf1	equ	0xFE7
   888                           postdec1	equ	0xFE5
   889                           fsr1h	equ	0xFE2
   890                           fsr1l	equ	0xFE1
   891                           indf2	equ	0xFDF
   892                           fsr2h	equ	0xFDA
   893                           fsr2l	equ	0xFD9
   894                           status	equ	0xFD8
   895                           
   896 ;; *************** function _send_sensor_cmd *****************
   897 ;; Defined at:
   898 ;;		line 228 in file "arkeon.c"
   899 ;; Parameters:    Size  Location     Type
   900 ;;  sensor_index    1    wreg     unsigned char 
   901 ;; Auto vars:     Size  Location     Type
   902 ;;  sensor_index    1   19[BANK0 ] unsigned char 
   903 ;; Return value:  Size  Location     Type
   904 ;;		None               void
   905 ;; Registers used:
   906 ;;		wreg, status,2, status,0, prodl, cstack
   907 ;; Tracked objects:
   908 ;;		On entry : 0/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   912 ;;      Params:         0       0       0       0       0       0       0
   913 ;;      Locals:         0       1       0       0       0       0       0
   914 ;;      Temps:          0       0       0       0       0       0       0
   915 ;;      Totals:         0       1       0       0       0       0       0
   916 ;;Total ram usage:        1 bytes
   917 ;; Hardware stack levels used:    1
   918 ;; Hardware stack levels required when called:    6
   919 ;; This function calls:
   920 ;;		_MUXchannel
   921 ;;		_UART1_Write_Char
   922 ;;		_soft_delay
   923 ;; This function is called by:
   924 ;;		_main
   925 ;; This function uses a non-reentrant model
   926 ;;
   927                           
   928                           	psect	text3
   929  000B44                     __ptext3:
   930                           	opt stack 0
   931  000B44                     _send_sensor_cmd:
   932                           	opt stack 23
   933                           
   934                           ; BSR set to: 0
   935                           ;incstack = 0
   936                           ;send_sensor_cmd@sensor_index stored from wreg
   937  000B44  0100               	movlb	0	; () banked
   938  000B46  6FC3               	movwf	send_sensor_cmd@sensor_index& (0+255),b
   939                           
   940                           ; BSR set to: 0
   941                           ;arkeon.c: 229: MUXchannel(sensor_index);
   942  000B48  0100               	movlb	0	; () banked
   943  000B4A  C0C3  F0BF         	movff	send_sensor_cmd@sensor_index,MUXchannel@channel
   944  000B4E  0100               	movlb	0	; () banked
   945  000B50  6BC0               	clrf	(MUXchannel@channel+1)& (0+255),b
   946  000B52  EC81  F005         	call	_MUXchannel	;wreg free
   947                           
   948                           ;arkeon.c: 230: soft_delay(1000);
   949  000B56  0E03               	movlw	3
   950  000B58  0100               	movlb	0	; () banked
   951  000B5A  6FC0               	movwf	(soft_delay@tt+1)& (0+255),b
   952  000B5C  0EE8               	movlw	232
   953  000B5E  0100               	movlb	0	; () banked
   954  000B60  6FBF               	movwf	soft_delay@tt& (0+255),b
   955  000B62  ECFD  F005         	call	_soft_delay	;wreg free
   956                           
   957                           ;arkeon.c: 231: UART1_Write_Char('R');
   958  000B66  0E52               	movlw	82
   959  000B68  EC88  F006         	call	_UART1_Write_Char
   960                           
   961                           ;arkeon.c: 232: UART1_Write_Char(13);
   962  000B6C  0E0D               	movlw	13
   963  000B6E  EC88  F006         	call	_UART1_Write_Char
   964                           
   965                           ;arkeon.c: 233: soft_delay(1000);
   966  000B72  0E03               	movlw	3
   967  000B74  0100               	movlb	0	; () banked
   968  000B76  6FC0               	movwf	(soft_delay@tt+1)& (0+255),b
   969  000B78  0EE8               	movlw	232
   970  000B7A  0100               	movlb	0	; () banked
   971  000B7C  6FBF               	movwf	soft_delay@tt& (0+255),b
   972  000B7E  ECFD  F005         	call	_soft_delay	;wreg free
   973  000B82  0012               	return	
   974  000B84                     __end_of_send_sensor_cmd:
   975                           	opt stack 0
   976                           tblptru	equ	0xFF8
   977                           tblptrh	equ	0xFF7
   978                           tblptrl	equ	0xFF6
   979                           tablat	equ	0xFF5
   980                           postinc0	equ	0xFEE
   981                           wreg	equ	0xFE8
   982                           indf1	equ	0xFE7
   983                           postdec1	equ	0xFE5
   984                           fsr1h	equ	0xFE2
   985                           fsr1l	equ	0xFE1
   986                           indf2	equ	0xFDF
   987                           fsr2h	equ	0xFDA
   988                           fsr2l	equ	0xFD9
   989                           status	equ	0xFD8
   990                           
   991 ;; *************** function _UART1_Write_Char *****************
   992 ;; Defined at:
   993 ;;		line 122 in file "putgetc.c"
   994 ;; Parameters:    Size  Location     Type
   995 ;;  data            1    wreg     unsigned char 
   996 ;; Auto vars:     Size  Location     Type
   997 ;;  data            1   15[BANK0 ] unsigned char 
   998 ;; Return value:  Size  Location     Type
   999 ;;		None               void
  1000 ;; Registers used:
  1001 ;;		wreg
  1002 ;; Tracked objects:
  1003 ;;		On entry : 0/0
  1004 ;;		On exit  : 0/0
  1005 ;;		Unchanged: 0/0
  1006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1007 ;;      Params:         0       0       0       0       0       0       0
  1008 ;;      Locals:         0       1       0       0       0       0       0
  1009 ;;      Temps:          0       0       0       0       0       0       0
  1010 ;;      Totals:         0       1       0       0       0       0       0
  1011 ;;Total ram usage:        1 bytes
  1012 ;; Hardware stack levels used:    1
  1013 ;; Hardware stack levels required when called:    5
  1014 ;; This function calls:
  1015 ;;		Nothing
  1016 ;; This function is called by:
  1017 ;;		_send_sensor_cmd
  1018 ;;		_check_for_sensors
  1019 ;;		_UART1_Write_String
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           	psect	text4
  1024  000D10                     __ptext4:
  1025                           	opt stack 0
  1026  000D10                     _UART1_Write_Char:
  1027                           	opt stack 23
  1028                           
  1029                           ;incstack = 0
  1030                           ;UART1_Write_Char@data stored from wreg
  1031  000D10  0100               	movlb	0	; () banked
  1032  000D12  6FBF               	movwf	UART1_Write_Char@data& (0+255),b
  1033  000D14                     l266:
  1034  000D14  A2AC               	btfss	4012,1,c	;volatile
  1035  000D16  D7FE               	goto	l266
  1036                           
  1037                           ;putgetc.c: 125: TXREG1 = data;
  1038  000D18  C0BF  FFAD         	movff	UART1_Write_Char@data,4013	;volatile
  1039  000D1C  0012               	return	
  1040  000D1E                     __end_of_UART1_Write_Char:
  1041                           	opt stack 0
  1042                           tblptru	equ	0xFF8
  1043                           tblptrh	equ	0xFF7
  1044                           tblptrl	equ	0xFF6
  1045                           tablat	equ	0xFF5
  1046                           postinc0	equ	0xFEE
  1047                           wreg	equ	0xFE8
  1048                           indf1	equ	0xFE7
  1049                           postdec1	equ	0xFE5
  1050                           fsr1h	equ	0xFE2
  1051                           fsr1l	equ	0xFE1
  1052                           indf2	equ	0xFDF
  1053                           fsr2h	equ	0xFDA
  1054                           fsr2l	equ	0xFD9
  1055                           status	equ	0xFD8
  1056                           
  1057 ;; *************** function _MUXchannel *****************
  1058 ;; Defined at:
  1059 ;;		line 160 in file "arkeon.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;  channel         2   15[BANK0 ] unsigned int 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;		None
  1064 ;; Return value:  Size  Location     Type
  1065 ;;		None               void
  1066 ;; Registers used:
  1067 ;;		wreg, status,2, status,0
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1073 ;;      Params:         0       2       0       0       0       0       0
  1074 ;;      Locals:         0       0       0       0       0       0       0
  1075 ;;      Temps:          0       2       0       0       0       0       0
  1076 ;;      Totals:         0       4       0       0       0       0       0
  1077 ;;Total ram usage:        4 bytes
  1078 ;; Hardware stack levels used:    1
  1079 ;; Hardware stack levels required when called:    5
  1080 ;; This function calls:
  1081 ;;		Nothing
  1082 ;; This function is called by:
  1083 ;;		_send_sensor_cmd
  1084 ;;		_check_for_sensors
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text5
  1089  000B02                     __ptext5:
  1090                           	opt stack 0
  1091  000B02                     _MUXchannel:
  1092                           	opt stack 23
  1093                           
  1094                           ;arkeon.c: 162: switch ( channel ) {
  1095                           
  1096                           ;incstack = 0
  1097  000B02  D009               	goto	l1424
  1098  000B04                     l136:
  1099                           
  1100                           ; BSR set to: 0
  1101                           ;arkeon.c: 164: LATAbits.LATA6 = 0;
  1102  000B04  9C89               	bcf	3977,6,c	;volatile
  1103                           
  1104                           ;arkeon.c: 165: LATCbits.LATC0 = 0;
  1105  000B06  908B               	bcf	3979,0,c	;volatile
  1106                           
  1107                           ;arkeon.c: 166: break;
  1108  000B08  0012               	return	
  1109  000B0A                     l138:
  1110                           
  1111                           ; BSR set to: 0
  1112                           ;arkeon.c: 169: LATAbits.LATA6 = 0;
  1113  000B0A  9C89               	bcf	3977,6,c	;volatile
  1114                           
  1115                           ;arkeon.c: 170: LATCbits.LATC0 = 1;
  1116  000B0C  808B               	bsf	3979,0,c	;volatile
  1117                           
  1118                           ;arkeon.c: 171: break;
  1119  000B0E  0012               	return	
  1120  000B10                     l139:
  1121                           
  1122                           ; BSR set to: 0
  1123                           ;arkeon.c: 174: LATAbits.LATA6 = 1;
  1124  000B10  8C89               	bsf	3977,6,c	;volatile
  1125                           
  1126                           ;arkeon.c: 175: LATCbits.LATC0 = 1;
  1127  000B12  808B               	bsf	3979,0,c	;volatile
  1128                           
  1129                           ;arkeon.c: 176: break;
  1130  000B14  0012               	return	
  1131  000B16                     l1424:
  1132  000B16  0100               	movlb	0	; () banked
  1133  000B18  C0BF  F0C1         	movff	MUXchannel@channel,??_MUXchannel
  1134  000B1C  0100               	movlb	0	; () banked
  1135  000B1E  C0C0  F0C2         	movff	MUXchannel@channel+1,??_MUXchannel+1
  1136                           
  1137                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1138                           ; Switch size 1, requested type "space"
  1139                           ; Number of cases is 1, Range of values is 0 to 0
  1140                           ; switch strategies available:
  1141                           ; Name         Instructions Cycles
  1142                           ; simple_byte            4     3 (average)
  1143                           ;	Chosen strategy is simple_byte
  1144  000B22  0100               	movlb	0	; () banked
  1145  000B24  51C2               	movf	(??_MUXchannel+1)& (0+255),w,b
  1146  000B26  0A00               	xorlw	0	; case 0
  1147  000B28  A4D8               	btfss	status,2,c
  1148  000B2A  0012               	return	
  1149                           
  1150                           ; BSR set to: 0
  1151                           ; Switch size 1, requested type "space"
  1152                           ; Number of cases is 3, Range of values is 0 to 2
  1153                           ; switch strategies available:
  1154                           ; Name         Instructions Cycles
  1155                           ; simple_byte           10     6 (average)
  1156                           ;	Chosen strategy is simple_byte
  1157  000B2C  0100               	movlb	0	; () banked
  1158  000B2E  51C1               	movf	??_MUXchannel& (0+255),w,b
  1159  000B30  0A00               	xorlw	0	; case 0
  1160  000B32  B4D8               	btfsc	status,2,c
  1161  000B34  D7E7               	goto	l136
  1162  000B36  0A01               	xorlw	1	; case 1
  1163  000B38  B4D8               	btfsc	status,2,c
  1164  000B3A  D7E7               	goto	l138
  1165  000B3C  0A03               	xorlw	3	; case 2
  1166  000B3E  A4D8               	btfss	status,2,c
  1167  000B40  0012               	return	
  1168  000B42  D7E6               	goto	l139
  1169  000B44                     __end_of_MUXchannel:
  1170                           	opt stack 0
  1171                           tblptru	equ	0xFF8
  1172                           tblptrh	equ	0xFF7
  1173                           tblptrl	equ	0xFF6
  1174                           tablat	equ	0xFF5
  1175                           postinc0	equ	0xFEE
  1176                           wreg	equ	0xFE8
  1177                           indf1	equ	0xFE7
  1178                           postdec1	equ	0xFE5
  1179                           fsr1h	equ	0xFE2
  1180                           fsr1l	equ	0xFE1
  1181                           indf2	equ	0xFDF
  1182                           fsr2h	equ	0xFDA
  1183                           fsr2l	equ	0xFD9
  1184                           status	equ	0xFD8
  1185                           
  1186 ;; *************** function _intialize *****************
  1187 ;; Defined at:
  1188 ;;		line 273 in file "arkeon.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;		None
  1193 ;; Return value:  Size  Location     Type
  1194 ;;		None               void
  1195 ;; Registers used:
  1196 ;;		wreg, status,2, status,0, prodl, cstack
  1197 ;; Tracked objects:
  1198 ;;		On entry : 0/0
  1199 ;;		On exit  : 0/0
  1200 ;;		Unchanged: 0/0
  1201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1202 ;;      Params:         0       0       0       0       0       0       0
  1203 ;;      Locals:         0       0       0       0       0       0       0
  1204 ;;      Temps:          0       0       0       0       0       0       0
  1205 ;;      Totals:         0       0       0       0       0       0       0
  1206 ;;Total ram usage:        0 bytes
  1207 ;; Hardware stack levels used:    1
  1208 ;; Hardware stack levels required when called:    6
  1209 ;; This function calls:
  1210 ;;		_USART1_init
  1211 ;;		_interrupt_init
  1212 ;;		_soft_delay
  1213 ;; This function is called by:
  1214 ;;		_main
  1215 ;; This function uses a non-reentrant model
  1216 ;;
  1217                           
  1218                           	psect	text6
  1219  000A66                     __ptext6:
  1220                           	opt stack 0
  1221  000A66                     _intialize:
  1222                           	opt stack 23
  1223                           
  1224                           ;arkeon.c: 276: bt_event = 0;
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;incstack = 0
  1228  000A66  0100               	movlb	(_bt_event/(0+8)) shr (0+8)
  1229  000A68  9040               	bcf	_bt_event/(0+8),_bt_event& (0+7),c	;volatile
  1230                           
  1231                           ;arkeon.c: 277: mux_event = 0;
  1232  000A6A  0100               	movlb	(_mux_event/(0+8)) shr (0+8)
  1233  000A6C  9640               	bcf	_mux_event/(0+8),_mux_event& (0+7),c	;volatile
  1234                           
  1235                           ;arkeon.c: 278: mux_error = 0;
  1236  000A6E  0100               	movlb	(_mux_error/(0+8)) shr (0+8)
  1237  000A70  9440               	bcf	_mux_error/(0+8),_mux_error& (0+7),c	;volatile
  1238                           
  1239                           ;arkeon.c: 286: OSCCON = 0xF0;
  1240  000A72  0EF0               	movlw	240
  1241  000A74  6ED3               	movwf	4051,c	;volatile
  1242                           
  1243                           ;arkeon.c: 287: OSCTUNEbits.PLLEN = 1;
  1244  000A76  8C9B               	bsf	3995,6,c	;volatile
  1245                           
  1246                           ;arkeon.c: 290: ANSELA = 0;
  1247  000A78  0E00               	movlw	0
  1248  000A7A  010F               	movlb	15	; () banked
  1249  000A7C  6F38               	movwf	56,b	;volatile
  1250                           
  1251                           ;arkeon.c: 291: ANSELC = 0;
  1252  000A7E  0E00               	movlw	0
  1253  000A80  010F               	movlb	15	; () banked
  1254  000A82  6F3A               	movwf	58,b	;volatile
  1255                           
  1256                           ;arkeon.c: 294: PORTA = 0;
  1257  000A84  0E00               	movlw	0
  1258  000A86  6E80               	movwf	3968,c	;volatile
  1259                           
  1260                           ;arkeon.c: 295: PORTB = 0;
  1261  000A88  0E00               	movlw	0
  1262  000A8A  6E81               	movwf	3969,c	;volatile
  1263                           
  1264                           ;arkeon.c: 296: PORTC = 0;
  1265  000A8C  0E00               	movlw	0
  1266  000A8E  6E82               	movwf	3970,c	;volatile
  1267                           
  1268                           ; BSR set to: 15
  1269                           ;arkeon.c: 299: TRISAbits.TRISA1 = 0;
  1270  000A90  9292               	bcf	3986,1,c	;volatile
  1271                           
  1272                           ; BSR set to: 15
  1273                           ;arkeon.c: 300: TRISAbits.TRISA2 = 0;
  1274  000A92  9492               	bcf	3986,2,c	;volatile
  1275                           
  1276                           ; BSR set to: 15
  1277                           ;arkeon.c: 301: LATAbits.LATA1 = 1;
  1278  000A94  8289               	bsf	3977,1,c	;volatile
  1279                           
  1280                           ; BSR set to: 15
  1281                           ;arkeon.c: 302: LATAbits.LATA2 = 0;
  1282  000A96  9489               	bcf	3977,2,c	;volatile
  1283                           
  1284                           ; BSR set to: 15
  1285                           ;arkeon.c: 305: TRISAbits.TRISA6 = 0;
  1286  000A98  9C92               	bcf	3986,6,c	;volatile
  1287                           
  1288                           ; BSR set to: 15
  1289                           ;arkeon.c: 306: TRISCbits.TRISC0 = 0;
  1290  000A9A  9094               	bcf	3988,0,c	;volatile
  1291                           
  1292                           ; BSR set to: 15
  1293                           ;arkeon.c: 308: interrupt_init();
  1294  000A9C  EC96  F006         	call	_interrupt_init	;wreg free
  1295                           
  1296                           ;arkeon.c: 310: USART1_init();
  1297  000AA0  EC2E  F006         	call	_USART1_init	;wreg free
  1298                           
  1299                           ;arkeon.c: 311: soft_delay(1000);
  1300  000AA4  0E03               	movlw	3
  1301  000AA6  0100               	movlb	0	; () banked
  1302  000AA8  6FC0               	movwf	(soft_delay@tt+1)& (0+255),b
  1303  000AAA  0EE8               	movlw	232
  1304  000AAC  0100               	movlb	0	; () banked
  1305  000AAE  6FBF               	movwf	soft_delay@tt& (0+255),b
  1306  000AB0  ECFD  F005         	call	_soft_delay	;wreg free
  1307  000AB4  0012               	return	
  1308  000AB6                     __end_of_intialize:
  1309                           	opt stack 0
  1310                           tblptru	equ	0xFF8
  1311                           tblptrh	equ	0xFF7
  1312                           tblptrl	equ	0xFF6
  1313                           tablat	equ	0xFF5
  1314                           postinc0	equ	0xFEE
  1315                           wreg	equ	0xFE8
  1316                           indf1	equ	0xFE7
  1317                           postdec1	equ	0xFE5
  1318                           fsr1h	equ	0xFE2
  1319                           fsr1l	equ	0xFE1
  1320                           indf2	equ	0xFDF
  1321                           fsr2h	equ	0xFDA
  1322                           fsr2l	equ	0xFD9
  1323                           status	equ	0xFD8
  1324                           
  1325 ;; *************** function _soft_delay *****************
  1326 ;; Defined at:
  1327 ;;		line 194 in file "arkeon.c"
  1328 ;; Parameters:    Size  Location     Type
  1329 ;;  tt              2   15[BANK0 ] short 
  1330 ;; Auto vars:     Size  Location     Type
  1331 ;;		None
  1332 ;; Return value:  Size  Location     Type
  1333 ;;		None               void
  1334 ;; Registers used:
  1335 ;;		wreg, status,2, status,0, prodl
  1336 ;; Tracked objects:
  1337 ;;		On entry : 0/0
  1338 ;;		On exit  : 0/0
  1339 ;;		Unchanged: 0/0
  1340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1341 ;;      Params:         0       2       0       0       0       0       0
  1342 ;;      Locals:         0       0       0       0       0       0       0
  1343 ;;      Temps:          0       1       0       0       0       0       0
  1344 ;;      Totals:         0       3       0       0       0       0       0
  1345 ;;Total ram usage:        3 bytes
  1346 ;; Hardware stack levels used:    1
  1347 ;; Hardware stack levels required when called:    5
  1348 ;; This function calls:
  1349 ;;		Nothing
  1350 ;; This function is called by:
  1351 ;;		_send_sensor_cmd
  1352 ;;		_intialize
  1353 ;;		_main
  1354 ;;		_check_for_sensors
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357                           
  1358                           	psect	text7
  1359  000BFA                     __ptext7:
  1360                           	opt stack 0
  1361  000BFA                     _soft_delay:
  1362                           	opt stack 24
  1363                           
  1364                           ;arkeon.c: 196: while ( tt > 0 ) {
  1365                           
  1366                           ;incstack = 0
  1367  000BFA  D00F               	goto	l1440
  1368  000BFC                     l1436:
  1369                           
  1370                           ;arkeon.c: 197: _delay((unsigned long)((25)*(16000000/4000.0)));
  1371  000BFC  0E82               	movlw	130
  1372  000BFE  0100               	movlb	0	; () banked
  1373  000C00  6FC1               	movwf	??_soft_delay& (0+255),b
  1374  000C02  0EDE               	movlw	222
  1375  000C04                     u1147:
  1376  000C04  2EE8               	decfsz	wreg,f,c
  1377  000C06  D7FE               	goto	u1147
  1378  000C08  2FC1               	decfsz	??_soft_delay& (0+255),f,b
  1379  000C0A  D7FC               	goto	u1147
  1380                           
  1381                           ;arkeon.c: 198: tt -= 25;
  1382  000C0C  0100               	movlb	0	; () banked
  1383  000C0E  0EE7               	movlw	231
  1384  000C10  0100               	movlb	0	; () banked
  1385  000C12  27BF               	addwf	soft_delay@tt& (0+255),f,b
  1386  000C14  0EFF               	movlw	255
  1387  000C16  0100               	movlb	0	; () banked
  1388  000C18  23C0               	addwfc	(soft_delay@tt+1)& (0+255),f,b
  1389  000C1A                     l1440:
  1390  000C1A  0100               	movlb	0	; () banked
  1391  000C1C  51C0               	movf	(soft_delay@tt+1)& (0+255),w,b
  1392  000C1E  0A80               	xorlw	128
  1393  000C20  6EF3               	movwf	prodl,c
  1394  000C22  0E80               	movlw	128
  1395  000C24  5CF3               	subwf	prodl,w,c
  1396  000C26  0E01               	movlw	1
  1397  000C28  B4D8               	btfsc	status,2,c
  1398  000C2A  5DBF               	subwf	soft_delay@tt& (0+255),w,b
  1399  000C2C  A0D8               	btfss	status,0,c
  1400                           
  1401                           ; BSR set to: 0
  1402                           
  1403                           ; BSR set to: 0
  1404  000C2E  0012               	return	
  1405  000C30  D7E5               	goto	l1436
  1406  000C32                     __end_of_soft_delay:
  1407                           	opt stack 0
  1408                           tblptru	equ	0xFF8
  1409                           tblptrh	equ	0xFF7
  1410                           tblptrl	equ	0xFF6
  1411                           tablat	equ	0xFF5
  1412                           prodl	equ	0xFF3
  1413                           postinc0	equ	0xFEE
  1414                           wreg	equ	0xFE8
  1415                           indf1	equ	0xFE7
  1416                           postdec1	equ	0xFE5
  1417                           fsr1h	equ	0xFE2
  1418                           fsr1l	equ	0xFE1
  1419                           indf2	equ	0xFDF
  1420                           fsr2h	equ	0xFDA
  1421                           fsr2l	equ	0xFD9
  1422                           status	equ	0xFD8
  1423                           
  1424 ;; *************** function _interrupt_init *****************
  1425 ;; Defined at:
  1426 ;;		line 182 in file "arkeon.c"
  1427 ;; Parameters:    Size  Location     Type
  1428 ;;		None
  1429 ;; Auto vars:     Size  Location     Type
  1430 ;;		None
  1431 ;; Return value:  Size  Location     Type
  1432 ;;		None               void
  1433 ;; Registers used:
  1434 ;;		None
  1435 ;; Tracked objects:
  1436 ;;		On entry : 0/0
  1437 ;;		On exit  : 0/0
  1438 ;;		Unchanged: 0/0
  1439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1440 ;;      Params:         0       0       0       0       0       0       0
  1441 ;;      Locals:         0       0       0       0       0       0       0
  1442 ;;      Temps:          0       0       0       0       0       0       0
  1443 ;;      Totals:         0       0       0       0       0       0       0
  1444 ;;Total ram usage:        0 bytes
  1445 ;; Hardware stack levels used:    1
  1446 ;; Hardware stack levels required when called:    5
  1447 ;; This function calls:
  1448 ;;		Nothing
  1449 ;; This function is called by:
  1450 ;;		_intialize
  1451 ;; This function uses a non-reentrant model
  1452 ;;
  1453                           
  1454                           	psect	text8
  1455  000D2C                     __ptext8:
  1456                           	opt stack 0
  1457  000D2C                     _interrupt_init:
  1458                           	opt stack 23
  1459                           
  1460                           ;arkeon.c: 185: RCONbits.IPEN = 1;
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;incstack = 0
  1464  000D2C  8ED0               	bsf	4048,7,c	;volatile
  1465                           
  1466                           ;arkeon.c: 186: INTCONbits.GIEH = 1;
  1467  000D2E  8EF2               	bsf	intcon,7,c	;volatile
  1468                           
  1469                           ;arkeon.c: 187: INTCONbits.GIEL = 1;
  1470  000D30  8CF2               	bsf	intcon,6,c	;volatile
  1471  000D32  0012               	return	
  1472  000D34                     __end_of_interrupt_init:
  1473                           	opt stack 0
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           prodl	equ	0xFF3
  1479                           intcon	equ	0xFF2
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           indf1	equ	0xFE7
  1483                           postdec1	equ	0xFE5
  1484                           fsr1h	equ	0xFE2
  1485                           fsr1l	equ	0xFE1
  1486                           indf2	equ	0xFDF
  1487                           fsr2h	equ	0xFDA
  1488                           fsr2l	equ	0xFD9
  1489                           status	equ	0xFD8
  1490                           
  1491 ;; *************** function _USART1_init *****************
  1492 ;; Defined at:
  1493 ;;		line 40 in file "putgetc.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;		None
  1496 ;; Auto vars:     Size  Location     Type
  1497 ;;		None
  1498 ;; Return value:  Size  Location     Type
  1499 ;;		None               void
  1500 ;; Registers used:
  1501 ;;		wreg, status,2
  1502 ;; Tracked objects:
  1503 ;;		On entry : 0/0
  1504 ;;		On exit  : 0/0
  1505 ;;		Unchanged: 0/0
  1506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1507 ;;      Params:         0       0       0       0       0       0       0
  1508 ;;      Locals:         0       0       0       0       0       0       0
  1509 ;;      Temps:          0       0       0       0       0       0       0
  1510 ;;      Totals:         0       0       0       0       0       0       0
  1511 ;;Total ram usage:        0 bytes
  1512 ;; Hardware stack levels used:    1
  1513 ;; Hardware stack levels required when called:    5
  1514 ;; This function calls:
  1515 ;;		Nothing
  1516 ;; This function is called by:
  1517 ;;		_intialize
  1518 ;; This function uses a non-reentrant model
  1519 ;;
  1520                           
  1521                           	psect	text9
  1522  000C5C                     __ptext9:
  1523                           	opt stack 0
  1524  000C5C                     _USART1_init:
  1525                           	opt stack 23
  1526                           
  1527                           ;putgetc.c: 42: TXSTA1bits.TXEN = 0;
  1528                           
  1529                           ;incstack = 0
  1530  000C5C  9AAC               	bcf	4012,5,c	;volatile
  1531                           
  1532                           ;putgetc.c: 43: TXSTA1bits.TXEN = 1;
  1533  000C5E  8AAC               	bsf	4012,5,c	;volatile
  1534                           
  1535                           ;putgetc.c: 44: TXSTA1bits.BRGH = 1;
  1536  000C60  84AC               	bsf	4012,2,c	;volatile
  1537                           
  1538                           ;putgetc.c: 45: TXSTA1bits.TX9 = 0;
  1539  000C62  9CAC               	bcf	4012,6,c	;volatile
  1540                           
  1541                           ;putgetc.c: 46: TXSTA1bits.SYNC = 0;
  1542  000C64  98AC               	bcf	4012,4,c	;volatile
  1543                           
  1544                           ;putgetc.c: 48: RCSTA1bits.CREN = 0;
  1545  000C66  98AB               	bcf	4011,4,c	;volatile
  1546                           
  1547                           ;putgetc.c: 49: RCSTA1bits.CREN = 1;
  1548  000C68  88AB               	bsf	4011,4,c	;volatile
  1549                           
  1550                           ;putgetc.c: 50: RCSTA1bits.RX9 = 0;
  1551  000C6A  9CAB               	bcf	4011,6,c	;volatile
  1552                           
  1553                           ;putgetc.c: 52: TRISCbits.TRISC6 = 1 ;
  1554  000C6C  8C94               	bsf	3988,6,c	;volatile
  1555                           
  1556                           ;putgetc.c: 53: TRISCbits.TRISC7 = 1;
  1557  000C6E  8E94               	bsf	3988,7,c	;volatile
  1558                           
  1559                           ;putgetc.c: 55: SPBRG1 = 103;
  1560  000C70  0E67               	movlw	103
  1561  000C72  6EAF               	movwf	4015,c	;volatile
  1562                           
  1563                           ;putgetc.c: 56: SPBRGH1 = 0;
  1564  000C74  0E00               	movlw	0
  1565  000C76  6EB0               	movwf	4016,c	;volatile
  1566                           
  1567                           ;putgetc.c: 57: BAUDCON1bits.BRG16 = 0;
  1568  000C78  96B8               	bcf	4024,3,c	;volatile
  1569                           
  1570                           ;putgetc.c: 59: PIE1bits.RC1IE = 1;
  1571  000C7A  8A9D               	bsf	3997,5,c	;volatile
  1572                           
  1573                           ;putgetc.c: 60: IPR1bits.RC1IP = 1;
  1574  000C7C  8A9F               	bsf	3999,5,c	;volatile
  1575                           
  1576                           ;putgetc.c: 62: RCSTA1bits.SPEN = 1;
  1577  000C7E  8EAB               	bsf	4011,7,c	;volatile
  1578  000C80  0012               	return	
  1579  000C82                     __end_of_USART1_init:
  1580                           	opt stack 0
  1581                           tblptru	equ	0xFF8
  1582                           tblptrh	equ	0xFF7
  1583                           tblptrl	equ	0xFF6
  1584                           tablat	equ	0xFF5
  1585                           prodl	equ	0xFF3
  1586                           intcon	equ	0xFF2
  1587                           postinc0	equ	0xFEE
  1588                           wreg	equ	0xFE8
  1589                           indf1	equ	0xFE7
  1590                           postdec1	equ	0xFE5
  1591                           fsr1h	equ	0xFE2
  1592                           fsr1l	equ	0xFE1
  1593                           indf2	equ	0xFDF
  1594                           fsr2h	equ	0xFDA
  1595                           fsr2l	equ	0xFD9
  1596                           status	equ	0xFD8
  1597                           
  1598 ;; *************** function _UART2_Write_Line *****************
  1599 ;; Defined at:
  1600 ;;		line 88 in file "putgetc.c"
  1601 ;; Parameters:    Size  Location     Type
  1602 ;;  s               2   18[BANK0 ] PTR unsigned char 
  1603 ;;		 -> writeSensorString(80), 
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;		None
  1606 ;; Return value:  Size  Location     Type
  1607 ;;		None               void
  1608 ;; Registers used:
  1609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1615 ;;      Params:         0       2       0       0       0       0       0
  1616 ;;      Locals:         0       0       0       0       0       0       0
  1617 ;;      Temps:          0       0       0       0       0       0       0
  1618 ;;      Totals:         0       2       0       0       0       0       0
  1619 ;;Total ram usage:        2 bytes
  1620 ;; Hardware stack levels used:    1
  1621 ;; Hardware stack levels required when called:    7
  1622 ;; This function calls:
  1623 ;;		_UART2_Write_Char
  1624 ;;		_UART2_Write_String
  1625 ;; This function is called by:
  1626 ;;		_main
  1627 ;; This function uses a non-reentrant model
  1628 ;;
  1629                           
  1630                           	psect	text10
  1631  000CE6                     __ptext10:
  1632                           	opt stack 0
  1633  000CE6                     _UART2_Write_Line:
  1634                           	opt stack 22
  1635                           
  1636                           ;putgetc.c: 90: UART2_Write_String(s);
  1637                           
  1638                           ;incstack = 0
  1639  000CE6  0100               	movlb	0	; () banked
  1640  000CE8  C0C3  F0C1         	movff	UART2_Write_Line@s+1,UART2_Write_String@s+1
  1641  000CEC  0100               	movlb	0	; () banked
  1642  000CEE  C0C2  F0C0         	movff	UART2_Write_Line@s,UART2_Write_String@s
  1643  000CF2  EC41  F006         	call	_UART2_Write_String	;wreg free
  1644                           
  1645                           ;putgetc.c: 91: UART2_Write_Char('\r');
  1646  000CF6  0E0D               	movlw	13
  1647  000CF8  EC8F  F006         	call	_UART2_Write_Char
  1648  000CFC  0012               	return	
  1649  000CFE                     __end_of_UART2_Write_Line:
  1650                           	opt stack 0
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           prodl	equ	0xFF3
  1656                           intcon	equ	0xFF2
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           indf1	equ	0xFE7
  1660                           postdec1	equ	0xFE5
  1661                           fsr1h	equ	0xFE2
  1662                           fsr1l	equ	0xFE1
  1663                           indf2	equ	0xFDF
  1664                           fsr2h	equ	0xFDA
  1665                           fsr2l	equ	0xFD9
  1666                           status	equ	0xFD8
  1667                           
  1668 ;; *************** function _UART2_Write_String *****************
  1669 ;; Defined at:
  1670 ;;		line 78 in file "putgetc.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  s               2   16[BANK0 ] PTR unsigned char 
  1673 ;;		 -> writeSensorString(80), 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;		None
  1676 ;; Return value:  Size  Location     Type
  1677 ;;		None               void
  1678 ;; Registers used:
  1679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1680 ;; Tracked objects:
  1681 ;;		On entry : 0/0
  1682 ;;		On exit  : 0/0
  1683 ;;		Unchanged: 0/0
  1684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1685 ;;      Params:         0       2       0       0       0       0       0
  1686 ;;      Locals:         0       0       0       0       0       0       0
  1687 ;;      Temps:          0       0       0       0       0       0       0
  1688 ;;      Totals:         0       2       0       0       0       0       0
  1689 ;;Total ram usage:        2 bytes
  1690 ;; Hardware stack levels used:    1
  1691 ;; Hardware stack levels required when called:    6
  1692 ;; This function calls:
  1693 ;;		_UART2_Write_Char
  1694 ;; This function is called by:
  1695 ;;		_UART2_Write_Line
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text11
  1700  000C82                     __ptext11:
  1701                           	opt stack 0
  1702  000C82                     _UART2_Write_String:
  1703                           	opt stack 22
  1704                           
  1705                           ;putgetc.c: 80: while (*s)
  1706                           
  1707                           ;incstack = 0
  1708  000C82  D00A               	goto	l1464
  1709  000C84                     l1460:
  1710                           
  1711                           ;putgetc.c: 81: {
  1712                           ;putgetc.c: 82: UART2_Write_Char(*s);
  1713  000C84  C0C0  FFD9         	movff	UART2_Write_String@s,fsr2l
  1714  000C88  C0C1  FFDA         	movff	UART2_Write_String@s+1,fsr2h
  1715  000C8C  50DF               	movf	indf2,w,c
  1716  000C8E  EC8F  F006         	call	_UART2_Write_Char
  1717                           
  1718                           ;putgetc.c: 83: s++;
  1719  000C92  0100               	movlb	0	; () banked
  1720  000C94  4BC0               	infsnz	UART2_Write_String@s& (0+255),f,b
  1721  000C96  2BC1               	incf	(UART2_Write_String@s+1)& (0+255),f,b
  1722  000C98                     l1464:
  1723  000C98  C0C0  FFD9         	movff	UART2_Write_String@s,fsr2l
  1724  000C9C  C0C1  FFDA         	movff	UART2_Write_String@s+1,fsr2h
  1725  000CA0  50DF               	movf	indf2,w,c
  1726  000CA2  B4D8               	btfsc	status,2,c
  1727  000CA4  0012               	return	
  1728  000CA6  D7EE               	goto	l1460
  1729  000CA8                     __end_of_UART2_Write_String:
  1730                           	opt stack 0
  1731                           tblptru	equ	0xFF8
  1732                           tblptrh	equ	0xFF7
  1733                           tblptrl	equ	0xFF6
  1734                           tablat	equ	0xFF5
  1735                           prodl	equ	0xFF3
  1736                           intcon	equ	0xFF2
  1737                           postinc0	equ	0xFEE
  1738                           wreg	equ	0xFE8
  1739                           indf1	equ	0xFE7
  1740                           postdec1	equ	0xFE5
  1741                           fsr1h	equ	0xFE2
  1742                           fsr1l	equ	0xFE1
  1743                           indf2	equ	0xFDF
  1744                           fsr2h	equ	0xFDA
  1745                           fsr2l	equ	0xFD9
  1746                           status	equ	0xFD8
  1747                           
  1748 ;; *************** function _UART2_Write_Char *****************
  1749 ;; Defined at:
  1750 ;;		line 72 in file "putgetc.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;  data            1    wreg     unsigned char 
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;  data            1   15[BANK0 ] unsigned char 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;		None               void
  1757 ;; Registers used:
  1758 ;;		wreg
  1759 ;; Tracked objects:
  1760 ;;		On entry : 0/0
  1761 ;;		On exit  : 0/0
  1762 ;;		Unchanged: 0/0
  1763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1764 ;;      Params:         0       0       0       0       0       0       0
  1765 ;;      Locals:         0       1       0       0       0       0       0
  1766 ;;      Temps:          0       0       0       0       0       0       0
  1767 ;;      Totals:         0       1       0       0       0       0       0
  1768 ;;Total ram usage:        1 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    5
  1771 ;; This function calls:
  1772 ;;		Nothing
  1773 ;; This function is called by:
  1774 ;;		_UART2_Write_String
  1775 ;;		_UART2_Write_Line
  1776 ;; This function uses a non-reentrant model
  1777 ;;
  1778                           
  1779                           	psect	text12
  1780  000D1E                     __ptext12:
  1781                           	opt stack 0
  1782  000D1E                     _UART2_Write_Char:
  1783                           	opt stack 22
  1784                           
  1785                           ;incstack = 0
  1786                           ;UART2_Write_Char@data stored from wreg
  1787  000D1E  0100               	movlb	0	; () banked
  1788  000D20  6FBF               	movwf	UART2_Write_Char@data& (0+255),b
  1789  000D22                     l233:
  1790  000D22  A272               	btfss	3954,1,c	;volatile
  1791  000D24  D7FE               	goto	l233
  1792                           
  1793                           ;putgetc.c: 75: TXREG2 = data;
  1794  000D26  C0BF  FF73         	movff	UART2_Write_Char@data,3955	;volatile
  1795  000D2A  0012               	return	
  1796  000D2C                     __end_of_UART2_Write_Char:
  1797                           	opt stack 0
  1798                           tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           prodl	equ	0xFF3
  1803                           intcon	equ	0xFF2
  1804                           postinc0	equ	0xFEE
  1805                           wreg	equ	0xFE8
  1806                           indf1	equ	0xFE7
  1807                           postdec1	equ	0xFE5
  1808                           fsr1h	equ	0xFE2
  1809                           fsr1l	equ	0xFE1
  1810                           indf2	equ	0xFDF
  1811                           fsr2h	equ	0xFDA
  1812                           fsr2l	equ	0xFD9
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function _bt_handler *****************
  1816 ;; Defined at:
  1817 ;;		line 143 in file "arkeon.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;		None               void
  1824 ;; Registers used:
  1825 ;;		wreg
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1831 ;;      Params:         0       0       0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0
  1833 ;;      Temps:         18       0       0       0       0       0       0
  1834 ;;      Totals:        18       0       0       0       0       0       0
  1835 ;;Total ram usage:       18 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    4
  1838 ;; This function calls:
  1839 ;;		Nothing
  1840 ;; This function is called by:
  1841 ;;		Interrupt level 1
  1842 ;; This function uses a non-reentrant model
  1843 ;;
  1844                           
  1845                           	psect	intcodelo
  1846  000018                     __pintcodelo:
  1847                           	opt stack 0
  1848  000018                     _bt_handler:
  1849                           	opt stack 22
  1850                           
  1851                           ;incstack = 0
  1852  000018  CFD8 F002          	movff	status,??_bt_handler+1
  1853  00001C  CFE8 F003          	movff	wreg,??_bt_handler+2
  1854  000020  CFE0 F004          	movff	bsr,??_bt_handler+3
  1855  000024  CFFA F005          	movff	pclath,??_bt_handler+4
  1856  000028  CFFB F006          	movff	pclatu,??_bt_handler+5
  1857  00002C  CFE9 F007          	movff	fsr0l,??_bt_handler+6
  1858  000030  CFEA F008          	movff	fsr0h,??_bt_handler+7
  1859  000034  CFE1 F009          	movff	fsr1l,??_bt_handler+8
  1860  000038  CFE2 F00A          	movff	fsr1h,??_bt_handler+9
  1861  00003C  CFD9 F00B          	movff	fsr2l,??_bt_handler+10
  1862  000040  CFDA F00C          	movff	fsr2h,??_bt_handler+11
  1863  000044  CFF3 F00D          	movff	prodl,??_bt_handler+12
  1864  000048  CFF4 F00E          	movff	prodh,??_bt_handler+13
  1865  00004C  CFF6 F00F          	movff	tblptrl,??_bt_handler+14
  1866  000050  CFF7 F010          	movff	tblptrh,??_bt_handler+15
  1867  000054  CFF8 F011          	movff	tblptru,??_bt_handler+16
  1868  000058  CFF5 F012          	movff	tablat,??_bt_handler+17
  1869                           
  1870                           ;arkeon.c: 145: if ( RCSTA2bits.OERR ) {
  1871  00005C  A271               	btfss	3953,1,c	;volatile
  1872  00005E  D00A               	goto	i1l1214
  1873                           
  1874                           ;arkeon.c: 146: RCSTA2bits.CREN = 0;
  1875  000060  9871               	bcf	3953,4,c	;volatile
  1876                           
  1877                           ;arkeon.c: 147: _delay((unsigned long)((5)*(16000000/4000.0)));
  1878  000062  0E1A               	movlw	26
  1879  000064  6E01               	movwf	??_bt_handler& (0+255),c
  1880  000066  0EF8               	movlw	248
  1881  000068                     i1u115_27:
  1882  000068  2EE8               	decfsz	wreg,f,c
  1883  00006A  D7FE               	goto	i1u115_27
  1884  00006C  2E01               	decfsz	??_bt_handler& (0+255),f,c
  1885  00006E  D7FC               	goto	i1u115_27
  1886  000070  D000               	nop2	
  1887                           
  1888                           ;arkeon.c: 148: RCSTA2bits.CREN = 1;
  1889  000072  8871               	bsf	3953,4,c	;volatile
  1890  000074                     i1l1214:
  1891                           
  1892                           ;arkeon.c: 149: }
  1893                           ;arkeon.c: 151: if ( PIR3bits.RC2IF ) {
  1894  000074  AAA4               	btfss	4004,5,c	;volatile
  1895  000076  D003               	goto	i1l132
  1896                           
  1897                           ;arkeon.c: 153: bt_event=1;
  1898  000078  0100               	movlb	(_bt_event/(0+8)) shr (0+8)
  1899  00007A  8040               	bsf	_bt_event/(0+8),_bt_event& (0+7),c	;volatile
  1900                           
  1901                           ;arkeon.c: 154: PIR3bits.RC2IF = 0;
  1902  00007C  9AA4               	bcf	4004,5,c	;volatile
  1903  00007E                     i1l132:
  1904  00007E  C012  FFF5         	movff	??_bt_handler+17,tablat
  1905  000082  C011  FFF8         	movff	??_bt_handler+16,tblptru
  1906  000086  C010  FFF7         	movff	??_bt_handler+15,tblptrh
  1907  00008A  C00F  FFF6         	movff	??_bt_handler+14,tblptrl
  1908  00008E  C00E  FFF4         	movff	??_bt_handler+13,prodh
  1909  000092  C00D  FFF3         	movff	??_bt_handler+12,prodl
  1910  000096  C00C  FFDA         	movff	??_bt_handler+11,fsr2h
  1911  00009A  C00B  FFD9         	movff	??_bt_handler+10,fsr2l
  1912  00009E  C00A  FFE2         	movff	??_bt_handler+9,fsr1h
  1913  0000A2  C009  FFE1         	movff	??_bt_handler+8,fsr1l
  1914  0000A6  C008  FFEA         	movff	??_bt_handler+7,fsr0h
  1915  0000AA  C007  FFE9         	movff	??_bt_handler+6,fsr0l
  1916  0000AE  C006  FFFB         	movff	??_bt_handler+5,pclatu
  1917  0000B2  C005  FFFA         	movff	??_bt_handler+4,pclath
  1918  0000B6  C004  FFE0         	movff	??_bt_handler+3,bsr
  1919  0000BA  C003  FFE8         	movff	??_bt_handler+2,wreg
  1920  0000BE  C002  FFD8         	movff	??_bt_handler+1,status
  1921  0000C2  0010               	retfie	
  1922  0000C4                     __end_of_bt_handler:
  1923                           	opt stack 0
  1924                           pclatu	equ	0xFFB
  1925                           pclath	equ	0xFFA
  1926                           tblptru	equ	0xFF8
  1927                           tblptrh	equ	0xFF7
  1928                           tblptrl	equ	0xFF6
  1929                           tablat	equ	0xFF5
  1930                           prodh	equ	0xFF4
  1931                           prodl	equ	0xFF3
  1932                           intcon	equ	0xFF2
  1933                           postinc0	equ	0xFEE
  1934                           fsr0h	equ	0xFEA
  1935                           fsr0l	equ	0xFE9
  1936                           wreg	equ	0xFE8
  1937                           indf1	equ	0xFE7
  1938                           postdec1	equ	0xFE5
  1939                           fsr1h	equ	0xFE2
  1940                           fsr1l	equ	0xFE1
  1941                           bsr	equ	0xFE0
  1942                           indf2	equ	0xFDF
  1943                           fsr2h	equ	0xFDA
  1944                           fsr2l	equ	0xFD9
  1945                           status	equ	0xFD8
  1946                           
  1947 ;; *************** function _mux_handler *****************
  1948 ;; Defined at:
  1949 ;;		line 99 in file "arkeon.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;		None
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;		None
  1954 ;; Return value:  Size  Location     Type
  1955 ;;		None               void
  1956 ;; Registers used:
  1957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1963 ;;      Params:         0       0       0       0       0       0       0
  1964 ;;      Locals:         0       0       0       0       0       0       0
  1965 ;;      Temps:          0      15       0       0       0       0       0
  1966 ;;      Totals:         0      15       0       0       0       0       0
  1967 ;;Total ram usage:       15 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    3
  1970 ;; This function calls:
  1971 ;;		_UART1_Read_Line
  1972 ;;		_add_sensors_data
  1973 ;;		_isdigit
  1974 ;; This function is called by:
  1975 ;;		Interrupt level 2
  1976 ;; This function uses a non-reentrant model
  1977 ;;
  1978                           
  1979                           	psect	intcode
  1980  000008                     __pintcode:
  1981                           	opt stack 0
  1982  000008                     _mux_handler:
  1983                           	opt stack 22
  1984                           
  1985                           ;incstack = 0
  1986  000008  CFFA F0B1          	movff	pclath,??_mux_handler+1
  1987  00000C  CFFB F0B2          	movff	pclatu,??_mux_handler+2
  1988  000010  CFE9 F0B3          	movff	fsr0l,??_mux_handler+3
  1989  000014  EFBE  F003         	goto	int_func
  1990                           pclatu	equ	0xFFB
  1991                           pclath	equ	0xFFA
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           prodh	equ	0xFF4
  1997                           prodl	equ	0xFF3
  1998                           intcon	equ	0xFF2
  1999                           postinc0	equ	0xFEE
  2000                           fsr0h	equ	0xFEA
  2001                           fsr0l	equ	0xFE9
  2002                           wreg	equ	0xFE8
  2003                           indf1	equ	0xFE7
  2004                           postdec1	equ	0xFE5
  2005                           fsr1h	equ	0xFE2
  2006                           fsr1l	equ	0xFE1
  2007                           bsr	equ	0xFE0
  2008                           indf2	equ	0xFDF
  2009                           fsr2h	equ	0xFDA
  2010                           fsr2l	equ	0xFD9
  2011                           status	equ	0xFD8
  2012                           
  2013                           	psect	intcode_body
  2014  00077C                     __pintcode_body:
  2015                           	opt stack 22
  2016  00077C                     int_func:
  2017                           	opt stack 22
  2018  00077C  CFEA F0B4          	movff	fsr0h,??_mux_handler+4
  2019  000780  CFE1 F0B5          	movff	fsr1l,??_mux_handler+5
  2020  000784  CFE2 F0B6          	movff	fsr1h,??_mux_handler+6
  2021  000788  CFD9 F0B7          	movff	fsr2l,??_mux_handler+7
  2022  00078C  CFDA F0B8          	movff	fsr2h,??_mux_handler+8
  2023  000790  CFF3 F0B9          	movff	prodl,??_mux_handler+9
  2024  000794  CFF4 F0BA          	movff	prodh,??_mux_handler+10
  2025  000798  CFF6 F0BB          	movff	tblptrl,??_mux_handler+11
  2026  00079C  CFF7 F0BC          	movff	tblptrh,??_mux_handler+12
  2027  0007A0  CFF8 F0BD          	movff	tblptru,??_mux_handler+13
  2028  0007A4  CFF5 F0BE          	movff	tablat,??_mux_handler+14
  2029                           
  2030                           ;arkeon.c: 101: if( ( PIE1bits.RC1IE == 1 ) && ( PIR1bits.RC1IF == 1 ) ) {
  2031  0007A8  BA9D               	btfsc	3997,5,c	;volatile
  2032  0007AA  AA9E               	btfss	3998,5,c	;volatile
  2033  0007AC  D05F               	goto	i2l118
  2034                           
  2035                           ;arkeon.c: 103: PIR1bits.RC1IF = 0;
  2036  0007AE  9A9E               	bcf	3998,5,c	;volatile
  2037                           
  2038                           ;arkeon.c: 105: if ( RCSTA1bits.OERR ) {
  2039  0007B0  A2AB               	btfss	4011,1,c	;volatile
  2040  0007B2  D00C               	goto	i2l117
  2041                           
  2042                           ;arkeon.c: 106: RCSTA1bits.CREN = 0;
  2043  0007B4  98AB               	bcf	4011,4,c	;volatile
  2044                           
  2045                           ;arkeon.c: 107: _delay((unsigned long)((5)*(16000000/4000.0)));
  2046  0007B6  0E1A               	movlw	26
  2047  0007B8  0100               	movlb	0	; () banked
  2048  0007BA  6FB0               	movwf	??_mux_handler& (0+255),b
  2049  0007BC  0EF8               	movlw	248
  2050  0007BE                     i2u116_47:
  2051  0007BE  2EE8               	decfsz	wreg,f,c
  2052  0007C0  D7FE               	goto	i2u116_47
  2053  0007C2  2FB0               	decfsz	??_mux_handler& (0+255),f,b
  2054  0007C4  D7FC               	goto	i2u116_47
  2055  0007C6  D000               	nop2	
  2056                           
  2057                           ;arkeon.c: 108: RCSTA1bits.CREN = 1;
  2058  0007C8  88AB               	bsf	4011,4,c	;volatile
  2059  0007CA  D006               	goto	L1
  2060  0007CC                     i2l117:
  2061                           
  2062                           ;arkeon.c: 111: }
  2063                           ;arkeon.c: 113: if ( RCSTA1bits.FERR ) {
  2064  0007CC  A4AB               	btfss	4011,2,c	;volatile
  2065  0007CE  D007               	goto	i2l1792
  2066                           
  2067                           ;arkeon.c: 114: RCREG1; RCREG1; RCREG1; RCREG1;
  2068  0007D0  50AE               	movf	4014,w,c	;volatile
  2069  0007D2  50AE               	movf	4014,w,c	;volatile
  2070  0007D4  50AE               	movf	4014,w,c	;volatile
  2071  0007D6  50AE               	movf	4014,w,c	;volatile
  2072  0007D8                     L1:
  2073                           
  2074                           ;arkeon.c: 115: mux_error = 1;
  2075  0007D8  0100               	movlb	(_mux_error/(0+8)) shr (0+8)
  2076  0007DA  8440               	bsf	_mux_error/(0+8),_mux_error& (0+7),c	;volatile
  2077  0007DC  D047               	goto	i2l118
  2078  0007DE                     i2l1792:
  2079                           
  2080                           ;arkeon.c: 117: }
  2081                           ;arkeon.c: 120: UART1_Read_Line(mux_input,20);
  2082  0007DE  0E00               	movlw	high _mux_input
  2083  0007E0  6E14               	movwf	UART1_Read_Line@Output+1,c
  2084  0007E2  0E2C               	movlw	low _mux_input
  2085  0007E4  6E13               	movwf	UART1_Read_Line@Output,c
  2086  0007E6  0E00               	movlw	0
  2087  0007E8  6E16               	movwf	UART1_Read_Line@length+1,c
  2088  0007EA  0E14               	movlw	20
  2089  0007EC  6E15               	movwf	UART1_Read_Line@length,c
  2090  0007EE  ECD9  F004         	call	_UART1_Read_Line	;wreg free
  2091                           
  2092                           ;arkeon.c: 122: if ( !checking_for_sensors ) {
  2093  0007F2  0100               	movlb	(_checking_for_sensors/(0+8)) shr (0+8)
  2094  0007F4  B240               	btfsc	_checking_for_sensors/(0+8),_checking_for_sensors& (0+7),c	;volatile
  2095  0007F6  D038               	goto	i2l120
  2096                           
  2097                           ;arkeon.c: 123: if ( isdigit(mux_input[0]) ) {
  2098  0007F8  502C               	movf	_mux_input,w,c
  2099  0007FA  EC54  F006         	call	_isdigit
  2100  0007FE  A0D8               	btfss	status,0,c
  2101  000800  D035               	goto	i2l118
  2102                           
  2103                           ;arkeon.c: 124: if ( sensorIndex == 0 ) {
  2104  000802  502B               	movf	_sensorIndex+1,w,c
  2105  000804  102A               	iorwf	_sensorIndex,w,c
  2106  000806  A4D8               	btfss	status,2,c
  2107  000808  D00D               	goto	i2l1802
  2108                           
  2109                           ;arkeon.c: 125: add_sensors_data(mux_input,sensorArray0);
  2110  00080A  0E00               	movlw	high _mux_input
  2111  00080C  6E1A               	movwf	add_sensors_data@data+1,c
  2112  00080E  0E2C               	movlw	low _mux_input
  2113  000810  6E19               	movwf	add_sensors_data@data,c
  2114  000812  0100               	movlb	0	; () banked
  2115  000814  0E00               	movlw	high _sensorArray0
  2116  000816  6E1C               	movwf	add_sensors_data@formatted_sensor_data+1,c
  2117  000818  0100               	movlb	0	; () banked
  2118  00081A  0E74               	movlw	low _sensorArray0
  2119  00081C  6E1B               	movwf	add_sensors_data@formatted_sensor_data,c
  2120  00081E  EC08  F003         	call	_add_sensors_data	;wreg free
  2121                           
  2122                           ;arkeon.c: 126: } else if ( sensorIndex == 1 ) {
  2123  000822  D022               	goto	i2l120
  2124  000824                     i2l1802:
  2125  000824  042A               	decf	_sensorIndex,w,c
  2126  000826  102B               	iorwf	_sensorIndex+1,w,c
  2127  000828  A4D8               	btfss	status,2,c
  2128  00082A  D00D               	goto	i2l1806
  2129                           
  2130                           ;arkeon.c: 127: add_sensors_data(mux_input,sensorArray1);
  2131  00082C  0E00               	movlw	high _mux_input
  2132  00082E  6E1A               	movwf	add_sensors_data@data+1,c
  2133  000830  0E2C               	movlw	low _mux_input
  2134  000832  6E19               	movwf	add_sensors_data@data,c
  2135  000834  0100               	movlb	0	; () banked
  2136  000836  0E00               	movlw	high _sensorArray1
  2137  000838  6E1C               	movwf	add_sensors_data@formatted_sensor_data+1,c
  2138  00083A  0100               	movlb	0	; () banked
  2139  00083C  0E88               	movlw	low _sensorArray1
  2140  00083E  6E1B               	movwf	add_sensors_data@formatted_sensor_data,c
  2141  000840  EC08  F003         	call	_add_sensors_data	;wreg free
  2142                           
  2143                           ;arkeon.c: 128: } else if ( sensorIndex == 2 ) {
  2144  000844  D011               	goto	i2l120
  2145  000846                     i2l1806:
  2146  000846  502A               	movf	_sensorIndex,w,c
  2147  000848  0A02               	xorlw	2
  2148  00084A  102B               	iorwf	_sensorIndex+1,w,c
  2149  00084C  A4D8               	btfss	status,2,c
  2150  00084E  D00C               	goto	i2l120
  2151                           
  2152                           ;arkeon.c: 129: add_sensors_data(mux_input,sensorArray2);
  2153  000850  0E00               	movlw	high _mux_input
  2154  000852  6E1A               	movwf	add_sensors_data@data+1,c
  2155  000854  0E2C               	movlw	low _mux_input
  2156  000856  6E19               	movwf	add_sensors_data@data,c
  2157  000858  0100               	movlb	0	; () banked
  2158  00085A  0E00               	movlw	high _sensorArray2
  2159  00085C  6E1C               	movwf	add_sensors_data@formatted_sensor_data+1,c
  2160  00085E  0100               	movlb	0	; () banked
  2161  000860  0E9C               	movlw	low _sensorArray2
  2162  000862  6E1B               	movwf	add_sensors_data@formatted_sensor_data,c
  2163  000864  EC08  F003         	call	_add_sensors_data	;wreg free
  2164  000868                     i2l120:
  2165                           
  2166                           ;arkeon.c: 132: }
  2167                           ;arkeon.c: 134: mux_event=1;
  2168  000868  0100               	movlb	(_mux_event/(0+8)) shr (0+8)
  2169  00086A  8640               	bsf	_mux_event/(0+8),_mux_event& (0+7),c	;volatile
  2170  00086C                     i2l118:
  2171  00086C  C0BE  FFF5         	movff	??_mux_handler+14,tablat
  2172  000870  C0BD  FFF8         	movff	??_mux_handler+13,tblptru
  2173  000874  C0BC  FFF7         	movff	??_mux_handler+12,tblptrh
  2174  000878  C0BB  FFF6         	movff	??_mux_handler+11,tblptrl
  2175  00087C  C0BA  FFF4         	movff	??_mux_handler+10,prodh
  2176  000880  C0B9  FFF3         	movff	??_mux_handler+9,prodl
  2177  000884  C0B8  FFDA         	movff	??_mux_handler+8,fsr2h
  2178  000888  C0B7  FFD9         	movff	??_mux_handler+7,fsr2l
  2179  00088C  C0B6  FFE2         	movff	??_mux_handler+6,fsr1h
  2180  000890  C0B5  FFE1         	movff	??_mux_handler+5,fsr1l
  2181  000894  C0B4  FFEA         	movff	??_mux_handler+4,fsr0h
  2182  000898  C0B3  FFE9         	movff	??_mux_handler+3,fsr0l
  2183  00089C  C0B2  FFFB         	movff	??_mux_handler+2,pclatu
  2184  0008A0  C0B1  FFFA         	movff	??_mux_handler+1,pclath
  2185  0008A4  0011               	retfie		f
  2186  0008A6                     __end_of_mux_handler:
  2187                           	opt stack 0
  2188                           pclatu	equ	0xFFB
  2189                           pclath	equ	0xFFA
  2190                           tblptru	equ	0xFF8
  2191                           tblptrh	equ	0xFF7
  2192                           tblptrl	equ	0xFF6
  2193                           tablat	equ	0xFF5
  2194                           prodh	equ	0xFF4
  2195                           prodl	equ	0xFF3
  2196                           intcon	equ	0xFF2
  2197                           postinc0	equ	0xFEE
  2198                           fsr0h	equ	0xFEA
  2199                           fsr0l	equ	0xFE9
  2200                           wreg	equ	0xFE8
  2201                           indf1	equ	0xFE7
  2202                           postdec1	equ	0xFE5
  2203                           fsr1h	equ	0xFE2
  2204                           fsr1l	equ	0xFE1
  2205                           bsr	equ	0xFE0
  2206                           indf2	equ	0xFDF
  2207                           fsr2h	equ	0xFDA
  2208                           fsr2l	equ	0xFD9
  2209                           status	equ	0xFD8
  2210                           
  2211 ;; *************** function _isdigit *****************
  2212 ;; Defined at:
  2213 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/isdigit.c"
  2214 ;; Parameters:    Size  Location     Type
  2215 ;;  c               1    wreg     unsigned char 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  c               1   20[COMRAM] unsigned char 
  2218 ;; Return value:  Size  Location     Type
  2219 ;;		None               void
  2220 ;; Registers used:
  2221 ;;		wreg, status,2, status,0
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2227 ;;      Params:         0       0       0       0       0       0       0
  2228 ;;      Locals:         2       0       0       0       0       0       0
  2229 ;;      Temps:          1       0       0       0       0       0       0
  2230 ;;      Totals:         3       0       0       0       0       0       0
  2231 ;;Total ram usage:        3 bytes
  2232 ;; Hardware stack levels used:    1
  2233 ;; This function calls:
  2234 ;;		Nothing
  2235 ;; This function is called by:
  2236 ;;		_mux_handler
  2237 ;; This function uses a non-reentrant model
  2238 ;;
  2239                           
  2240                           	psect	text15
  2241  000CA8                     __ptext15:
  2242                           	opt stack 0
  2243  000CA8                     _isdigit:
  2244                           	opt stack 24
  2245                           
  2246                           ;incstack = 0
  2247                           ;isdigit@c stored from wreg
  2248  000CA8  6E15               	movwf	isdigit@c,c
  2249  000CAA  0E00               	movlw	0
  2250  000CAC  6E14               	movwf	_isdigit$1862,c
  2251  000CAE  0E3A               	movlw	58
  2252  000CB0  5C15               	subwf	isdigit@c,w,c
  2253  000CB2  B0D8               	btfsc	status,0,c
  2254  000CB4  D005               	goto	i2l1562
  2255  000CB6  0E2F               	movlw	47
  2256  000CB8  6415               	cpfsgt	isdigit@c,c
  2257  000CBA  D002               	goto	i2l1562
  2258  000CBC  0E01               	movlw	1
  2259  000CBE  6E14               	movwf	_isdigit$1862,c
  2260  000CC0                     i2l1562:
  2261  000CC0  C014  F013         	movff	_isdigit$1862,??_isdigit
  2262  000CC4  3013               	rrcf	??_isdigit,w,c
  2263  000CC6  0012               	return	
  2264  000CC8                     __end_of_isdigit:
  2265                           	opt stack 0
  2266                           pclatu	equ	0xFFB
  2267                           pclath	equ	0xFFA
  2268                           tblptru	equ	0xFF8
  2269                           tblptrh	equ	0xFF7
  2270                           tblptrl	equ	0xFF6
  2271                           tablat	equ	0xFF5
  2272                           prodh	equ	0xFF4
  2273                           prodl	equ	0xFF3
  2274                           intcon	equ	0xFF2
  2275                           postinc0	equ	0xFEE
  2276                           fsr0h	equ	0xFEA
  2277                           fsr0l	equ	0xFE9
  2278                           wreg	equ	0xFE8
  2279                           indf1	equ	0xFE7
  2280                           postdec1	equ	0xFE5
  2281                           fsr1h	equ	0xFE2
  2282                           fsr1l	equ	0xFE1
  2283                           bsr	equ	0xFE0
  2284                           indf2	equ	0xFDF
  2285                           fsr2h	equ	0xFDA
  2286                           fsr2l	equ	0xFD9
  2287                           status	equ	0xFD8
  2288                           
  2289 ;; *************** function _add_sensors_data *****************
  2290 ;; Defined at:
  2291 ;;		line 58 in file "arkeon.c"
  2292 ;; Parameters:    Size  Location     Type
  2293 ;;  data            2   24[COMRAM] PTR unsigned char 
  2294 ;;		 -> mux_input(20), 
  2295 ;;  formatted_se    2   26[COMRAM] PTR unsigned char 
  2296 ;;		 -> sensorArray2(20), sensorArray1(20), sensorArray0(20), 
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;  j               2   31[COMRAM] short 
  2299 ;;  tmp             2   36[COMRAM] PTR unsigned char 
  2300 ;;		 -> mux_input(20), 
  2301 ;;  dst             2   34[COMRAM] PTR unsigned char 
  2302 ;;		 -> sensorArray2(20), sensorArray1(20), sensorArray0(20), 
  2303 ;;  n               2   29[COMRAM] short 
  2304 ;;  count           1   33[COMRAM] unsigned char 
  2305 ;; Return value:  Size  Location     Type
  2306 ;;		None               void
  2307 ;; Registers used:
  2308 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2309 ;; Tracked objects:
  2310 ;;		On entry : 0/0
  2311 ;;		On exit  : 0/0
  2312 ;;		Unchanged: 0/0
  2313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2314 ;;      Params:         4       0       0       0       0       0       0
  2315 ;;      Locals:         9       0       0       0       0       0       0
  2316 ;;      Temps:          1       0       0       0       0       0       0
  2317 ;;      Totals:        14       0       0       0       0       0       0
  2318 ;;Total ram usage:       14 bytes
  2319 ;; Hardware stack levels used:    1
  2320 ;; Hardware stack levels required when called:    2
  2321 ;; This function calls:
  2322 ;;		_convert_char_hex
  2323 ;;		_strlen
  2324 ;; This function is called by:
  2325 ;;		_mux_handler
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329                           	psect	text16
  2330  000610                     __ptext16:
  2331                           	opt stack 0
  2332  000610                     _add_sensors_data:
  2333                           	opt stack 22
  2334                           
  2335                           ;arkeon.c: 61: short n = strlen(data);
  2336                           
  2337                           ;incstack = 0
  2338  000610  C01A  F014         	movff	add_sensors_data@data+1,strlen@s+1
  2339  000614  C019  F013         	movff	add_sensors_data@data,strlen@s
  2340  000618  ECE0  F005         	call	_strlen	;wreg free
  2341  00061C  C013  F01E         	movff	?_strlen,add_sensors_data@n
  2342  000620  C014  F01F         	movff	?_strlen+1,add_sensors_data@n+1
  2343                           
  2344                           ;arkeon.c: 62: for ( short j = 0; j < n; j++ ) formatted_sensor_data[j] = 0;
  2345  000624  0E00               	movlw	0
  2346  000626  6E21               	movwf	add_sensors_data@j+1,c
  2347  000628  0E00               	movlw	0
  2348  00062A  6E20               	movwf	add_sensors_data@j,c
  2349  00062C  D00A               	goto	i2l1480
  2350  00062E                     i2l1476:
  2351  00062E  5020               	movf	add_sensors_data@j,w,c
  2352  000630  241B               	addwf	add_sensors_data@formatted_sensor_data,w,c
  2353  000632  6ED9               	movwf	fsr2l,c
  2354  000634  5021               	movf	add_sensors_data@j+1,w,c
  2355  000636  201C               	addwfc	add_sensors_data@formatted_sensor_data+1,w,c
  2356  000638  6EDA               	movwf	fsr2h,c
  2357  00063A  0E00               	movlw	0
  2358  00063C  6EDF               	movwf	indf2,c
  2359  00063E  4A20               	infsnz	add_sensors_data@j,f,c
  2360  000640  2A21               	incf	add_sensors_data@j+1,f,c
  2361  000642                     i2l1480:
  2362  000642  5021               	movf	add_sensors_data@j+1,w,c
  2363  000644  0A80               	xorlw	128
  2364  000646  6E1D               	movwf	??_add_sensors_data& (0+255),c
  2365  000648  501E               	movf	add_sensors_data@n,w,c
  2366  00064A  5C20               	subwf	add_sensors_data@j,w,c
  2367  00064C  501F               	movf	add_sensors_data@n+1,w,c
  2368  00064E  0A80               	xorlw	128
  2369  000650  581D               	subwfb	??_add_sensors_data& (0+255),w,c
  2370  000652  A0D8               	btfss	status,0,c
  2371  000654  D7EC               	goto	i2l1476
  2372                           
  2373                           ;arkeon.c: 65: char *tmp = data;
  2374  000656  C01A  F026         	movff	add_sensors_data@data+1,add_sensors_data@tmp+1
  2375  00065A  C019  F025         	movff	add_sensors_data@data,add_sensors_data@tmp
  2376                           
  2377                           ;arkeon.c: 66: char *dst = &formatted_sensor_data[1];
  2378  00065E  0E01               	movlw	1
  2379  000660  241B               	addwf	add_sensors_data@formatted_sensor_data,w,c
  2380  000662  6E23               	movwf	add_sensors_data@dst,c
  2381  000664  0E00               	movlw	0
  2382  000666  201C               	addwfc	add_sensors_data@formatted_sensor_data+1,w,c
  2383  000668  6E24               	movwf	add_sensors_data@dst+1,c
  2384                           
  2385                           ;arkeon.c: 68: char count = 0;
  2386  00066A  0E00               	movlw	0
  2387  00066C  6E22               	movwf	add_sensors_data@count,c
  2388                           
  2389                           ;arkeon.c: 70: while ( *tmp && ( *tmp != '\r' ) && ( *tmp != '\n' ) ) {
  2390  00066E  D019               	goto	i2l1498
  2391  000670                     i2l1486:
  2392                           
  2393                           ;arkeon.c: 71: if ( *tmp == '.' ) { tmp++; break; }
  2394  000670  0E2E               	movlw	46
  2395  000672  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2396  000676  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2397  00067A  62DF               	cpfseq	indf2,c
  2398  00067C  D003               	goto	i2l1490
  2399  00067E  4A25               	infsnz	add_sensors_data@tmp,f,c
  2400  000680  2A26               	incf	add_sensors_data@tmp+1,f,c
  2401  000682  D025               	goto	i2l1504
  2402  000684                     i2l1490:
  2403                           
  2404                           ;arkeon.c: 72: count++;
  2405  000684  2A22               	incf	add_sensors_data@count,f,c
  2406                           
  2407                           ;arkeon.c: 73: *dst++ = *tmp++;
  2408  000686  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2409  00068A  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2410  00068E  C023  FFE1         	movff	add_sensors_data@dst,fsr1l
  2411  000692  C024  FFE2         	movff	add_sensors_data@dst+1,fsr1h
  2412  000696  CFDF FFE7          	movff	indf2,indf1
  2413  00069A  4A25               	infsnz	add_sensors_data@tmp,f,c
  2414  00069C  2A26               	incf	add_sensors_data@tmp+1,f,c
  2415  00069E  4A23               	infsnz	add_sensors_data@dst,f,c
  2416  0006A0  2A24               	incf	add_sensors_data@dst+1,f,c
  2417  0006A2                     i2l1498:
  2418  0006A2  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2419  0006A6  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2420  0006AA  50DF               	movf	indf2,w,c
  2421  0006AC  B4D8               	btfsc	status,2,c
  2422  0006AE  D00F               	goto	i2l1504
  2423  0006B0  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2424  0006B4  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2425  0006B8  50DF               	movf	indf2,w,c
  2426  0006BA  0A0D               	xorlw	13
  2427  0006BC  B4D8               	btfsc	status,2,c
  2428  0006BE  D007               	goto	i2l1504
  2429  0006C0  0E0A               	movlw	10
  2430  0006C2  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2431  0006C6  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2432  0006CA  62DF               	cpfseq	indf2,c
  2433  0006CC  D7D1               	goto	i2l1486
  2434  0006CE                     i2l1504:
  2435                           
  2436                           ;arkeon.c: 74: }
  2437                           ;arkeon.c: 78: if ( count > 0 ) {
  2438  0006CE  5022               	movf	add_sensors_data@count,w,c
  2439  0006D0  B4D8               	btfsc	status,2,c
  2440  0006D2  D04D               	goto	i2l1530
  2441                           
  2442                           ;arkeon.c: 80: if ( *tmp && ( *tmp != '\r' ) && ( *tmp != '\n' ) ) {
  2443  0006D4  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2444  0006D8  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2445  0006DC  50DF               	movf	indf2,w,c
  2446  0006DE  B4D8               	btfsc	status,2,c
  2447  0006E0  D035               	goto	i2l1526
  2448  0006E2  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2449  0006E6  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2450  0006EA  50DF               	movf	indf2,w,c
  2451  0006EC  0A0D               	xorlw	13
  2452  0006EE  B4D8               	btfsc	status,2,c
  2453  0006F0  D02D               	goto	i2l1526
  2454  0006F2  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2455  0006F6  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2456  0006FA  50DF               	movf	indf2,w,c
  2457  0006FC  0A0A               	xorlw	10
  2458  0006FE  A4D8               	btfss	status,2,c
  2459  000700  D00F               	goto	i2l1520
  2460  000702  D024               	goto	i2l1526
  2461  000704                     i2l1514:
  2462                           
  2463                           ;arkeon.c: 82: *dst++ = *tmp++;
  2464  000704  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2465  000708  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2466  00070C  C023  FFE1         	movff	add_sensors_data@dst,fsr1l
  2467  000710  C024  FFE2         	movff	add_sensors_data@dst+1,fsr1h
  2468  000714  CFDF FFE7          	movff	indf2,indf1
  2469  000718  4A25               	infsnz	add_sensors_data@tmp,f,c
  2470  00071A  2A26               	incf	add_sensors_data@tmp+1,f,c
  2471  00071C  4A23               	infsnz	add_sensors_data@dst,f,c
  2472  00071E  2A24               	incf	add_sensors_data@dst+1,f,c
  2473  000720                     i2l1520:
  2474  000720  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2475  000724  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2476  000728  50DF               	movf	indf2,w,c
  2477  00072A  B4D8               	btfsc	status,2,c
  2478  00072C  D00F               	goto	i2l1526
  2479  00072E  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2480  000732  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2481  000736  50DF               	movf	indf2,w,c
  2482  000738  0A0D               	xorlw	13
  2483  00073A  B4D8               	btfsc	status,2,c
  2484  00073C  D007               	goto	i2l1526
  2485  00073E  0E0A               	movlw	10
  2486  000740  C025  FFD9         	movff	add_sensors_data@tmp,fsr2l
  2487  000744  C026  FFDA         	movff	add_sensors_data@tmp+1,fsr2h
  2488  000748  62DF               	cpfseq	indf2,c
  2489  00074A  D7DC               	goto	i2l1514
  2490  00074C                     i2l1526:
  2491                           
  2492                           ;arkeon.c: 83: }
  2493                           ;arkeon.c: 84: }
  2494                           ;arkeon.c: 87: formatted_sensor_data[0] = convert_char_hex(count,0);
  2495  00074C  0E00               	movlw	0
  2496  00074E  6E15               	movwf	convert_char_hex@hi_lo,c
  2497  000750  5022               	movf	add_sensors_data@count,w,c
  2498  000752  EC64  F006         	call	_convert_char_hex
  2499  000756  C01B  FFD9         	movff	add_sensors_data@formatted_sensor_data,fsr2l
  2500  00075A  C01C  FFDA         	movff	add_sensors_data@formatted_sensor_data+1,fsr2h
  2501  00075E  6EDF               	movwf	indf2,c
  2502                           
  2503                           ;arkeon.c: 89: *dst = 'F';
  2504  000760  C023  FFD9         	movff	add_sensors_data@dst,fsr2l
  2505  000764  C024  FFDA         	movff	add_sensors_data@dst+1,fsr2h
  2506  000768  0E46               	movlw	70
  2507  00076A  6EDF               	movwf	indf2,c
  2508                           
  2509                           ;arkeon.c: 90: } else {
  2510  00076C  0012               	return	
  2511  00076E                     i2l1530:
  2512                           
  2513                           ;arkeon.c: 91: *dst = '0';
  2514  00076E  C023  FFD9         	movff	add_sensors_data@dst,fsr2l
  2515  000772  C024  FFDA         	movff	add_sensors_data@dst+1,fsr2h
  2516  000776  0E30               	movlw	48
  2517  000778  6EDF               	movwf	indf2,c
  2518  00077A  0012               	return	
  2519  00077C                     __end_of_add_sensors_data:
  2520                           	opt stack 0
  2521                           pclatu	equ	0xFFB
  2522                           pclath	equ	0xFFA
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           prodh	equ	0xFF4
  2528                           prodl	equ	0xFF3
  2529                           intcon	equ	0xFF2
  2530                           postinc0	equ	0xFEE
  2531                           fsr0h	equ	0xFEA
  2532                           fsr0l	equ	0xFE9
  2533                           wreg	equ	0xFE8
  2534                           indf1	equ	0xFE7
  2535                           postdec1	equ	0xFE5
  2536                           fsr1h	equ	0xFE2
  2537                           fsr1l	equ	0xFE1
  2538                           bsr	equ	0xFE0
  2539                           indf2	equ	0xFDF
  2540                           fsr2h	equ	0xFDA
  2541                           fsr2l	equ	0xFD9
  2542                           status	equ	0xFD8
  2543                           
  2544 ;; *************** function _strlen *****************
  2545 ;; Defined at:
  2546 ;;		line 4 in file "/Applications/microchip/xc8/v1.33/sources/common/strlen.c"
  2547 ;; Parameters:    Size  Location     Type
  2548 ;;  s               2   18[COMRAM] PTR const unsigned char 
  2549 ;;		 -> mux_input(20), 
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;  cp              2   22[COMRAM] PTR const unsigned char 
  2552 ;;		 -> mux_input(20), 
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  2   18[COMRAM] unsigned int 
  2555 ;; Registers used:
  2556 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2562 ;;      Params:         2       0       0       0       0       0       0
  2563 ;;      Locals:         2       0       0       0       0       0       0
  2564 ;;      Temps:          2       0       0       0       0       0       0
  2565 ;;      Totals:         6       0       0       0       0       0       0
  2566 ;;Total ram usage:        6 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		_add_sensors_data
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text17
  2576  000BC0                     __ptext17:
  2577                           	opt stack 0
  2578  000BC0                     _strlen:
  2579                           	opt stack 23
  2580                           
  2581                           ;incstack = 0
  2582  000BC0  C014  F018         	movff	strlen@s+1,strlen@cp+1
  2583  000BC4  C013  F017         	movff	strlen@s,strlen@cp
  2584  000BC8  D002               	goto	i2l1414
  2585  000BCA                     i2l1412:
  2586  000BCA  4A17               	infsnz	strlen@cp,f,c
  2587  000BCC  2A18               	incf	strlen@cp+1,f,c
  2588  000BCE                     i2l1414:
  2589  000BCE  C017  FFD9         	movff	strlen@cp,fsr2l
  2590  000BD2  C018  FFDA         	movff	strlen@cp+1,fsr2h
  2591  000BD6  50DF               	movf	indf2,w,c
  2592  000BD8  A4D8               	btfss	status,2,c
  2593  000BDA  D7F7               	goto	i2l1412
  2594  000BDC  C013  F015         	movff	strlen@s,??_strlen
  2595  000BE0  C014  F016         	movff	strlen@s+1,??_strlen+1
  2596  000BE4  1E15               	comf	??_strlen,f,c
  2597  000BE6  1E16               	comf	??_strlen+1,f,c
  2598  000BE8  4A15               	infsnz	??_strlen,f,c
  2599  000BEA  2A16               	incf	??_strlen+1,f,c
  2600  000BEC  5017               	movf	strlen@cp,w,c
  2601  000BEE  2415               	addwf	??_strlen,w,c
  2602  000BF0  6E13               	movwf	?_strlen,c
  2603  000BF2  5018               	movf	strlen@cp+1,w,c
  2604  000BF4  2016               	addwfc	??_strlen+1,w,c
  2605  000BF6  6E14               	movwf	?_strlen+1,c
  2606  000BF8  0012               	return	
  2607  000BFA                     __end_of_strlen:
  2608                           	opt stack 0
  2609                           pclatu	equ	0xFFB
  2610                           pclath	equ	0xFFA
  2611                           tblptru	equ	0xFF8
  2612                           tblptrh	equ	0xFF7
  2613                           tblptrl	equ	0xFF6
  2614                           tablat	equ	0xFF5
  2615                           prodh	equ	0xFF4
  2616                           prodl	equ	0xFF3
  2617                           intcon	equ	0xFF2
  2618                           postinc0	equ	0xFEE
  2619                           fsr0h	equ	0xFEA
  2620                           fsr0l	equ	0xFE9
  2621                           wreg	equ	0xFE8
  2622                           indf1	equ	0xFE7
  2623                           postdec1	equ	0xFE5
  2624                           fsr1h	equ	0xFE2
  2625                           fsr1l	equ	0xFE1
  2626                           bsr	equ	0xFE0
  2627                           indf2	equ	0xFDF
  2628                           fsr2h	equ	0xFDA
  2629                           fsr2l	equ	0xFD9
  2630                           status	equ	0xFD8
  2631                           
  2632 ;; *************** function _convert_char_hex *****************
  2633 ;; Defined at:
  2634 ;;		line 47 in file "arkeon.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;  c               1    wreg     unsigned char 
  2637 ;;  hi_lo           1   20[COMRAM] unsigned char 
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;  c               1   21[COMRAM] unsigned char 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      unsigned char 
  2642 ;; Registers used:
  2643 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2649 ;;      Params:         1       0       0       0       0       0       0
  2650 ;;      Locals:         1       0       0       0       0       0       0
  2651 ;;      Temps:          0       0       0       0       0       0       0
  2652 ;;      Totals:         2       0       0       0       0       0       0
  2653 ;;Total ram usage:        2 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    1
  2656 ;; This function calls:
  2657 ;;		_hexlookup
  2658 ;; This function is called by:
  2659 ;;		_add_sensors_data
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text18
  2664  000CC8                     __ptext18:
  2665                           	opt stack 0
  2666  000CC8                     _convert_char_hex:
  2667                           	opt stack 22
  2668                           
  2669                           ;incstack = 0
  2670                           ;convert_char_hex@c stored from wreg
  2671  000CC8  6E16               	movwf	convert_char_hex@c,c
  2672                           
  2673                           ;arkeon.c: 49: if ( hi_lo ) {
  2674  000CCA  5015               	movf	convert_char_hex@hi_lo,w,c
  2675  000CCC  B4D8               	btfsc	status,2,c
  2676  000CCE  D006               	goto	i2l1406
  2677                           
  2678                           ;arkeon.c: 50: return(hexlookup( (c & 0xF0) >> 4 ));
  2679  000CD0  3816               	swapf	convert_char_hex@c,w,c
  2680  000CD2  0B0F               	andlw	15
  2681  000CD4  0B0F               	andlw	15
  2682  000CD6  EC19  F006         	call	_hexlookup
  2683  000CDA  0012               	return	
  2684  000CDC                     i2l1406:
  2685                           
  2686                           ;arkeon.c: 52: return(hexlookup( (c & 0x0F) ));
  2687  000CDC  5016               	movf	convert_char_hex@c,w,c
  2688  000CDE  0B0F               	andlw	15
  2689  000CE0  EC19  F006         	call	_hexlookup
  2690  000CE4  0012               	return	
  2691  000CE6                     __end_of_convert_char_hex:
  2692                           	opt stack 0
  2693                           pclatu	equ	0xFFB
  2694                           pclath	equ	0xFFA
  2695                           tblptru	equ	0xFF8
  2696                           tblptrh	equ	0xFF7
  2697                           tblptrl	equ	0xFF6
  2698                           tablat	equ	0xFF5
  2699                           prodh	equ	0xFF4
  2700                           prodl	equ	0xFF3
  2701                           intcon	equ	0xFF2
  2702                           postinc0	equ	0xFEE
  2703                           fsr0h	equ	0xFEA
  2704                           fsr0l	equ	0xFE9
  2705                           wreg	equ	0xFE8
  2706                           indf1	equ	0xFE7
  2707                           postdec1	equ	0xFE5
  2708                           fsr1h	equ	0xFE2
  2709                           fsr1l	equ	0xFE1
  2710                           bsr	equ	0xFE0
  2711                           indf2	equ	0xFDF
  2712                           fsr2h	equ	0xFDA
  2713                           fsr2l	equ	0xFD9
  2714                           status	equ	0xFD8
  2715                           
  2716 ;; *************** function _hexlookup *****************
  2717 ;; Defined at:
  2718 ;;		line 39 in file "arkeon.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  h               1    wreg     unsigned char 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;  h               1   19[COMRAM] unsigned char 
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      unsigned char 
  2725 ;; Registers used:
  2726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2732 ;;      Params:         0       0       0       0       0       0       0
  2733 ;;      Locals:         1       0       0       0       0       0       0
  2734 ;;      Temps:          1       0       0       0       0       0       0
  2735 ;;      Totals:         2       0       0       0       0       0       0
  2736 ;;Total ram usage:        2 bytes
  2737 ;; Hardware stack levels used:    1
  2738 ;; This function calls:
  2739 ;;		Nothing
  2740 ;; This function is called by:
  2741 ;;		_convert_char_hex
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745                           	psect	text19
  2746  000C32                     __ptext19:
  2747                           	opt stack 0
  2748  000C32                     _hexlookup:
  2749                           	opt stack 22
  2750                           
  2751                           ;incstack = 0
  2752                           ;hexlookup@h stored from wreg
  2753  000C32  6E14               	movwf	hexlookup@h,c
  2754                           
  2755                           ;arkeon.c: 41: if ( (h & 0xF0) != 0 ) return(0);
  2756  000C34  C014  F013         	movff	hexlookup@h,??_hexlookup
  2757  000C38  0EF0               	movlw	240
  2758  000C3A  1613               	andwf	??_hexlookup,f,c
  2759  000C3C  B4D8               	btfsc	status,2,c
  2760  000C3E  D002               	goto	i2l1390
  2761  000C40  0E00               	movlw	0
  2762  000C42  0012               	return	
  2763  000C44                     i2l1390:
  2764                           
  2765                           ;arkeon.c: 42: static char hextable[] = "0123456789ABCDEF";
  2766                           ;arkeon.c: 43: return(hextable[h]);
  2767  000C44  5014               	movf	hexlookup@h,w,c
  2768  000C46  0D01               	mullw	1
  2769  000C48  0100               	movlb	0	; () banked
  2770  000C4A  0ECC               	movlw	low hexlookup@hextable
  2771  000C4C  24F3               	addwf	prodl,w,c
  2772  000C4E  6ED9               	movwf	fsr2l,c
  2773  000C50  0100               	movlb	0	; () banked
  2774  000C52  0E00               	movlw	high hexlookup@hextable
  2775  000C54  20F4               	addwfc	prodh,w,c
  2776  000C56  6EDA               	movwf	fsr2h,c
  2777  000C58  50DF               	movf	indf2,w,c
  2778  000C5A  0012               	return	
  2779  000C5C                     __end_of_hexlookup:
  2780                           	opt stack 0
  2781                           pclatu	equ	0xFFB
  2782                           pclath	equ	0xFFA
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           prodh	equ	0xFF4
  2788                           prodl	equ	0xFF3
  2789                           intcon	equ	0xFF2
  2790                           postinc0	equ	0xFEE
  2791                           fsr0h	equ	0xFEA
  2792                           fsr0l	equ	0xFE9
  2793                           wreg	equ	0xFE8
  2794                           indf1	equ	0xFE7
  2795                           postdec1	equ	0xFE5
  2796                           fsr1h	equ	0xFE2
  2797                           fsr1l	equ	0xFE1
  2798                           bsr	equ	0xFE0
  2799                           indf2	equ	0xFDF
  2800                           fsr2h	equ	0xFDA
  2801                           fsr2l	equ	0xFD9
  2802                           status	equ	0xFD8
  2803                           
  2804 ;; *************** function _UART1_Read_Line *****************
  2805 ;; Defined at:
  2806 ;;		line 160 in file "putgetc.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  Output          2   18[COMRAM] PTR unsigned char 
  2809 ;;		 -> mux_input(20), 
  2810 ;;  length          2   20[COMRAM] unsigned int 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  c               1   26[COMRAM] unsigned char 
  2813 ;;  i               2   24[COMRAM] int 
  2814 ;;  j               2   22[COMRAM] int 
  2815 ;; Return value:  Size  Location     Type
  2816 ;;		None               void
  2817 ;; Registers used:
  2818 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2824 ;;      Params:         4       0       0       0       0       0       0
  2825 ;;      Locals:         5       0       0       0       0       0       0
  2826 ;;      Temps:          0       0       0       0       0       0       0
  2827 ;;      Totals:         9       0       0       0       0       0       0
  2828 ;;Total ram usage:        9 bytes
  2829 ;; Hardware stack levels used:    1
  2830 ;; Hardware stack levels required when called:    1
  2831 ;; This function calls:
  2832 ;;		_UART1_Read
  2833 ;; This function is called by:
  2834 ;;		_mux_handler
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text20
  2839  0009B2                     __ptext20:
  2840                           	opt stack 0
  2841  0009B2                     _UART1_Read_Line:
  2842                           	opt stack 23
  2843                           
  2844                           ;putgetc.c: 163: for ( int j = 0; j < length; j++ ) {
  2845                           
  2846                           ;incstack = 0
  2847  0009B2  0E00               	movlw	0
  2848  0009B4  6E18               	movwf	UART1_Read_Line@j+1,c
  2849  0009B6  0E00               	movlw	0
  2850  0009B8  6E17               	movwf	UART1_Read_Line@j,c
  2851  0009BA  D00A               	goto	i2l1538
  2852  0009BC                     i2l1534:
  2853                           
  2854                           ;putgetc.c: 164: Output[j] = 0;
  2855  0009BC  5017               	movf	UART1_Read_Line@j,w,c
  2856  0009BE  2413               	addwf	UART1_Read_Line@Output,w,c
  2857  0009C0  6ED9               	movwf	fsr2l,c
  2858  0009C2  5018               	movf	UART1_Read_Line@j+1,w,c
  2859  0009C4  2014               	addwfc	UART1_Read_Line@Output+1,w,c
  2860  0009C6  6EDA               	movwf	fsr2h,c
  2861  0009C8  0E00               	movlw	0
  2862  0009CA  6EDF               	movwf	indf2,c
  2863  0009CC  4A17               	infsnz	UART1_Read_Line@j,f,c
  2864  0009CE  2A18               	incf	UART1_Read_Line@j+1,f,c
  2865  0009D0                     i2l1538:
  2866  0009D0  5015               	movf	UART1_Read_Line@length,w,c
  2867  0009D2  5C17               	subwf	UART1_Read_Line@j,w,c
  2868  0009D4  5016               	movf	UART1_Read_Line@length+1,w,c
  2869  0009D6  5818               	subwfb	UART1_Read_Line@j+1,w,c
  2870  0009D8  A0D8               	btfss	status,0,c
  2871  0009DA  D7F0               	goto	i2l1534
  2872                           
  2873                           ;putgetc.c: 165: }
  2874                           ;putgetc.c: 166: for ( int i=0; i < length; i++ ) {
  2875  0009DC  0E00               	movlw	0
  2876  0009DE  6E1A               	movwf	UART1_Read_Line@i+1,c
  2877  0009E0  0E00               	movlw	0
  2878  0009E2  6E19               	movwf	UART1_Read_Line@i,c
  2879  0009E4  D011               	goto	i2l1552
  2880  0009E6                     i2l1542:
  2881                           
  2882                           ;putgetc.c: 167: char c = UART1_Read();
  2883  0009E6  EC9A  F006         	call	_UART1_Read	;wreg free
  2884  0009EA  6E1B               	movwf	UART1_Read_Line@c,c
  2885                           
  2886                           ;putgetc.c: 168: if ( c == '\r' ) break;
  2887  0009EC  501B               	movf	UART1_Read_Line@c,w,c
  2888  0009EE  0A0D               	xorlw	13
  2889  0009F0  B4D8               	btfsc	status,2,c
  2890  0009F2  0012               	return	
  2891                           
  2892                           ;putgetc.c: 169: Output[i] = c;
  2893  0009F4  5019               	movf	UART1_Read_Line@i,w,c
  2894  0009F6  2413               	addwf	UART1_Read_Line@Output,w,c
  2895  0009F8  6ED9               	movwf	fsr2l,c
  2896  0009FA  501A               	movf	UART1_Read_Line@i+1,w,c
  2897  0009FC  2014               	addwfc	UART1_Read_Line@Output+1,w,c
  2898  0009FE  6EDA               	movwf	fsr2h,c
  2899  000A00  C01B  FFDF         	movff	UART1_Read_Line@c,indf2
  2900  000A04  4A19               	infsnz	UART1_Read_Line@i,f,c
  2901  000A06  2A1A               	incf	UART1_Read_Line@i+1,f,c
  2902  000A08                     i2l1552:
  2903  000A08  5015               	movf	UART1_Read_Line@length,w,c
  2904  000A0A  5C19               	subwf	UART1_Read_Line@i,w,c
  2905  000A0C  5016               	movf	UART1_Read_Line@length+1,w,c
  2906  000A0E  581A               	subwfb	UART1_Read_Line@i+1,w,c
  2907  000A10  B0D8               	btfsc	status,0,c
  2908  000A12  0012               	return	
  2909  000A14  D7E8               	goto	i2l1542
  2910  000A16                     __end_of_UART1_Read_Line:
  2911                           	opt stack 0
  2912                           pclatu	equ	0xFFB
  2913                           pclath	equ	0xFFA
  2914                           tblptru	equ	0xFF8
  2915                           tblptrh	equ	0xFF7
  2916                           tblptrl	equ	0xFF6
  2917                           tablat	equ	0xFF5
  2918                           prodh	equ	0xFF4
  2919                           prodl	equ	0xFF3
  2920                           intcon	equ	0xFF2
  2921                           postinc0	equ	0xFEE
  2922                           fsr0h	equ	0xFEA
  2923                           fsr0l	equ	0xFE9
  2924                           wreg	equ	0xFE8
  2925                           indf1	equ	0xFE7
  2926                           postdec1	equ	0xFE5
  2927                           fsr1h	equ	0xFE2
  2928                           fsr1l	equ	0xFE1
  2929                           bsr	equ	0xFE0
  2930                           indf2	equ	0xFDF
  2931                           fsr2h	equ	0xFDA
  2932                           fsr2l	equ	0xFD9
  2933                           status	equ	0xFD8
  2934                           
  2935 ;; *************** function _UART1_Read *****************
  2936 ;; Defined at:
  2937 ;;		line 147 in file "putgetc.c"
  2938 ;; Parameters:    Size  Location     Type
  2939 ;;		None
  2940 ;; Auto vars:     Size  Location     Type
  2941 ;;		None
  2942 ;; Return value:  Size  Location     Type
  2943 ;;                  1    wreg      unsigned char 
  2944 ;; Registers used:
  2945 ;;		wreg, status,2
  2946 ;; Tracked objects:
  2947 ;;		On entry : 0/0
  2948 ;;		On exit  : 0/0
  2949 ;;		Unchanged: 0/0
  2950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2951 ;;      Params:         0       0       0       0       0       0       0
  2952 ;;      Locals:         0       0       0       0       0       0       0
  2953 ;;      Temps:          0       0       0       0       0       0       0
  2954 ;;      Totals:         0       0       0       0       0       0       0
  2955 ;;Total ram usage:        0 bytes
  2956 ;; Hardware stack levels used:    1
  2957 ;; This function calls:
  2958 ;;		Nothing
  2959 ;; This function is called by:
  2960 ;;		_UART1_Read_Line
  2961 ;;		_UART1_Read_Text
  2962 ;; This function uses a non-reentrant model
  2963 ;;
  2964                           
  2965                           	psect	text21
  2966  000D34                     __ptext21:
  2967                           	opt stack 0
  2968  000D34                     _UART1_Read:
  2969                           	opt stack 23
  2970  000D34                     i2l284:
  2971  000D34  AA9D               	btfss	3997,5,c	;volatile
  2972  000D36  D7FE               	goto	i2l284
  2973                           
  2974                           ;putgetc.c: 150: return RCREG1;
  2975  000D38  50AE               	movf	4014,w,c	;volatile
  2976  000D3A  0012               	return	
  2977  000D3C                     __end_of_UART1_Read:
  2978                           	opt stack 0
  2979                           pclatu	equ	0xFFB
  2980                           pclath	equ	0xFFA
  2981                           tblptru	equ	0xFF8
  2982                           tblptrh	equ	0xFF7
  2983                           tblptrl	equ	0xFF6
  2984                           tablat	equ	0xFF5
  2985                           prodh	equ	0xFF4
  2986                           prodl	equ	0xFF3
  2987                           intcon	equ	0xFF2
  2988                           postinc0	equ	0xFEE
  2989                           fsr0h	equ	0xFEA
  2990                           fsr0l	equ	0xFE9
  2991                           wreg	equ	0xFE8
  2992                           indf1	equ	0xFE7
  2993                           postdec1	equ	0xFE5
  2994                           fsr1h	equ	0xFE2
  2995                           fsr1l	equ	0xFE1
  2996                           bsr	equ	0xFE0
  2997                           indf2	equ	0xFDF
  2998                           fsr2h	equ	0xFDA
  2999                           fsr2l	equ	0xFD9
  3000                           status	equ	0xFD8
  3001                           pclatu	equ	0xFFB
  3002                           pclath	equ	0xFFA
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           prodh	equ	0xFF4
  3008                           prodl	equ	0xFF3
  3009                           intcon	equ	0xFF2
  3010                           postinc0	equ	0xFEE
  3011                           fsr0h	equ	0xFEA
  3012                           fsr0l	equ	0xFE9
  3013                           wreg	equ	0xFE8
  3014                           indf1	equ	0xFE7
  3015                           postdec1	equ	0xFE5
  3016                           fsr1h	equ	0xFE2
  3017                           fsr1l	equ	0xFE1
  3018                           bsr	equ	0xFE0
  3019                           indf2	equ	0xFDF
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024                           	psect	rparam
  3025  0000                     pclatu	equ	0xFFB
  3026                           pclath	equ	0xFFA
  3027                           tblptru	equ	0xFF8
  3028                           tblptrh	equ	0xFF7
  3029                           tblptrl	equ	0xFF6
  3030                           tablat	equ	0xFF5
  3031                           prodh	equ	0xFF4
  3032                           prodl	equ	0xFF3
  3033                           intcon	equ	0xFF2
  3034                           postinc0	equ	0xFEE
  3035                           fsr0h	equ	0xFEA
  3036                           fsr0l	equ	0xFE9
  3037                           wreg	equ	0xFE8
  3038                           indf1	equ	0xFE7
  3039                           postdec1	equ	0xFE5
  3040                           fsr1h	equ	0xFE2
  3041                           fsr1l	equ	0xFE1
  3042                           bsr	equ	0xFE0
  3043                           indf2	equ	0xFDF
  3044                           fsr2h	equ	0xFDA
  3045                           fsr2l	equ	0xFD9
  3046                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    0
    Data        17
    BSS         185
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      64
    BANK0           160     28     125
    BANK1           256      0      80
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 20
		 -> mux_input(COMRAM[20]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 20
		 -> mux_input(COMRAM[20]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_2(CODE[10]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 20
		 -> sensorArray1(BANK0[20]), sensorArray0(BANK0[20]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    UART1_Read_Line@Output	PTR unsigned char  size(2) Largest target is 20
		 -> mux_input(COMRAM[20]), 

    UART2_Write_Line@s	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    UART2_Write_String@s	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> writeSensorString(BANK1[80]), 

    add_sensors_data@dst	PTR unsigned char  size(2) Largest target is 20
		 -> sensorArray2(BANK0[20]), sensorArray1(BANK0[20]), sensorArray0(BANK0[20]), 

    add_sensors_data@tmp	PTR unsigned char  size(2) Largest target is 20
		 -> mux_input(COMRAM[20]), 

    add_sensors_data@formatted_sensor_data	PTR unsigned char  size(2) Largest target is 20
		 -> sensorArray2(BANK0[20]), sensorArray1(BANK0[20]), sensorArray0(BANK0[20]), 

    add_sensors_data@data	PTR unsigned char  size(2) Largest target is 20
		 -> mux_input(COMRAM[20]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _mux_handler in COMRAM

    _mux_handler->_add_sensors_data
    _add_sensors_data->_strlen
    _convert_char_hex->_hexlookup

Critical Paths under _bt_handler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_strcat
    _main->_strcpy
    _send_sensor_cmd->_MUXchannel
    _intialize->_soft_delay
    _UART2_Write_Line->_UART2_Write_String
    _UART2_Write_String->_UART2_Write_Char

Critical Paths under _mux_handler in BANK0

    None.

Critical Paths under _bt_handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _mux_handler in BANK1

    None.

Critical Paths under _bt_handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _mux_handler in BANK2

    None.

Critical Paths under _bt_handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _mux_handler in BANK3

    None.

Critical Paths under _bt_handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _mux_handler in BANK4

    None.

Critical Paths under _bt_handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _mux_handler in BANK5

    None.

Critical Paths under _bt_handler in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    2155
                                             21 BANK0      7     7      0
                   _UART2_Write_Line
                          _intialize
                    _send_sensor_cmd
                         _soft_delay
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               6     2      4     181
                                             15 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _strcat                                               6     2      4     310
                                             15 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _send_sensor_cmd                                      1     1      0     566
                                             19 BANK0      1     1      0
                         _MUXchannel
                   _UART1_Write_Char
                         _soft_delay
 ---------------------------------------------------------------------------------
 (2) _UART1_Write_Char                                     1     1      0      22
                                             15 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MUXchannel                                           4     2      2     128
                                             15 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _intialize                                            0     0      0     394
                        _USART1_init
                     _interrupt_init
                         _soft_delay
 ---------------------------------------------------------------------------------
 (1) _soft_delay                                           3     1      2     394
                                             15 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USART1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART2_Write_Line                                     2     0      2     217
                                             18 BANK0      2     0      2
                   _UART2_Write_Char
                 _UART2_Write_String
 ---------------------------------------------------------------------------------
 (2) _UART2_Write_String                                   2     0      2     120
                                             16 BANK0      2     0      2
                   _UART2_Write_Char
 ---------------------------------------------------------------------------------
 (3) _UART2_Write_Char                                     1     1      0      22
                                             15 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _bt_handler                                          18    18      0       0
                                              0 COMRAM    18    18      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _mux_handler                                         15    15      0    1607
                                              0 BANK0     15    15      0
                    _UART1_Read_Line
                   _add_sensors_data
                            _isdigit
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      68
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _add_sensors_data                                    14    10      4    1208
                                             24 COMRAM    14    10      4
                   _convert_char_hex
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               6     4      2     143
                                             18 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) _convert_char_hex                                     2     1      1     163
                                             20 COMRAM     2     1      1
                          _hexlookup
 ---------------------------------------------------------------------------------
 (8) _hexlookup                                            2     2      0      44
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _UART1_Read_Line                                      9     5      4     331
                                             18 COMRAM     9     5      4
                         _UART1_Read
 ---------------------------------------------------------------------------------
 (7) _UART1_Read                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART2_Write_Line
     _UART2_Write_Char
     _UART2_Write_String
       _UART2_Write_Char
   _intialize
     _USART1_init
     _interrupt_init
     _soft_delay
   _send_sensor_cmd
     _MUXchannel
     _UART1_Write_Char
     _soft_delay
   _soft_delay
   _strcat
   _strcpy

 _bt_handler (ROOT)

 _mux_handler (ROOT)
   _UART1_Read_Line
     _UART1_Read
   _add_sensors_data
     _convert_char_hex
       _hexlookup
     _strlen
   _isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      50       8       31.2%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     1C      7D       6       78.1%
BITCOMRAM           5F      0       1       0        1.1%
COMRAM              5F     26      40       1       67.4%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10D       3        0.0%
DATA                 0      0     10D       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Nov 16 22:33:38 2014

                     _add_sensors_data 0610                                     bsr 000FE0  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                           _MUXchannel 0B02                 __end_of_interrupt_init 0D34  
           __end_of_UART2_Write_String 0CA8                                    l136 0B04  
                                  l233 0D22                                    l138 0B0A  
                                  l139 0B10                                    l266 0D14  
                         __CFG_CPB$OFF 000000                           __CFG_CPD$OFF 000000  
                                  prod 000FF3                                    wreg 000FE8  
                           _TXSTA1bits 000FAC                             _TXSTA2bits 000F72  
                         __CFG_LVP$OFF 000000                                   l1440 0C1A  
                                 l1424 0B16                                   l1600 0B92  
                                 l1610 0ADA                                   l1602 0B9E  
                                 l1460 0C84                                   l1436 0BFC  
                                 l1612 0AE6                                   l1606 0AC4  
                                 l1464 0C98                                   l1608 0ACA  
                                 l1720 09A2                                   l1704 08F6  
                                 STR_1 060B                                   STR_2 0601  
                                 u1147 0C04  add_sensors_data@formatted_sensor_data 001B  
                                 _main 08A6                                   fsr0h 000FEA  
                                 fsr1h 000FE2                                   fsr0l 000FE9  
                                 fsr2h 000FDA                                   indf1 000FE7  
                                 fsr1l 000FE1                                   indf2 000FDF  
                                 fsr2l 000FD9                          __CFG_BORV$190 000000  
                                 pclat 000FFA                                   prodh 000FF4  
                                 prodl 000FF3                                   start 00C4  
                        __CFG_IESO$OFF 000000                            ?_UART1_Read 0001  
                      _UART1_Read_Line 09B2                           _BAUDCON1bits 000FB8  
                         _BAUDCON2bits 000F70                           soft_delay@tt 00BF  
                                ?_main 0001                        ?_interrupt_init 0001  
                                i1l132 007E                                  i2l120 0868  
                                i2l117 07CC                                  i2l118 086C  
                         main@count_up 00C5                                  i2l284 0D34  
            __size_of_UART1_Write_Char 000E                                  _PORTA 000F80  
                                _PORTB 000F81                                  _PORTC 000F82  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                       __CFG_EBTR0$OFF 000000                         __CFG_FCMEN$OFF 000000  
                       __CFG_EBTR1$OFF 000000                         __CFG_EBTR2$OFF 000000  
                       __CFG_EBTR3$OFF 000000                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                       __CFG_EBTRB$OFF 000000                        __end_of_isdigit 0CC8  
                   __CFG_MCLRE$EXTMCLR 000000                                  main@i 00CA  
                convert_char_hex@hi_lo 0015                         __pbitbssCOMRAM 0200  
                                tablat 000FF5                                  status 000FD8  
                       __CFG_HFOFST$ON 000000              __size_of_UART2_Write_Char 000E  
                       __CFG_PBADEN$ON 000000              __size_of_UART2_Write_Line 0018  
                      __initialization 0A16                           __end_of_main 09B2  
                          ?_MUXchannel 00BF                                 ??_main 00C5  
                        __activetblptr 000002                         __CFG_PLLCFG$ON 000000  
                    ?_convert_char_hex 0015                  UART1_Read_Line@Output 0013  
                        main@inProcess 00C9                     ??_convert_char_hex 0016  
                UART1_Read_Line@length 0015                                 _ANSELA 000F38  
                               _ANSELC 000F3A                    __size_of_UART1_Read 0008  
                               i1l1214 0074                                 i2l1412 0BCA  
                               i2l1406 0CDC                                 i2l1414 0BCE  
                               i2l1520 0720                                 i2l1504 06CE  
                               i2l1514 0704                                 i2l1530 076E  
                               i2l1542 09E6                                 i2l1534 09BC  
                               i2l1390 0C44                                 i2l1526 074C  
                               i2l1552 0A08                                 i2l1480 0642  
                               i2l1538 09D0                                 i2l1490 0684  
                               i2l1562 0CC0                                 i2l1802 0824  
                               i2l1476 062E                                 i2l1486 0670  
                               i2l1806 0846                         __CFG_WDTEN$OFF 000000  
                               i2l1498 06A2                                 i2l1792 07DE  
                               _RCREG1 000FAE                                 _RCREG2 000F74  
                               _OSCCON 000FD3                                 _SPBRG1 000FAF  
                               _SPBRG2 000F75                                 _TXREG1 000FAD  
                               _TXREG2 000F73                __end_of_UART1_Read_Line 0A16  
                       __CFG_XINST$OFF 000000               __size_of_send_sensor_cmd 0040  
                       __CFG_STVREN$ON 000000                                 clear_0 0A1C  
                               clear_1 0A28                                 clear_2 0A36  
                               _strcat 0AB6                                 _strcpy 0B84  
                               _strlen 0BC0                              ??_isdigit 0013  
                         __mediumconst 0000                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                         ?_USART1_init 0001                           ?_mux_handler 0001  
             __end_of_add_sensors_data 077C                             __accesstop 0060  
              __end_of__initialization 0A5C                    __size_of_MUXchannel 0042  
                       __pcstackCOMRAM 0001                           __pidataBANK0 0CFE  
                     _UART1_Write_Char 0D10                      MUXchannel@channel 00BF  
                           __pbssBANK0 0060                             __pbssBANK1 0100  
                   _UART2_Write_String 0C82                     __size_of_hexlookup 002A  
                     _UART2_Write_Char 0D1E                       _UART2_Write_Line 0CE6  
                  ?_UART2_Write_String 00C0                       ?_UART1_Read_Line 0013  
                   __size_of_intialize 0050                     __CFG_CCP2MX$PORTC1 000000  
                         ??_UART1_Read 0013                       ??_interrupt_init 00BF  
                   __CFG_CCP3MX$PORTB5 000000                             _bt_handler 0018  
                    ??_send_sensor_cmd 00C3                                ?_strcat 00BF  
                              ?_strcpy 00BF                                ?_strlen 0013  
                           _has_sensor 0027                      add_sensors_data@j 0020  
                    add_sensors_data@n 001E                   ??_UART2_Write_String 00C2  
                              _SPBRGH1 000FB0                                _SPBRGH2 000F76  
                   __end_of_UART1_Read 0D3C                        __CFG_PWRTEN$OFF 000000  
                              __Hparam 0000                                __Lparam 0000  
                         __psmallconst 0600                                __pcinit 0A16  
                              __ramtop 0600                           ??_MUXchannel 00C1  
                              __ptext0 08A6                                __ptext1 0B84  
                              __ptext2 0AB6                                __ptext3 0B44  
                              __ptext4 0D10                                __ptext5 0B02  
                              __ptext6 0A66                                __ptext7 0BFA  
                              __ptext8 0D2C                                __ptext9 0C5C  
                    __end_of_hexlookup 0C5C                        __size_of_strcat 004C  
                      __size_of_strcpy 003C                        __size_of_strlen 003A  
                              _isdigit 0CA8                      __end_of_intialize 0AB6  
                       __pintcode_body 077C                   end_of_initialization 0A5C  
                  add_sensors_data@dst 0023                    add_sensors_data@tmp 0025  
                 __size_of_USART1_init 0026                          __Lmediumconst 0000  
                              int_func 077C                   __size_of_mux_handler 089E  
            __size_of_convert_char_hex 001E                     __end_of_MUXchannel 0B44  
          send_sensor_cmd@sensor_index 00C3                                postdec1 000FE5  
                              postinc0 000FEE                       UART1_Read_Line@c 001B  
                     UART1_Read_Line@i 0019                       UART1_Read_Line@j 0017  
                          ?_bt_handler 0001                                strlen@s 0013  
                           _soft_delay 0BFA                              _TRISAbits 000F92  
                            _TRISBbits 000F93                              _TRISCbits 000F94  
                    ?_add_sensors_data 0019                    main@count_bt_events 00C7  
                   ??_add_sensors_data 001D               __end_of_UART1_Write_Char 0D1E  
                  UART2_Write_String@s 00C0               __end_of_UART2_Write_Char 0D2C  
                       __end_of_strcat 0B02               __end_of_UART2_Write_Line 0CFE  
                       __end_of_strcpy 0BC0                         __end_of_strlen 0BFA  
                  start_initialization 0A16                   _checking_for_sensors 0201  
                           hexlookup@h 0014                    __size_of_bt_handler 00AC  
                      _send_sensor_cmd 0B44                            __pdataBANK0 00CC  
                             ??_strcat 00C3                               ??_strcpy 00C3  
                             ??_strlen 0015                            ?_soft_delay 00BF  
                    UART2_Write_Line@s 00C2                            __pbssCOMRAM 0027  
                        __pcstackBANK0 00B0                    __end_of__stringdata 060E  
                         _isdigit$1862 0014                       _convert_char_hex 0CC8  
                            __pintcode 0008                            __pintcodelo 0018  
             __size_of_UART1_Read_Line 0064                       __CFG_PRICLKEN$ON 000000  
                          __smallconst 0600                               ?_isdigit 0001  
          __size_of_UART2_Write_String 0026                              _hexlookup 0C32  
              __end_of_send_sensor_cmd 0B84                              _intialize 0A66  
                             _LATAbits 000F89                               _LATCbits 000F8B  
                             _IPR1bits 000F9F                               _PIE1bits 000F9D  
                             _IPR3bits 000FA5                               _PIE3bits 000FA3  
                             i1u115_27 0068                               i2u116_47 07BE  
                  __size_of_soft_delay 0038                               _PIR1bits 000F9E  
                             _PIR3bits 000FA4                               _RCONbits 000FD0  
                     __CFG_WDTPS$32768 000000                           ??_bt_handler 0001  
                            _mux_event 0203                              _mux_error 0202  
                            _mux_input 002C                            __stringdata 0601  
              __size_of_interrupt_init 0008                             ?_hexlookup 0001  
                        ??_USART1_init 00BF                          ??_mux_handler 00B0  
                            copy_data0 0A50                             ?_intialize 0001  
                   __end_of_bt_handler 00C4                  add_sensors_data@count 0022  
                    ?_UART1_Write_Char 0001                               __Hrparam 0000  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                   ??_UART1_Write_Char 00BF                      __CFG_P2BMX$PORTB5 000000  
            __size_of_add_sensors_data 016C                      ?_UART2_Write_Char 0001  
                    hexlookup@hextable 00CC                             strcat@from 00C1  
                    ?_UART2_Write_Line 00C2                       __size_of_isdigit 0020  
                    ??_UART1_Read_Line 0017                     ??_UART2_Write_Char 00BF  
                             __ptext10 0CE6                               __ptext11 0C82  
                             __ptext20 09B2                               __ptext12 0D1E  
                             __ptext21 0D34                               __ptext15 0CA8  
                             __ptext16 0610                               __ptext17 0BC0  
                             __ptext18 0CC8                               __ptext19 0C32  
                   ??_UART2_Write_Line 00C4                               _bt_event 0200  
                             _bt_input 0060                       ?_send_sensor_cmd 0001  
                           strcpy@from 00C1                          __size_of_main 010C  
                  __end_of_USART1_init 0C82                    __end_of_mux_handler 08A6  
                 UART1_Write_Char@data 00BF               __end_of_convert_char_hex 0CE6  
                         ??_soft_delay 00C1                      _writeSensorString 0100  
                          _OSCTUNEbits 000F9B                             _INTCONbits 000FF2  
                 add_sensors_data@data 0019                            ??_hexlookup 0013  
                         _sensorArray0 0074                           _sensorArray1 0088  
                         _sensorArray2 009C                               isdigit@c 0015  
                             intlevel1 0000                               intlevel2 0000  
                          ??_intialize 00C2                             _RCSTA1bits 000FAB  
                           _RCSTA2bits 000F71                     __end_of_soft_delay 0C32  
                           _UART1_Read 0D34                      convert_char_hex@c 0016  
                          _sensorIndex 002A                               strcat@cp 00C3  
                             strcat@to 00BF                               strcpy@cp 00C3  
                             strlen@cp 0017                         _interrupt_init 0D2C  
                             strcpy@to 00BF                   UART2_Write_Char@data 00BF  
                    __CFG_T3CMX$PORTC0 000000                            _USART1_init 0C5C  
                          _mux_handler 0008                      __CFG_FOSC$INTIO67 000000  
